var VDAY =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/app.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/app.js":
/*!********************!*\
  !*** ./src/app.js ***!
  \********************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _modules_camera__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./modules/camera */ \"./src/modules/camera.js\");\n/* harmony import */ var _modules_lighting__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./modules/lighting */ \"./src/modules/lighting.js\");\n/* harmony import */ var _ui_loading__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ui/loading */ \"./src/ui/loading.js\");\n/* harmony import */ var _modules_loop__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./modules/loop */ \"./src/modules/loop.js\");\n/* harmony import */ var _modules_materials__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./modules/materials */ \"./src/modules/materials.js\");\n/* harmony import */ var _modules_renderer__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./modules/renderer */ \"./src/modules/renderer.js\");\n/* harmony import */ var _modules_scene__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./modules/scene */ \"./src/modules/scene.js\");\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n/** App entry & main loop */\n// modules\n\n\n\n\n\n\n\n\nvar App =\n/*#__PURE__*/\nfunction () {\n  function App() {\n    var _this = this;\n\n    _classCallCheck(this, App);\n\n    this.modules = {\n      camera: new _modules_camera__WEBPACK_IMPORTED_MODULE_0__[\"default\"](),\n      lighting: new _modules_lighting__WEBPACK_IMPORTED_MODULE_1__[\"default\"](),\n      loading: new _ui_loading__WEBPACK_IMPORTED_MODULE_2__[\"default\"](),\n      loop: new _modules_loop__WEBPACK_IMPORTED_MODULE_3__[\"default\"](),\n      materials: new _modules_materials__WEBPACK_IMPORTED_MODULE_4__[\"default\"](),\n      renderer: new _modules_renderer__WEBPACK_IMPORTED_MODULE_5__[\"default\"](),\n      scene: new _modules_scene__WEBPACK_IMPORTED_MODULE_6__[\"default\"]()\n    }; // bind modules\n\n    Object.keys(this.modules).forEach(function (key) {\n      if (_this.modules[key].bind) {\n        _this.modules[key].bind(_this);\n      }\n    }); // start\n\n    this.target = null;\n    this.modules.loading.hide();\n  }\n\n  _createClass(App, [{\n    key: \"resize\",\n    value: function resize() {\n      var _this2 = this;\n\n      // bind modules\n      Object.keys(this.modules).forEach(function (key) {\n        if (_this2.modules[key].resize) {\n          _this2.modules[key].resize();\n        }\n      });\n    }\n  }]);\n\n  return App;\n}();\n\nwindow.onload = function () {\n  var app = new App();\n};\n\n//# sourceURL=webpack://VDAY/./src/app.js?");

/***/ }),

/***/ "./src/glsl/BloomLite.js":
/*!*******************************!*\
  !*** ./src/glsl/BloomLite.js ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/** lite bloom pass */\nTHREE.BloomLite = function (resolution, strength, radius, threshold) {\n  THREE.Pass.call(this);\n  this.strength = strength !== undefined ? strength : 1;\n  this.radius = radius;\n  this.threshold = threshold;\n  this.resolution = resolution !== undefined ? new THREE.Vector2(resolution.x, resolution.y) : new THREE.Vector2(256, 256); // create color only once here, reuse it later inside the render function\n\n  this.clearColor = new THREE.Color(0, 0, 0); // render targets\n\n  var pars = {\n    minFilter: THREE.LinearFilter,\n    magFilter: THREE.LinearFilter,\n    format: THREE.RGBAFormat\n  };\n  this.renderTargetsHorizontal = [];\n  this.renderTargetsVertical = [];\n  this.nMips = 3;\n  var resx = Math.round(this.resolution.x / 2);\n  var resy = Math.round(this.resolution.y / 2);\n  this.renderTargetBright = new THREE.WebGLRenderTarget(resx, resy, pars);\n  this.renderTargetBright.texture.name = \"BloomLite.bright\";\n  this.renderTargetBright.texture.generateMipmaps = false;\n\n  for (var i = 0; i < this.nMips; i++) {\n    var renderTargetHorizonal = new THREE.WebGLRenderTarget(resx, resy, pars);\n    renderTargetHorizonal.texture.name = \"BloomLite.h\" + i;\n    renderTargetHorizonal.texture.generateMipmaps = false;\n    this.renderTargetsHorizontal.push(renderTargetHorizonal);\n    var renderTargetVertical = new THREE.WebGLRenderTarget(resx, resy, pars);\n    renderTargetVertical.texture.name = \"BloomLite.v\" + i;\n    renderTargetVertical.texture.generateMipmaps = false;\n    this.renderTargetsVertical.push(renderTargetVertical);\n    resx = Math.round(resx / 2);\n    resy = Math.round(resy / 2);\n  } // luminosity high pass material\n\n\n  if (THREE.LuminosityHighPassShader === undefined) console.error(\"THREE.BloomLite relies on THREE.LuminosityHighPassShader\");\n  var highPassShader = THREE.LuminosityHighPassShader;\n  this.highPassUniforms = THREE.UniformsUtils.clone(highPassShader.uniforms);\n  this.highPassUniforms[\"luminosityThreshold\"].value = threshold;\n  this.highPassUniforms[\"smoothWidth\"].value = 0.01;\n  this.materialHighPassFilter = new THREE.ShaderMaterial({\n    uniforms: this.highPassUniforms,\n    vertexShader: highPassShader.vertexShader,\n    fragmentShader: highPassShader.fragmentShader,\n    defines: {}\n  }); // Gaussian Blur Materials\n\n  this.separableBlurMaterials = [];\n  var kernelSizeArray = [3, 5, 7, 9, 11];\n  var resx = Math.round(this.resolution.x / 2);\n  var resy = Math.round(this.resolution.y / 2);\n\n  for (var i = 0; i < this.nMips; i++) {\n    this.separableBlurMaterials.push(this.getSeperableBlurMaterial(kernelSizeArray[i]));\n    this.separableBlurMaterials[i].uniforms[\"texSize\"].value = new THREE.Vector2(resx, resy);\n    resx = Math.round(resx / 2);\n    resy = Math.round(resy / 2);\n  } // Composite material\n\n\n  this.compositeMaterial = this.getCompositeMaterial(this.nMips);\n  this.compositeMaterial.uniforms[\"blurTexture1\"].value = this.renderTargetsVertical[0].texture;\n  this.compositeMaterial.uniforms[\"blurTexture2\"].value = this.renderTargetsVertical[1].texture;\n  this.compositeMaterial.uniforms[\"blurTexture3\"].value = this.renderTargetsVertical[2].texture;\n  this.compositeMaterial.uniforms[\"bloomStrength\"].value = strength;\n  this.compositeMaterial.uniforms[\"bloomRadius\"].value = 0.1;\n  this.compositeMaterial.needsUpdate = true; // copy material\n\n  if (THREE.CopyShader === undefined) {\n    console.error(\"THREE.BloomLite relies on THREE.CopyShader\");\n  }\n\n  var copyShader = THREE.CopyShader;\n  this.copyUniforms = THREE.UniformsUtils.clone(copyShader.uniforms);\n  this.copyUniforms[\"opacity\"].value = 1.0;\n  this.materialCopy = new THREE.ShaderMaterial({\n    uniforms: this.copyUniforms,\n    vertexShader: copyShader.vertexShader,\n    fragmentShader: copyShader.fragmentShader,\n    blending: THREE.AdditiveBlending,\n    depthTest: false,\n    depthWrite: false,\n    transparent: true\n  });\n  this.enabled = true;\n  this.needsSwap = false;\n  this.oldClearColor = new THREE.Color();\n  this.oldClearAlpha = 1;\n  this.basic = new THREE.MeshBasicMaterial();\n  this.fsQuad = new THREE.Pass.FullScreenQuad(null);\n};\n\nTHREE.BloomLite.prototype = Object.assign(Object.create(THREE.Pass.prototype), {\n  constructor: THREE.BloomLite,\n  dispose: function dispose() {\n    for (var i = 0; i < this.renderTargetsHorizontal.length; i++) {\n      this.renderTargetsHorizontal[i].dispose();\n    }\n\n    for (var i = 0; i < this.renderTargetsVertical.length; i++) {\n      this.renderTargetsVertical[i].dispose();\n    }\n\n    this.renderTargetBright.dispose();\n  },\n  setSize: function setSize(width, height) {\n    var resx = Math.round(width / 2);\n    var resy = Math.round(height / 2);\n    this.renderTargetBright.setSize(resx, resy);\n\n    for (var i = 0; i < this.nMips; i++) {\n      this.renderTargetsHorizontal[i].setSize(resx, resy);\n      this.renderTargetsVertical[i].setSize(resx, resy);\n      this.separableBlurMaterials[i].uniforms[\"texSize\"].value = new THREE.Vector2(resx, resy);\n      resx = Math.round(resx / 2);\n      resy = Math.round(resy / 2);\n    }\n  },\n  render: function render(renderer, writeBuffer, readBuffer, deltaTime, maskActive) {\n    this.oldClearColor.copy(renderer.getClearColor());\n    this.oldClearAlpha = renderer.getClearAlpha();\n    var oldAutoClear = renderer.autoClear;\n    renderer.autoClear = false;\n    renderer.setClearColor(this.clearColor, 0);\n    if (maskActive) renderer.context.disable(renderer.context.STENCIL_TEST); // Render input to screen\n\n    if (this.renderToScreen) {\n      this.fsQuad.material = this.basic;\n      this.basic.map = readBuffer.texture;\n      renderer.setRenderTarget(null);\n      renderer.clear();\n      this.fsQuad.render(renderer);\n    } // 1. Extract Bright Areas\n\n\n    this.highPassUniforms[\"tDiffuse\"].value = readBuffer.texture;\n    this.highPassUniforms[\"luminosityThreshold\"].value = this.threshold;\n    this.fsQuad.material = this.materialHighPassFilter;\n    renderer.setRenderTarget(this.renderTargetBright);\n    renderer.clear();\n    this.fsQuad.render(renderer); // 2. Blur All the mips progressively\n\n    var inputRenderTarget = this.renderTargetBright;\n\n    for (var i = 0; i < this.nMips; i++) {\n      this.fsQuad.material = this.separableBlurMaterials[i];\n      this.separableBlurMaterials[i].uniforms[\"colorTexture\"].value = inputRenderTarget.texture;\n      this.separableBlurMaterials[i].uniforms[\"direction\"].value = THREE.BloomLite.BlurDirectionX;\n      renderer.setRenderTarget(this.renderTargetsHorizontal[i]);\n      renderer.clear();\n      this.fsQuad.render(renderer);\n      this.separableBlurMaterials[i].uniforms[\"colorTexture\"].value = this.renderTargetsHorizontal[i].texture;\n      this.separableBlurMaterials[i].uniforms[\"direction\"].value = THREE.BloomLite.BlurDirectionY;\n      renderer.setRenderTarget(this.renderTargetsVertical[i]);\n      renderer.clear();\n      this.fsQuad.render(renderer);\n      inputRenderTarget = this.renderTargetsVertical[i];\n    } // Composite All the mips\n\n\n    this.fsQuad.material = this.compositeMaterial;\n    this.compositeMaterial.uniforms[\"bloomStrength\"].value = this.strength;\n    this.compositeMaterial.uniforms[\"bloomRadius\"].value = this.radius;\n    renderer.setRenderTarget(this.renderTargetsHorizontal[0]);\n    renderer.clear();\n    this.fsQuad.render(renderer); // Blend it additively over the input texture\n\n    this.fsQuad.material = this.materialCopy;\n    this.copyUniforms[\"tDiffuse\"].value = this.renderTargetsHorizontal[0].texture;\n\n    if (maskActive) {\n      renderer.context.enable(renderer.context.STENCIL_TEST);\n    }\n\n    renderer.setRenderTarget(this.renderToScreen ? null : readBuffer);\n    this.fsQuad.render(renderer); // Restore renderer settings\n\n    renderer.setClearColor(this.oldClearColor, this.oldClearAlpha);\n    renderer.autoClear = oldAutoClear;\n  },\n  getSeperableBlurMaterial: function getSeperableBlurMaterial(kernelRadius) {\n    return new THREE.ShaderMaterial({\n      defines: {\n        \"KERNEL_RADIUS\": kernelRadius,\n        \"SIGMA\": kernelRadius\n      },\n      uniforms: {\n        \"colorTexture\": {\n          value: null\n        },\n        \"texSize\": {\n          value: new THREE.Vector2(0.5, 0.5)\n        },\n        \"direction\": {\n          value: new THREE.Vector2(0.5, 0.5)\n        }\n      },\n      vertexShader: \"\\n        varying vec2 vUv;\\n\\t\\t\\t\\tvoid main() {\\n\\t\\t\\t\\t\\tvUv = uv;\\n\\t\\t\\t\\t\\tgl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n\\t\\t\\t\\t}\",\n      fragmentShader: \"\\n        #include <common>\\n\\t\\t\\t\\tvarying vec2 vUv;\\n\\t\\t\\t\\tuniform sampler2D colorTexture;\\n\\t\\t\\t\\tuniform vec2 texSize;\\n\\t\\t\\t\\tuniform vec2 direction;\\n\\n\\t\\t\\t\\tfloat gaussianPdf(in float x, in float sigma) {\\n\\t\\t\\t\\t\\treturn 0.39894 * exp(-0.5 * x * x/(sigma * sigma))/sigma;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tvoid main() {\\n\\t\\t\\t\\t\\tvec2 invSize = 1.0 / texSize;\\n\\t\\t\\t\\t\\tfloat fSigma = float(SIGMA);\\n\\t\\t\\t\\t\\tfloat weightSum = gaussianPdf(0.0, fSigma);\\n\\t\\t\\t\\t\\tvec3 diffuseSum = texture2D(colorTexture, vUv).rgb * weightSum;\\n\\n\\t\\t\\t\\t\\tfor(int i = 1; i < KERNEL_RADIUS; i ++) {\\n\\t\\t\\t\\t\\t\\tfloat x = float(i);\\n\\t\\t\\t\\t\\t\\tfloat w = gaussianPdf(x, fSigma);\\n\\t\\t\\t\\t\\t\\tvec2 uvOffset = direction * invSize * x;\\n\\t\\t\\t\\t\\t\\tvec3 sample1 = texture2D(colorTexture, vUv + uvOffset).rgb;\\n\\t\\t\\t\\t\\t\\tvec3 sample2 = texture2D(colorTexture, vUv - uvOffset).rgb;\\n\\t\\t\\t\\t\\t\\tdiffuseSum += (sample1 + sample2) * w;\\n\\t\\t\\t\\t\\t\\tweightSum += 2.0 * w;\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\tgl_FragColor = vec4(diffuseSum / weightSum, 1.0);\\n\\t\\t\\t\\t}\"\n    });\n  },\n  getCompositeMaterial: function getCompositeMaterial(nMips) {\n    return new THREE.ShaderMaterial({\n      defines: {\n        \"NUM_MIPS\": nMips\n      },\n      uniforms: {\n        \"blurTexture1\": {\n          value: null\n        },\n        \"blurTexture2\": {\n          value: null\n        },\n        \"blurTexture3\": {\n          value: null\n        },\n        \"bloomStrength\": {\n          value: 1.0\n        },\n        \"bloomRadius\": {\n          value: 0.0\n        }\n      },\n      vertexShader: \"\\n\\t\\t\\t\\tvarying vec2 vUv;\\n\\t\\t\\t\\tvoid main() {\\n\\t\\t\\t\\t\\tvUv = uv;\\n\\t\\t\\t\\t\\tgl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n\\t\\t\\t\\t}\",\n      fragmentShader: \"\\n\\t\\t\\t\\tvarying vec2 vUv;\\n\\t\\t\\t\\tuniform sampler2D blurTexture1;\\n\\t\\t\\t\\tuniform sampler2D blurTexture2;\\n\\t\\t\\t\\tuniform sampler2D blurTexture3;\\n\\t\\t\\t\\tuniform float bloomStrength;\\n\\t\\t\\t\\tuniform float bloomRadius;\\n\\n\\t\\t\\t\\tvoid main() {\\n          vec4 c = vec4(1.0, 1.0, 1.0, 1.0);\\n\\t\\t\\t\\t\\tgl_FragColor = bloomStrength * (\\n            c * texture2D(blurTexture1, vUv) +\\n            c * texture2D(blurTexture2, vUv) +\\n\\t\\t\\t\\t\\t  0.5 * c * texture2D(blurTexture3, vUv)\\n         );\\n\\t\\t\\t\\t}\"\n    });\n  }\n});\nTHREE.BloomLite.BlurDirectionX = new THREE.Vector2(1.0, 0.0);\nTHREE.BloomLite.BlurDirectionY = new THREE.Vector2(0.0, 1.0);\n\n//# sourceURL=webpack://VDAY/./src/glsl/BloomLite.js?");

/***/ }),

/***/ "./src/glsl/CopyShader.js":
/*!********************************!*\
  !*** ./src/glsl/CopyShader.js ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/**\r\n * @author alteredq / http://alteredqualia.com/\r\n *\r\n * Full-screen textured quad shader\r\n */\nTHREE.CopyShader = {\n  uniforms: {\n    \"tDiffuse\": {\n      value: null\n    },\n    \"opacity\": {\n      value: 1.0\n    }\n  },\n  vertexShader: [\"varying vec2 vUv;\", \"void main() {\", \"vUv = uv;\", \"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\", \"}\"].join(\"\\n\"),\n  fragmentShader: [\"uniform float opacity;\", \"uniform sampler2D tDiffuse;\", \"varying vec2 vUv;\", \"void main() {\", \"vec4 texel = texture2D( tDiffuse, vUv );\", \"gl_FragColor = opacity * texel;\", \"}\"].join(\"\\n\")\n};\n\n//# sourceURL=webpack://VDAY/./src/glsl/CopyShader.js?");

/***/ }),

/***/ "./src/glsl/EffectComposer.js":
/*!************************************!*\
  !*** ./src/glsl/EffectComposer.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/**\r\n * @author alteredq / http://alteredqualia.com/\r\n */\nTHREE.EffectComposer = function (renderer, renderTarget) {\n  this.renderer = renderer;\n\n  if (renderTarget === undefined) {\n    var parameters = {\n      minFilter: THREE.LinearFilter,\n      magFilter: THREE.LinearFilter,\n      format: THREE.RGBAFormat,\n      stencilBuffer: false\n    };\n    var size = renderer.getSize(new THREE.Vector2());\n    this._pixelRatio = renderer.getPixelRatio();\n    this._width = size.width;\n    this._height = size.height;\n    renderTarget = new THREE.WebGLRenderTarget(this._width * this._pixelRatio, this._height * this._pixelRatio, parameters);\n    renderTarget.texture.name = 'EffectComposer.rt1';\n  } else {\n    this._pixelRatio = 1;\n    this._width = renderTarget.width;\n    this._height = renderTarget.height;\n  }\n\n  this.renderTarget1 = renderTarget;\n  this.renderTarget2 = renderTarget.clone();\n  this.renderTarget2.texture.name = 'EffectComposer.rt2';\n  this.writeBuffer = this.renderTarget1;\n  this.readBuffer = this.renderTarget2;\n  this.renderToScreen = true;\n  this.passes = []; // dependencies\n\n  if (THREE.CopyShader === undefined) {\n    console.error('THREE.EffectComposer relies on THREE.CopyShader');\n  }\n\n  if (THREE.ShaderPass === undefined) {\n    console.error('THREE.EffectComposer relies on THREE.ShaderPass');\n  }\n\n  this.copyPass = new THREE.ShaderPass(THREE.CopyShader);\n  this.clock = new THREE.Clock();\n};\n\nObject.assign(THREE.EffectComposer.prototype, {\n  swapBuffers: function swapBuffers() {\n    var tmp = this.readBuffer;\n    this.readBuffer = this.writeBuffer;\n    this.writeBuffer = tmp;\n  },\n  addPass: function addPass(pass) {\n    this.passes.push(pass);\n    var size = this.renderer.getDrawingBufferSize(new THREE.Vector2());\n    pass.setSize(size.width, size.height);\n  },\n  insertPass: function insertPass(pass, index) {\n    this.passes.splice(index, 0, pass);\n  },\n  isLastEnabledPass: function isLastEnabledPass(passIndex) {\n    for (var i = passIndex + 1; i < this.passes.length; i++) {\n      if (this.passes[i].enabled) {\n        return false;\n      }\n    }\n\n    return true;\n  },\n  render: function render(deltaTime) {\n    // deltaTime value is in seconds\n    if (deltaTime === undefined) {\n      deltaTime = this.clock.getDelta();\n    }\n\n    var currentRenderTarget = this.renderer.getRenderTarget();\n    var maskActive = false;\n    var pass,\n        i,\n        il = this.passes.length;\n\n    for (i = 0; i < il; i++) {\n      pass = this.passes[i];\n      if (pass.enabled === false) continue;\n      pass.renderToScreen = this.renderToScreen && this.isLastEnabledPass(i);\n      pass.render(this.renderer, this.writeBuffer, this.readBuffer, deltaTime, maskActive);\n\n      if (pass.needsSwap) {\n        if (maskActive) {\n          var context = this.renderer.context;\n          context.stencilFunc(context.NOTEQUAL, 1, 0xffffffff);\n          this.copyPass.render(this.renderer, this.writeBuffer, this.readBuffer, deltaTime);\n          context.stencilFunc(context.EQUAL, 1, 0xffffffff);\n        }\n\n        this.swapBuffers();\n      }\n\n      if (THREE.MaskPass !== undefined) {\n        if (pass instanceof THREE.MaskPass) {\n          maskActive = true;\n        } else if (pass instanceof THREE.ClearMaskPass) {\n          maskActive = false;\n        }\n      }\n    }\n\n    this.renderer.setRenderTarget(currentRenderTarget);\n  },\n  reset: function reset(renderTarget) {\n    if (renderTarget === undefined) {\n      var size = this.renderer.getSize(new THREE.Vector2());\n      this._pixelRatio = this.renderer.getPixelRatio();\n      this._width = size.width;\n      this._height = size.height;\n      renderTarget = this.renderTarget1.clone();\n      renderTarget.setSize(this._width * this._pixelRatio, this._height * this._pixelRatio);\n    }\n\n    this.renderTarget1.dispose();\n    this.renderTarget2.dispose();\n    this.renderTarget1 = renderTarget;\n    this.renderTarget2 = renderTarget.clone();\n    this.writeBuffer = this.renderTarget1;\n    this.readBuffer = this.renderTarget2;\n  },\n  setSize: function setSize(width, height) {\n    this._width = width;\n    this._height = height;\n    var effectiveWidth = this._width * this._pixelRatio;\n    var effectiveHeight = this._height * this._pixelRatio;\n    this.renderTarget1.setSize(effectiveWidth, effectiveHeight);\n    this.renderTarget2.setSize(effectiveWidth, effectiveHeight);\n\n    for (var i = 0; i < this.passes.length; i++) {\n      this.passes[i].setSize(effectiveWidth, effectiveHeight);\n    }\n  },\n  setPixelRatio: function setPixelRatio(pixelRatio) {\n    this._pixelRatio = pixelRatio;\n    this.setSize(this._width, this._height);\n  }\n});\n\nTHREE.Pass = function () {\n  // if set to true, the pass is processed by the composer\n  this.enabled = true; // if set to true, the pass indicates to swap read and write buffer after rendering\n\n  this.needsSwap = true; // if set to true, the pass clears its buffer before rendering\n\n  this.clear = false; // if set to true, the result of the pass is rendered to screen. This is set automatically by EffectComposer.\n\n  this.renderToScreen = false;\n};\n\nObject.assign(THREE.Pass.prototype, {\n  setSize: function setSize()\n  /* width, height */\n  {},\n  render: function render()\n  /* renderer, writeBuffer, readBuffer, deltaTime, maskActive */\n  {\n    console.error('THREE.Pass: .render() must be implemented in derived pass.');\n  }\n}); // Helper for passes that need to fill the viewport with a single quad.\n\nTHREE.Pass.FullScreenQuad = function () {\n  var camera = new THREE.OrthographicCamera(-1, 1, 1, -1, 0, 1);\n  var geometry = new THREE.PlaneBufferGeometry(2, 2);\n\n  var FullScreenQuad = function FullScreenQuad(material) {\n    this._mesh = new THREE.Mesh(geometry, material);\n  };\n\n  Object.defineProperty(FullScreenQuad.prototype, 'material', {\n    get: function get() {\n      return this._mesh.material;\n    },\n    set: function set(value) {\n      this._mesh.material = value;\n    }\n  });\n  Object.assign(FullScreenQuad.prototype, {\n    render: function render(renderer) {\n      renderer.render(this._mesh, camera);\n    }\n  });\n  return FullScreenQuad;\n}();\n\n//# sourceURL=webpack://VDAY/./src/glsl/EffectComposer.js?");

/***/ }),

/***/ "./src/glsl/FXAA.js":
/*!**************************!*\
  !*** ./src/glsl/FXAA.js ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/**\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author davidedc / http://www.sketchpatch.net/\r\n *\r\n * NVIDIA FXAA by Timothy Lottes\r\n * http://timothylottes.blogspot.com/2011/06/fxaa3-source-released.html\r\n * - WebGL port by @supereggbert\r\n * http://www.glge.org/demos/fxaa/\r\n */\nTHREE.FXAAShader = {\n  uniforms: {\n    \"tDiffuse\": {\n      value: null\n    },\n    \"resolution\": {\n      value: new THREE.Vector2(1 / 1024, 1 / 512)\n    }\n  },\n  vertexShader: [\"varying vec2 vUv;\", \"void main() {\", \"vUv = uv;\", \"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\", \"}\"].join(\"\\n\"),\n  fragmentShader: [\"precision highp float;\", \"\", \"uniform sampler2D tDiffuse;\", \"\", \"uniform vec2 resolution;\", \"\", \"varying vec2 vUv;\", \"\", \"// FXAA 3.11 implementation by NVIDIA, ported to WebGL by Agost Biro (biro@archilogic.com)\", \"\", \"//----------------------------------------------------------------------------------\", \"// File:        es3-kepler\\FXAA\\assets\\shaders/FXAA_DefaultES.frag\", \"// SDK Version: v3.00\", \"// Email:       gameworks@nvidia.com\", \"// Site:        http://developer.nvidia.com/\", \"//\", \"// Copyright (c) 2014-2015, NVIDIA CORPORATION. All rights reserved.\", \"//\", \"// Redistribution and use in source and binary forms, with or without\", \"// modification, are permitted provided that the following conditions\", \"// are met:\", \"//  * Redistributions of source code must retain the above copyright\", \"//    notice, this list of conditions and the following disclaimer.\", \"//  * Redistributions in binary form must reproduce the above copyright\", \"//    notice, this list of conditions and the following disclaimer in the\", \"//    documentation and/or other materials provided with the distribution.\", \"//  * Neither the name of NVIDIA CORPORATION nor the names of its\", \"//    contributors may be used to endorse or promote products derived\", \"//    from this software without specific prior written permission.\", \"//\", \"// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS'' AND ANY\", \"// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\", \"// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\", \"// PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR\", \"// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\", \"// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\", \"// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\", \"// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY\", \"// OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\", \"// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\", \"// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\", \"//\", \"//----------------------------------------------------------------------------------\", \"\", \"#define FXAA_PC 1\", \"#define FXAA_GLSL_100 1\", \"#define FXAA_QUALITY_PRESET 12\", \"\", \"#define FXAA_GREEN_AS_LUMA 1\", \"\", \"/*--------------------------------------------------------------------------*/\", \"#ifndef FXAA_PC_CONSOLE\", \"    //\", \"    // The console algorithm for PC is included\", \"    // for developers targeting really low spec machines.\", \"    // Likely better to just run FXAA_PC, and use a really low preset.\", \"    //\", \"    #define FXAA_PC_CONSOLE 0\", \"#endif\", \"/*--------------------------------------------------------------------------*/\", \"#ifndef FXAA_GLSL_120\", \"    #define FXAA_GLSL_120 0\", \"#endif\", \"/*--------------------------------------------------------------------------*/\", \"#ifndef FXAA_GLSL_130\", \"    #define FXAA_GLSL_130 0\", \"#endif\", \"/*--------------------------------------------------------------------------*/\", \"#ifndef FXAA_HLSL_3\", \"    #define FXAA_HLSL_3 0\", \"#endif\", \"/*--------------------------------------------------------------------------*/\", \"#ifndef FXAA_HLSL_4\", \"    #define FXAA_HLSL_4 0\", \"#endif\", \"/*--------------------------------------------------------------------------*/\", \"#ifndef FXAA_HLSL_5\", \"    #define FXAA_HLSL_5 0\", \"#endif\", \"/*==========================================================================*/\", \"#ifndef FXAA_GREEN_AS_LUMA\", \"    //\", \"    // For those using non-linear color,\", \"    // and either not able to get luma in alpha, or not wanting to,\", \"    // this enables FXAA to run using green as a proxy for luma.\", \"    // So with this enabled, no need to pack luma in alpha.\", \"    //\", \"    // This will turn off AA on anything which lacks some amount of green.\", \"    // Pure red and blue or combination of only R and B, will get no AA.\", \"    //\", \"    // Might want to lower the settings for both,\", \"    //    fxaaConsoleEdgeThresholdMin\", \"    //    fxaaQualityEdgeThresholdMin\", \"    // In order to insure AA does not get turned off on colors\", \"    // which contain a minor amount of green.\", \"    //\", \"    // 1 = On.\", \"    // 0 = Off.\", \"    //\", \"    #define FXAA_GREEN_AS_LUMA 0\", \"#endif\", \"/*--------------------------------------------------------------------------*/\", \"#ifndef FXAA_EARLY_EXIT\", \"    //\", \"    // Controls algorithm's early exit path.\", \"    // On PS3 turning this ON adds 2 cycles to the shader.\", \"    // On 360 turning this OFF adds 10ths of a millisecond to the shader.\", \"    // Turning this off on console will result in a more blurry image.\", \"    // So this defaults to on.\", \"    //\", \"    // 1 = On.\", \"    // 0 = Off.\", \"    //\", \"    #define FXAA_EARLY_EXIT 1\", \"#endif\", \"/*--------------------------------------------------------------------------*/\", \"#ifndef FXAA_DISCARD\", \"    //\", \"    // Only valid for PC OpenGL currently.\", \"    // Probably will not work when FXAA_GREEN_AS_LUMA = 1.\", \"    //\", \"    // 1 = Use discard on pixels which don't need AA.\", \"    //     For APIs which enable concurrent TEX+ROP from same surface.\", \"    // 0 = Return unchanged color on pixels which don't need AA.\", \"    //\", \"    #define FXAA_DISCARD 0\", \"#endif\", \"/*--------------------------------------------------------------------------*/\", \"#ifndef FXAA_FAST_PIXEL_OFFSET\", \"    //\", \"    // Used for GLSL 120 only.\", \"    //\", \"    // 1 = GL API supports fast pixel offsets\", \"    // 0 = do not use fast pixel offsets\", \"    //\", \"    #ifdef GL_EXT_gpu_shader4\", \"        #define FXAA_FAST_PIXEL_OFFSET 1\", \"    #endif\", \"    #ifdef GL_NV_gpu_shader5\", \"        #define FXAA_FAST_PIXEL_OFFSET 1\", \"    #endif\", \"    #ifdef GL_ARB_gpu_shader5\", \"        #define FXAA_FAST_PIXEL_OFFSET 1\", \"    #endif\", \"    #ifndef FXAA_FAST_PIXEL_OFFSET\", \"        #define FXAA_FAST_PIXEL_OFFSET 0\", \"    #endif\", \"#endif\", \"/*--------------------------------------------------------------------------*/\", \"#ifndef FXAA_GATHER4_ALPHA\", \"    //\", \"    // 1 = API supports gather4 on alpha channel.\", \"    // 0 = API does not support gather4 on alpha channel.\", \"    //\", \"    #if (FXAA_HLSL_5 == 1)\", \"        #define FXAA_GATHER4_ALPHA 1\", \"    #endif\", \"    #ifdef GL_ARB_gpu_shader5\", \"        #define FXAA_GATHER4_ALPHA 1\", \"    #endif\", \"    #ifdef GL_NV_gpu_shader5\", \"        #define FXAA_GATHER4_ALPHA 1\", \"    #endif\", \"    #ifndef FXAA_GATHER4_ALPHA\", \"        #define FXAA_GATHER4_ALPHA 0\", \"    #endif\", \"#endif\", \"\", \"\", \"/*============================================================================\", \"                        FXAA QUALITY - TUNING KNOBS\", \"------------------------------------------------------------------------------\", \"NOTE the other tuning knobs are now in the shader function inputs!\", \"============================================================================*/\", \"#ifndef FXAA_QUALITY_PRESET\", \"    //\", \"    // Choose the quality preset.\", \"    // This needs to be compiled into the shader as it effects code.\", \"    // Best option to include multiple presets is to\", \"    // in each shader define the preset, then include this file.\", \"    //\", \"    // OPTIONS\", \"    // -----------------------------------------------------------------------\", \"    // 10 to 15 - default medium dither (10=fastest, 15=highest quality)\", \"    // 20 to 29 - less dither, more expensive (20=fastest, 29=highest quality)\", \"    // 39       - no dither, very expensive\", \"    //\", \"    // NOTES\", \"    // -----------------------------------------------------------------------\", \"    // 12 = slightly faster then FXAA 3.9 and higher edge quality (default)\", \"    // 13 = about same speed as FXAA 3.9 and better than 12\", \"    // 23 = closest to FXAA 3.9 visually and performance wise\", \"    //  _ = the lowest digit is directly related to performance\", \"    // _  = the highest digit is directly related to style\", \"    //\", \"    #define FXAA_QUALITY_PRESET 12\", \"#endif\", \"\", \"\", \"/*============================================================================\", \"\", \"                           FXAA QUALITY - PRESETS\", \"\", \"============================================================================*/\", \"\", \"/*============================================================================\", \"                     FXAA QUALITY - MEDIUM DITHER PRESETS\", \"============================================================================*/\", \"#if (FXAA_QUALITY_PRESET == 10)\", \"    #define FXAA_QUALITY_PS 3\", \"    #define FXAA_QUALITY_P0 1.5\", \"    #define FXAA_QUALITY_P1 3.0\", \"    #define FXAA_QUALITY_P2 12.0\", \"#endif\", \"/*--------------------------------------------------------------------------*/\", \"#if (FXAA_QUALITY_PRESET == 11)\", \"    #define FXAA_QUALITY_PS 4\", \"    #define FXAA_QUALITY_P0 1.0\", \"    #define FXAA_QUALITY_P1 1.5\", \"    #define FXAA_QUALITY_P2 3.0\", \"    #define FXAA_QUALITY_P3 12.0\", \"#endif\", \"/*--------------------------------------------------------------------------*/\", \"#if (FXAA_QUALITY_PRESET == 12)\", \"    #define FXAA_QUALITY_PS 5\", \"    #define FXAA_QUALITY_P0 1.0\", \"    #define FXAA_QUALITY_P1 1.5\", \"    #define FXAA_QUALITY_P2 2.0\", \"    #define FXAA_QUALITY_P3 4.0\", \"    #define FXAA_QUALITY_P4 12.0\", \"#endif\", \"/*--------------------------------------------------------------------------*/\", \"#if (FXAA_QUALITY_PRESET == 13)\", \"    #define FXAA_QUALITY_PS 6\", \"    #define FXAA_QUALITY_P0 1.0\", \"    #define FXAA_QUALITY_P1 1.5\", \"    #define FXAA_QUALITY_P2 2.0\", \"    #define FXAA_QUALITY_P3 2.0\", \"    #define FXAA_QUALITY_P4 4.0\", \"    #define FXAA_QUALITY_P5 12.0\", \"#endif\", \"/*--------------------------------------------------------------------------*/\", \"#if (FXAA_QUALITY_PRESET == 14)\", \"    #define FXAA_QUALITY_PS 7\", \"    #define FXAA_QUALITY_P0 1.0\", \"    #define FXAA_QUALITY_P1 1.5\", \"    #define FXAA_QUALITY_P2 2.0\", \"    #define FXAA_QUALITY_P3 2.0\", \"    #define FXAA_QUALITY_P4 2.0\", \"    #define FXAA_QUALITY_P5 4.0\", \"    #define FXAA_QUALITY_P6 12.0\", \"#endif\", \"/*--------------------------------------------------------------------------*/\", \"#if (FXAA_QUALITY_PRESET == 15)\", \"    #define FXAA_QUALITY_PS 8\", \"    #define FXAA_QUALITY_P0 1.0\", \"    #define FXAA_QUALITY_P1 1.5\", \"    #define FXAA_QUALITY_P2 2.0\", \"    #define FXAA_QUALITY_P3 2.0\", \"    #define FXAA_QUALITY_P4 2.0\", \"    #define FXAA_QUALITY_P5 2.0\", \"    #define FXAA_QUALITY_P6 4.0\", \"    #define FXAA_QUALITY_P7 12.0\", \"#endif\", \"\", \"/*============================================================================\", \"                     FXAA QUALITY - LOW DITHER PRESETS\", \"============================================================================*/\", \"#if (FXAA_QUALITY_PRESET == 20)\", \"    #define FXAA_QUALITY_PS 3\", \"    #define FXAA_QUALITY_P0 1.5\", \"    #define FXAA_QUALITY_P1 2.0\", \"    #define FXAA_QUALITY_P2 8.0\", \"#endif\", \"/*--------------------------------------------------------------------------*/\", \"#if (FXAA_QUALITY_PRESET == 21)\", \"    #define FXAA_QUALITY_PS 4\", \"    #define FXAA_QUALITY_P0 1.0\", \"    #define FXAA_QUALITY_P1 1.5\", \"    #define FXAA_QUALITY_P2 2.0\", \"    #define FXAA_QUALITY_P3 8.0\", \"#endif\", \"/*--------------------------------------------------------------------------*/\", \"#if (FXAA_QUALITY_PRESET == 22)\", \"    #define FXAA_QUALITY_PS 5\", \"    #define FXAA_QUALITY_P0 1.0\", \"    #define FXAA_QUALITY_P1 1.5\", \"    #define FXAA_QUALITY_P2 2.0\", \"    #define FXAA_QUALITY_P3 2.0\", \"    #define FXAA_QUALITY_P4 8.0\", \"#endif\", \"/*--------------------------------------------------------------------------*/\", \"#if (FXAA_QUALITY_PRESET == 23)\", \"    #define FXAA_QUALITY_PS 6\", \"    #define FXAA_QUALITY_P0 1.0\", \"    #define FXAA_QUALITY_P1 1.5\", \"    #define FXAA_QUALITY_P2 2.0\", \"    #define FXAA_QUALITY_P3 2.0\", \"    #define FXAA_QUALITY_P4 2.0\", \"    #define FXAA_QUALITY_P5 8.0\", \"#endif\", \"/*--------------------------------------------------------------------------*/\", \"#if (FXAA_QUALITY_PRESET == 24)\", \"    #define FXAA_QUALITY_PS 7\", \"    #define FXAA_QUALITY_P0 1.0\", \"    #define FXAA_QUALITY_P1 1.5\", \"    #define FXAA_QUALITY_P2 2.0\", \"    #define FXAA_QUALITY_P3 2.0\", \"    #define FXAA_QUALITY_P4 2.0\", \"    #define FXAA_QUALITY_P5 3.0\", \"    #define FXAA_QUALITY_P6 8.0\", \"#endif\", \"/*--------------------------------------------------------------------------*/\", \"#if (FXAA_QUALITY_PRESET == 25)\", \"    #define FXAA_QUALITY_PS 8\", \"    #define FXAA_QUALITY_P0 1.0\", \"    #define FXAA_QUALITY_P1 1.5\", \"    #define FXAA_QUALITY_P2 2.0\", \"    #define FXAA_QUALITY_P3 2.0\", \"    #define FXAA_QUALITY_P4 2.0\", \"    #define FXAA_QUALITY_P5 2.0\", \"    #define FXAA_QUALITY_P6 4.0\", \"    #define FXAA_QUALITY_P7 8.0\", \"#endif\", \"/*--------------------------------------------------------------------------*/\", \"#if (FXAA_QUALITY_PRESET == 26)\", \"    #define FXAA_QUALITY_PS 9\", \"    #define FXAA_QUALITY_P0 1.0\", \"    #define FXAA_QUALITY_P1 1.5\", \"    #define FXAA_QUALITY_P2 2.0\", \"    #define FXAA_QUALITY_P3 2.0\", \"    #define FXAA_QUALITY_P4 2.0\", \"    #define FXAA_QUALITY_P5 2.0\", \"    #define FXAA_QUALITY_P6 2.0\", \"    #define FXAA_QUALITY_P7 4.0\", \"    #define FXAA_QUALITY_P8 8.0\", \"#endif\", \"/*--------------------------------------------------------------------------*/\", \"#if (FXAA_QUALITY_PRESET == 27)\", \"    #define FXAA_QUALITY_PS 10\", \"    #define FXAA_QUALITY_P0 1.0\", \"    #define FXAA_QUALITY_P1 1.5\", \"    #define FXAA_QUALITY_P2 2.0\", \"    #define FXAA_QUALITY_P3 2.0\", \"    #define FXAA_QUALITY_P4 2.0\", \"    #define FXAA_QUALITY_P5 2.0\", \"    #define FXAA_QUALITY_P6 2.0\", \"    #define FXAA_QUALITY_P7 2.0\", \"    #define FXAA_QUALITY_P8 4.0\", \"    #define FXAA_QUALITY_P9 8.0\", \"#endif\", \"/*--------------------------------------------------------------------------*/\", \"#if (FXAA_QUALITY_PRESET == 28)\", \"    #define FXAA_QUALITY_PS 11\", \"    #define FXAA_QUALITY_P0 1.0\", \"    #define FXAA_QUALITY_P1 1.5\", \"    #define FXAA_QUALITY_P2 2.0\", \"    #define FXAA_QUALITY_P3 2.0\", \"    #define FXAA_QUALITY_P4 2.0\", \"    #define FXAA_QUALITY_P5 2.0\", \"    #define FXAA_QUALITY_P6 2.0\", \"    #define FXAA_QUALITY_P7 2.0\", \"    #define FXAA_QUALITY_P8 2.0\", \"    #define FXAA_QUALITY_P9 4.0\", \"    #define FXAA_QUALITY_P10 8.0\", \"#endif\", \"/*--------------------------------------------------------------------------*/\", \"#if (FXAA_QUALITY_PRESET == 29)\", \"    #define FXAA_QUALITY_PS 12\", \"    #define FXAA_QUALITY_P0 1.0\", \"    #define FXAA_QUALITY_P1 1.5\", \"    #define FXAA_QUALITY_P2 2.0\", \"    #define FXAA_QUALITY_P3 2.0\", \"    #define FXAA_QUALITY_P4 2.0\", \"    #define FXAA_QUALITY_P5 2.0\", \"    #define FXAA_QUALITY_P6 2.0\", \"    #define FXAA_QUALITY_P7 2.0\", \"    #define FXAA_QUALITY_P8 2.0\", \"    #define FXAA_QUALITY_P9 2.0\", \"    #define FXAA_QUALITY_P10 4.0\", \"    #define FXAA_QUALITY_P11 8.0\", \"#endif\", \"\", \"/*============================================================================\", \"                     FXAA QUALITY - EXTREME QUALITY\", \"============================================================================*/\", \"#if (FXAA_QUALITY_PRESET == 39)\", \"    #define FXAA_QUALITY_PS 12\", \"    #define FXAA_QUALITY_P0 1.0\", \"    #define FXAA_QUALITY_P1 1.0\", \"    #define FXAA_QUALITY_P2 1.0\", \"    #define FXAA_QUALITY_P3 1.0\", \"    #define FXAA_QUALITY_P4 1.0\", \"    #define FXAA_QUALITY_P5 1.5\", \"    #define FXAA_QUALITY_P6 2.0\", \"    #define FXAA_QUALITY_P7 2.0\", \"    #define FXAA_QUALITY_P8 2.0\", \"    #define FXAA_QUALITY_P9 2.0\", \"    #define FXAA_QUALITY_P10 4.0\", \"    #define FXAA_QUALITY_P11 8.0\", \"#endif\", \"\", \"\", \"\", \"/*============================================================================\", \"\", \"                                API PORTING\", \"\", \"============================================================================*/\", \"#if (FXAA_GLSL_100 == 1) || (FXAA_GLSL_120 == 1) || (FXAA_GLSL_130 == 1)\", \"    #define FxaaBool bool\", \"    #define FxaaDiscard discard\", \"    #define FxaaFloat float\", \"    #define FxaaFloat2 vec2\", \"    #define FxaaFloat3 vec3\", \"    #define FxaaFloat4 vec4\", \"    #define FxaaHalf float\", \"    #define FxaaHalf2 vec2\", \"    #define FxaaHalf3 vec3\", \"    #define FxaaHalf4 vec4\", \"    #define FxaaInt2 ivec2\", \"    #define FxaaSat(x) clamp(x, 0.0, 1.0)\", \"    #define FxaaTex sampler2D\", \"#else\", \"    #define FxaaBool bool\", \"    #define FxaaDiscard clip(-1)\", \"    #define FxaaFloat float\", \"    #define FxaaFloat2 float2\", \"    #define FxaaFloat3 float3\", \"    #define FxaaFloat4 float4\", \"    #define FxaaHalf half\", \"    #define FxaaHalf2 half2\", \"    #define FxaaHalf3 half3\", \"    #define FxaaHalf4 half4\", \"    #define FxaaSat(x) saturate(x)\", \"#endif\", \"/*--------------------------------------------------------------------------*/\", \"#if (FXAA_GLSL_100 == 1)\", \"  #define FxaaTexTop(t, p) texture2D(t, p, 0.0)\", \"  #define FxaaTexOff(t, p, o, r) texture2D(t, p + (o * r), 0.0)\", \"#endif\", \"/*--------------------------------------------------------------------------*/\", \"#if (FXAA_GLSL_120 == 1)\", \"    // Requires,\", \"    //  #version 120\", \"    // And at least,\", \"    //  #extension GL_EXT_gpu_shader4 : enable\", \"    //  (or set FXAA_FAST_PIXEL_OFFSET 1 to work like DX9)\", \"    #define FxaaTexTop(t, p) texture2DLod(t, p, 0.0)\", \"    #if (FXAA_FAST_PIXEL_OFFSET == 1)\", \"        #define FxaaTexOff(t, p, o, r) texture2DLodOffset(t, p, 0.0, o)\", \"    #else\", \"        #define FxaaTexOff(t, p, o, r) texture2DLod(t, p + (o * r), 0.0)\", \"    #endif\", \"    #if (FXAA_GATHER4_ALPHA == 1)\", \"        // use #extension GL_ARB_gpu_shader5 : enable\", \"        #define FxaaTexAlpha4(t, p) textureGather(t, p, 3)\", \"        #define FxaaTexOffAlpha4(t, p, o) textureGatherOffset(t, p, o, 3)\", \"        #define FxaaTexGreen4(t, p) textureGather(t, p, 1)\", \"        #define FxaaTexOffGreen4(t, p, o) textureGatherOffset(t, p, o, 1)\", \"    #endif\", \"#endif\", \"/*--------------------------------------------------------------------------*/\", \"#if (FXAA_GLSL_130 == 1)\", \"    // Requires \\\"#version 130\\\" or better\", \"    #define FxaaTexTop(t, p) textureLod(t, p, 0.0)\", \"    #define FxaaTexOff(t, p, o, r) textureLodOffset(t, p, 0.0, o)\", \"    #if (FXAA_GATHER4_ALPHA == 1)\", \"        // use #extension GL_ARB_gpu_shader5 : enable\", \"        #define FxaaTexAlpha4(t, p) textureGather(t, p, 3)\", \"        #define FxaaTexOffAlpha4(t, p, o) textureGatherOffset(t, p, o, 3)\", \"        #define FxaaTexGreen4(t, p) textureGather(t, p, 1)\", \"        #define FxaaTexOffGreen4(t, p, o) textureGatherOffset(t, p, o, 1)\", \"    #endif\", \"#endif\", \"/*--------------------------------------------------------------------------*/\", \"#if (FXAA_HLSL_3 == 1)\", \"    #define FxaaInt2 float2\", \"    #define FxaaTex sampler2D\", \"    #define FxaaTexTop(t, p) tex2Dlod(t, float4(p, 0.0, 0.0))\", \"    #define FxaaTexOff(t, p, o, r) tex2Dlod(t, float4(p + (o * r), 0, 0))\", \"#endif\", \"/*--------------------------------------------------------------------------*/\", \"#if (FXAA_HLSL_4 == 1)\", \"    #define FxaaInt2 int2\", \"    struct FxaaTex { SamplerState smpl; Texture2D tex; };\", \"    #define FxaaTexTop(t, p) t.tex.SampleLevel(t.smpl, p, 0.0)\", \"    #define FxaaTexOff(t, p, o, r) t.tex.SampleLevel(t.smpl, p, 0.0, o)\", \"#endif\", \"/*--------------------------------------------------------------------------*/\", \"#if (FXAA_HLSL_5 == 1)\", \"    #define FxaaInt2 int2\", \"    struct FxaaTex { SamplerState smpl; Texture2D tex; };\", \"    #define FxaaTexTop(t, p) t.tex.SampleLevel(t.smpl, p, 0.0)\", \"    #define FxaaTexOff(t, p, o, r) t.tex.SampleLevel(t.smpl, p, 0.0, o)\", \"    #define FxaaTexAlpha4(t, p) t.tex.GatherAlpha(t.smpl, p)\", \"    #define FxaaTexOffAlpha4(t, p, o) t.tex.GatherAlpha(t.smpl, p, o)\", \"    #define FxaaTexGreen4(t, p) t.tex.GatherGreen(t.smpl, p)\", \"    #define FxaaTexOffGreen4(t, p, o) t.tex.GatherGreen(t.smpl, p, o)\", \"#endif\", \"\", \"\", \"/*============================================================================\", \"                   GREEN AS LUMA OPTION SUPPORT FUNCTION\", \"============================================================================*/\", \"#if (FXAA_GREEN_AS_LUMA == 0)\", \"    FxaaFloat FxaaLuma(FxaaFloat4 rgba) { return rgba.w; }\", \"#else\", \"    FxaaFloat FxaaLuma(FxaaFloat4 rgba) { return rgba.y; }\", \"#endif\", \"\", \"\", \"\", \"\", \"/*============================================================================\", \"\", \"                             FXAA3 QUALITY - PC\", \"\", \"============================================================================*/\", \"#if (FXAA_PC == 1)\", \"/*--------------------------------------------------------------------------*/\", \"FxaaFloat4 FxaaPixelShader(\", \"    //\", \"    // Use noperspective interpolation here (turn off perspective interpolation).\", \"    // {xy} = center of pixel\", \"    FxaaFloat2 pos,\", \"    //\", \"    // Used only for FXAA Console, and not used on the 360 version.\", \"    // Use noperspective interpolation here (turn off perspective interpolation).\", \"    // {xy_} = upper left of pixel\", \"    // {_zw} = lower right of pixel\", \"    FxaaFloat4 fxaaConsolePosPos,\", \"    //\", \"    // Input color texture.\", \"    // {rgb_} = color in linear or perceptual color space\", \"    // if (FXAA_GREEN_AS_LUMA == 0)\", \"    //     {__a} = luma in perceptual color space (not linear)\", \"    FxaaTex tex,\", \"    //\", \"    // Only used on the optimized 360 version of FXAA Console.\", \"    // For everything but 360, just use the same input here as for \\\"tex\\\".\", \"    // For 360, same texture, just alias with a 2nd sampler.\", \"    // This sampler needs to have an exponent bias of -1.\", \"    FxaaTex fxaaConsole360TexExpBiasNegOne,\", \"    //\", \"    // Only used on the optimized 360 version of FXAA Console.\", \"    // For everything but 360, just use the same input here as for \\\"tex\\\".\", \"    // For 360, same texture, just alias with a 3nd sampler.\", \"    // This sampler needs to have an exponent bias of -2.\", \"    FxaaTex fxaaConsole360TexExpBiasNegTwo,\", \"    //\", \"    // Only used on FXAA Quality.\", \"    // This must be from a constant/uniform.\", \"    // {x_} = 1.0/screenWidthInPixels\", \"    // {_y} = 1.0/screenHeightInPixels\", \"    FxaaFloat2 fxaaQualityRcpFrame,\", \"    //\", \"    // Only used on FXAA Console.\", \"    // This must be from a constant/uniform.\", \"    // This effects sub-pixel AA quality and inversely sharpness.\", \"    //   Where N ranges between,\", \"    //     N = 0.50 (default)\", \"    //     N = 0.33 (sharper)\", \"    // {x__} = -N/screenWidthInPixels\", \"    // {_y_} = -N/screenHeightInPixels\", \"    // {_z_} =  N/screenWidthInPixels\", \"    // {__w} =  N/screenHeightInPixels\", \"    FxaaFloat4 fxaaConsoleRcpFrameOpt,\", \"    //\", \"    // Only used on FXAA Console.\", \"    // Not used on 360, but used on PS3 and PC.\", \"    // This must be from a constant/uniform.\", \"    // {x__} = -2.0/screenWidthInPixels\", \"    // {_y_} = -2.0/screenHeightInPixels\", \"    // {_z_} =  2.0/screenWidthInPixels\", \"    // {__w} =  2.0/screenHeightInPixels\", \"    FxaaFloat4 fxaaConsoleRcpFrameOpt2,\", \"    //\", \"    // Only used on FXAA Console.\", \"    // Only used on 360 in place of fxaaConsoleRcpFrameOpt2.\", \"    // This must be from a constant/uniform.\", \"    // {x__} =  8.0/screenWidthInPixels\", \"    // {_y_} =  8.0/screenHeightInPixels\", \"    // {_z_} = -4.0/screenWidthInPixels\", \"    // {__w} = -4.0/screenHeightInPixels\", \"    FxaaFloat4 fxaaConsole360RcpFrameOpt2,\", \"    //\", \"    // Only used on FXAA Quality.\", \"    // This used to be the FXAA_QUALITY_SUBPIX define.\", \"    // It is here now to allow easier tuning.\", \"    // Choose the amount of sub-pixel aliasing removal.\", \"    // This can effect sharpness.\", \"    //   1.00 - upper limit (softer)\", \"    //   0.75 - default amount of filtering\", \"    //   0.50 - lower limit (sharper, less sub-pixel aliasing removal)\", \"    //   0.25 - almost off\", \"    //   0.00 - completely off\", \"    FxaaFloat fxaaQualitySubpix,\", \"    //\", \"    // Only used on FXAA Quality.\", \"    // This used to be the FXAA_QUALITY_EDGE_THRESHOLD define.\", \"    // It is here now to allow easier tuning.\", \"    // The minimum amount of local contrast required to apply algorithm.\", \"    //   0.333 - too little (faster)\", \"    //   0.250 - low quality\", \"    //   0.166 - default\", \"    //   0.125 - high quality\", \"    //   0.063 - overkill (slower)\", \"    FxaaFloat fxaaQualityEdgeThreshold,\", \"    //\", \"    // Only used on FXAA Quality.\", \"    // This used to be the FXAA_QUALITY_EDGE_THRESHOLD_MIN define.\", \"    // It is here now to allow easier tuning.\", \"    // Trims the algorithm from processing darks.\", \"    //   0.0833 - upper limit (default, the start of visible unfiltered edges)\", \"    //   0.0625 - high quality (faster)\", \"    //   0.0312 - visible limit (slower)\", \"    // Special notes when using FXAA_GREEN_AS_LUMA,\", \"    //   Likely want to set this to zero.\", \"    //   As colors that are mostly not-green\", \"    //   will appear very dark in the green channel!\", \"    //   Tune by looking at mostly non-green content,\", \"    //   then start at zero and increase until aliasing is a problem.\", \"    FxaaFloat fxaaQualityEdgeThresholdMin,\", \"    //\", \"    // Only used on FXAA Console.\", \"    // This used to be the FXAA_CONSOLE_EDGE_SHARPNESS define.\", \"    // It is here now to allow easier tuning.\", \"    // This does not effect PS3, as this needs to be compiled in.\", \"    //   Use FXAA_CONSOLE_PS3_EDGE_SHARPNESS for PS3.\", \"    //   Due to the PS3 being ALU bound,\", \"    //   there are only three safe values here: 2 and 4 and 8.\", \"    //   These options use the shaders ability to a free *|/ by 2|4|8.\", \"    // For all other platforms can be a non-power of two.\", \"    //   8.0 is sharper (default!!!)\", \"    //   4.0 is softer\", \"    //   2.0 is really soft (good only for vector graphics inputs)\", \"    FxaaFloat fxaaConsoleEdgeSharpness,\", \"    //\", \"    // Only used on FXAA Console.\", \"    // This used to be the FXAA_CONSOLE_EDGE_THRESHOLD define.\", \"    // It is here now to allow easier tuning.\", \"    // This does not effect PS3, as this needs to be compiled in.\", \"    //   Use FXAA_CONSOLE_PS3_EDGE_THRESHOLD for PS3.\", \"    //   Due to the PS3 being ALU bound,\", \"    //   there are only two safe values here: 1/4 and 1/8.\", \"    //   These options use the shaders ability to a free *|/ by 2|4|8.\", \"    // The console setting has a different mapping than the quality setting.\", \"    // Other platforms can use other values.\", \"    //   0.125 leaves less aliasing, but is softer (default!!!)\", \"    //   0.25 leaves more aliasing, and is sharper\", \"    FxaaFloat fxaaConsoleEdgeThreshold,\", \"    //\", \"    // Only used on FXAA Console.\", \"    // This used to be the FXAA_CONSOLE_EDGE_THRESHOLD_MIN define.\", \"    // It is here now to allow easier tuning.\", \"    // Trims the algorithm from processing darks.\", \"    // The console setting has a different mapping than the quality setting.\", \"    // This only applies when FXAA_EARLY_EXIT is 1.\", \"    // This does not apply to PS3,\", \"    // PS3 was simplified to avoid more shader instructions.\", \"    //   0.06 - faster but more aliasing in darks\", \"    //   0.05 - default\", \"    //   0.04 - slower and less aliasing in darks\", \"    // Special notes when using FXAA_GREEN_AS_LUMA,\", \"    //   Likely want to set this to zero.\", \"    //   As colors that are mostly not-green\", \"    //   will appear very dark in the green channel!\", \"    //   Tune by looking at mostly non-green content,\", \"    //   then start at zero and increase until aliasing is a problem.\", \"    FxaaFloat fxaaConsoleEdgeThresholdMin,\", \"    //\", \"    // Extra constants for 360 FXAA Console only.\", \"    // Use zeros or anything else for other platforms.\", \"    // These must be in physical constant registers and NOT immedates.\", \"    // Immedates will result in compiler un-optimizing.\", \"    // {xyzw} = float4(1.0, -1.0, 0.25, -0.25)\", \"    FxaaFloat4 fxaaConsole360ConstDir\", \") {\", \"/*--------------------------------------------------------------------------*/\", \"    FxaaFloat2 posM;\", \"    posM.x = pos.x;\", \"    posM.y = pos.y;\", \"    #if (FXAA_GATHER4_ALPHA == 1)\", \"        #if (FXAA_DISCARD == 0)\", \"            FxaaFloat4 rgbyM = FxaaTexTop(tex, posM);\", \"            #if (FXAA_GREEN_AS_LUMA == 0)\", \"                #define lumaM rgbyM.w\", \"            #else\", \"                #define lumaM rgbyM.y\", \"            #endif\", \"        #endif\", \"        #if (FXAA_GREEN_AS_LUMA == 0)\", \"            FxaaFloat4 luma4A = FxaaTexAlpha4(tex, posM);\", \"            FxaaFloat4 luma4B = FxaaTexOffAlpha4(tex, posM, FxaaInt2(-1, -1));\", \"        #else\", \"            FxaaFloat4 luma4A = FxaaTexGreen4(tex, posM);\", \"            FxaaFloat4 luma4B = FxaaTexOffGreen4(tex, posM, FxaaInt2(-1, -1));\", \"        #endif\", \"        #if (FXAA_DISCARD == 1)\", \"            #define lumaM luma4A.w\", \"        #endif\", \"        #define lumaE luma4A.z\", \"        #define lumaS luma4A.x\", \"        #define lumaSE luma4A.y\", \"        #define lumaNW luma4B.w\", \"        #define lumaN luma4B.z\", \"        #define lumaW luma4B.x\", \"    #else\", \"        FxaaFloat4 rgbyM = FxaaTexTop(tex, posM);\", \"        #if (FXAA_GREEN_AS_LUMA == 0)\", \"            #define lumaM rgbyM.w\", \"        #else\", \"            #define lumaM rgbyM.y\", \"        #endif\", \"        #if (FXAA_GLSL_100 == 1)\", \"          FxaaFloat lumaS = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 0.0, 1.0), fxaaQualityRcpFrame.xy));\", \"          FxaaFloat lumaE = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 1.0, 0.0), fxaaQualityRcpFrame.xy));\", \"          FxaaFloat lumaN = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 0.0,-1.0), fxaaQualityRcpFrame.xy));\", \"          FxaaFloat lumaW = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2(-1.0, 0.0), fxaaQualityRcpFrame.xy));\", \"        #else\", \"          FxaaFloat lumaS = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 0, 1), fxaaQualityRcpFrame.xy));\", \"          FxaaFloat lumaE = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 1, 0), fxaaQualityRcpFrame.xy));\", \"          FxaaFloat lumaN = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 0,-1), fxaaQualityRcpFrame.xy));\", \"          FxaaFloat lumaW = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(-1, 0), fxaaQualityRcpFrame.xy));\", \"        #endif\", \"    #endif\", \"/*--------------------------------------------------------------------------*/\", \"    FxaaFloat maxSM = max(lumaS, lumaM);\", \"    FxaaFloat minSM = min(lumaS, lumaM);\", \"    FxaaFloat maxESM = max(lumaE, maxSM);\", \"    FxaaFloat minESM = min(lumaE, minSM);\", \"    FxaaFloat maxWN = max(lumaN, lumaW);\", \"    FxaaFloat minWN = min(lumaN, lumaW);\", \"    FxaaFloat rangeMax = max(maxWN, maxESM);\", \"    FxaaFloat rangeMin = min(minWN, minESM);\", \"    FxaaFloat rangeMaxScaled = rangeMax * fxaaQualityEdgeThreshold;\", \"    FxaaFloat range = rangeMax - rangeMin;\", \"    FxaaFloat rangeMaxClamped = max(fxaaQualityEdgeThresholdMin, rangeMaxScaled);\", \"    FxaaBool earlyExit = range < rangeMaxClamped;\", \"/*--------------------------------------------------------------------------*/\", \"    if(earlyExit)\", \"        #if (FXAA_DISCARD == 1)\", \"            FxaaDiscard;\", \"        #else\", \"            return rgbyM;\", \"        #endif\", \"/*--------------------------------------------------------------------------*/\", \"    #if (FXAA_GATHER4_ALPHA == 0)\", \"        #if (FXAA_GLSL_100 == 1)\", \"          FxaaFloat lumaNW = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2(-1.0,-1.0), fxaaQualityRcpFrame.xy));\", \"          FxaaFloat lumaSE = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 1.0, 1.0), fxaaQualityRcpFrame.xy));\", \"          FxaaFloat lumaNE = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 1.0,-1.0), fxaaQualityRcpFrame.xy));\", \"          FxaaFloat lumaSW = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2(-1.0, 1.0), fxaaQualityRcpFrame.xy));\", \"        #else\", \"          FxaaFloat lumaNW = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(-1,-1), fxaaQualityRcpFrame.xy));\", \"          FxaaFloat lumaSE = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 1, 1), fxaaQualityRcpFrame.xy));\", \"          FxaaFloat lumaNE = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 1,-1), fxaaQualityRcpFrame.xy));\", \"          FxaaFloat lumaSW = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(-1, 1), fxaaQualityRcpFrame.xy));\", \"        #endif\", \"    #else\", \"        FxaaFloat lumaNE = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(1, -1), fxaaQualityRcpFrame.xy));\", \"        FxaaFloat lumaSW = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(-1, 1), fxaaQualityRcpFrame.xy));\", \"    #endif\", \"/*--------------------------------------------------------------------------*/\", \"    FxaaFloat lumaNS = lumaN + lumaS;\", \"    FxaaFloat lumaWE = lumaW + lumaE;\", \"    FxaaFloat subpixRcpRange = 1.0/range;\", \"    FxaaFloat subpixNSWE = lumaNS + lumaWE;\", \"    FxaaFloat edgeHorz1 = (-2.0 * lumaM) + lumaNS;\", \"    FxaaFloat edgeVert1 = (-2.0 * lumaM) + lumaWE;\", \"/*--------------------------------------------------------------------------*/\", \"    FxaaFloat lumaNESE = lumaNE + lumaSE;\", \"    FxaaFloat lumaNWNE = lumaNW + lumaNE;\", \"    FxaaFloat edgeHorz2 = (-2.0 * lumaE) + lumaNESE;\", \"    FxaaFloat edgeVert2 = (-2.0 * lumaN) + lumaNWNE;\", \"/*--------------------------------------------------------------------------*/\", \"    FxaaFloat lumaNWSW = lumaNW + lumaSW;\", \"    FxaaFloat lumaSWSE = lumaSW + lumaSE;\", \"    FxaaFloat edgeHorz4 = (abs(edgeHorz1) * 2.0) + abs(edgeHorz2);\", \"    FxaaFloat edgeVert4 = (abs(edgeVert1) * 2.0) + abs(edgeVert2);\", \"    FxaaFloat edgeHorz3 = (-2.0 * lumaW) + lumaNWSW;\", \"    FxaaFloat edgeVert3 = (-2.0 * lumaS) + lumaSWSE;\", \"    FxaaFloat edgeHorz = abs(edgeHorz3) + edgeHorz4;\", \"    FxaaFloat edgeVert = abs(edgeVert3) + edgeVert4;\", \"/*--------------------------------------------------------------------------*/\", \"    FxaaFloat subpixNWSWNESE = lumaNWSW + lumaNESE;\", \"    FxaaFloat lengthSign = fxaaQualityRcpFrame.x;\", \"    FxaaBool horzSpan = edgeHorz >= edgeVert;\", \"    FxaaFloat subpixA = subpixNSWE * 2.0 + subpixNWSWNESE;\", \"/*--------------------------------------------------------------------------*/\", \"    if(!horzSpan) lumaN = lumaW;\", \"    if(!horzSpan) lumaS = lumaE;\", \"    if(horzSpan) lengthSign = fxaaQualityRcpFrame.y;\", \"    FxaaFloat subpixB = (subpixA * (1.0/12.0)) - lumaM;\", \"/*--------------------------------------------------------------------------*/\", \"    FxaaFloat gradientN = lumaN - lumaM;\", \"    FxaaFloat gradientS = lumaS - lumaM;\", \"    FxaaFloat lumaNN = lumaN + lumaM;\", \"    FxaaFloat lumaSS = lumaS + lumaM;\", \"    FxaaBool pairN = abs(gradientN) >= abs(gradientS);\", \"    FxaaFloat gradient = max(abs(gradientN), abs(gradientS));\", \"    if(pairN) lengthSign = -lengthSign;\", \"    FxaaFloat subpixC = FxaaSat(abs(subpixB) * subpixRcpRange);\", \"/*--------------------------------------------------------------------------*/\", \"    FxaaFloat2 posB;\", \"    posB.x = posM.x;\", \"    posB.y = posM.y;\", \"    FxaaFloat2 offNP;\", \"    offNP.x = (!horzSpan) ? 0.0 : fxaaQualityRcpFrame.x;\", \"    offNP.y = ( horzSpan) ? 0.0 : fxaaQualityRcpFrame.y;\", \"    if(!horzSpan) posB.x += lengthSign * 0.5;\", \"    if( horzSpan) posB.y += lengthSign * 0.5;\", \"/*--------------------------------------------------------------------------*/\", \"    FxaaFloat2 posN;\", \"    posN.x = posB.x - offNP.x * FXAA_QUALITY_P0;\", \"    posN.y = posB.y - offNP.y * FXAA_QUALITY_P0;\", \"    FxaaFloat2 posP;\", \"    posP.x = posB.x + offNP.x * FXAA_QUALITY_P0;\", \"    posP.y = posB.y + offNP.y * FXAA_QUALITY_P0;\", \"    FxaaFloat subpixD = ((-2.0)*subpixC) + 3.0;\", \"    FxaaFloat lumaEndN = FxaaLuma(FxaaTexTop(tex, posN));\", \"    FxaaFloat subpixE = subpixC * subpixC;\", \"    FxaaFloat lumaEndP = FxaaLuma(FxaaTexTop(tex, posP));\", \"/*--------------------------------------------------------------------------*/\", \"    if(!pairN) lumaNN = lumaSS;\", \"    FxaaFloat gradientScaled = gradient * 1.0/4.0;\", \"    FxaaFloat lumaMM = lumaM - lumaNN * 0.5;\", \"    FxaaFloat subpixF = subpixD * subpixE;\", \"    FxaaBool lumaMLTZero = lumaMM < 0.0;\", \"/*--------------------------------------------------------------------------*/\", \"    lumaEndN -= lumaNN * 0.5;\", \"    lumaEndP -= lumaNN * 0.5;\", \"    FxaaBool doneN = abs(lumaEndN) >= gradientScaled;\", \"    FxaaBool doneP = abs(lumaEndP) >= gradientScaled;\", \"    if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P1;\", \"    if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P1;\", \"    FxaaBool doneNP = (!doneN) || (!doneP);\", \"    if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P1;\", \"    if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P1;\", \"/*--------------------------------------------------------------------------*/\", \"    if(doneNP) {\", \"        if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\", \"        if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\", \"        if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\", \"        if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\", \"        doneN = abs(lumaEndN) >= gradientScaled;\", \"        doneP = abs(lumaEndP) >= gradientScaled;\", \"        if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P2;\", \"        if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P2;\", \"        doneNP = (!doneN) || (!doneP);\", \"        if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P2;\", \"        if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P2;\", \"/*--------------------------------------------------------------------------*/\", \"        #if (FXAA_QUALITY_PS > 3)\", \"        if(doneNP) {\", \"            if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\", \"            if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\", \"            if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\", \"            if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\", \"            doneN = abs(lumaEndN) >= gradientScaled;\", \"            doneP = abs(lumaEndP) >= gradientScaled;\", \"            if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P3;\", \"            if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P3;\", \"            doneNP = (!doneN) || (!doneP);\", \"            if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P3;\", \"            if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P3;\", \"/*--------------------------------------------------------------------------*/\", \"            #if (FXAA_QUALITY_PS > 4)\", \"            if(doneNP) {\", \"                if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\", \"                if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\", \"                if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\", \"                if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\", \"                doneN = abs(lumaEndN) >= gradientScaled;\", \"                doneP = abs(lumaEndP) >= gradientScaled;\", \"                if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P4;\", \"                if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P4;\", \"                doneNP = (!doneN) || (!doneP);\", \"                if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P4;\", \"                if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P4;\", \"/*--------------------------------------------------------------------------*/\", \"                #if (FXAA_QUALITY_PS > 5)\", \"                if(doneNP) {\", \"                    if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\", \"                    if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\", \"                    if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\", \"                    if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\", \"                    doneN = abs(lumaEndN) >= gradientScaled;\", \"                    doneP = abs(lumaEndP) >= gradientScaled;\", \"                    if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P5;\", \"                    if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P5;\", \"                    doneNP = (!doneN) || (!doneP);\", \"                    if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P5;\", \"                    if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P5;\", \"/*--------------------------------------------------------------------------*/\", \"                    #if (FXAA_QUALITY_PS > 6)\", \"                    if(doneNP) {\", \"                        if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\", \"                        if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\", \"                        if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\", \"                        if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\", \"                        doneN = abs(lumaEndN) >= gradientScaled;\", \"                        doneP = abs(lumaEndP) >= gradientScaled;\", \"                        if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P6;\", \"                        if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P6;\", \"                        doneNP = (!doneN) || (!doneP);\", \"                        if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P6;\", \"                        if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P6;\", \"/*--------------------------------------------------------------------------*/\", \"                        #if (FXAA_QUALITY_PS > 7)\", \"                        if(doneNP) {\", \"                            if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\", \"                            if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\", \"                            if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\", \"                            if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\", \"                            doneN = abs(lumaEndN) >= gradientScaled;\", \"                            doneP = abs(lumaEndP) >= gradientScaled;\", \"                            if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P7;\", \"                            if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P7;\", \"                            doneNP = (!doneN) || (!doneP);\", \"                            if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P7;\", \"                            if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P7;\", \"/*--------------------------------------------------------------------------*/\", \"    #if (FXAA_QUALITY_PS > 8)\", \"    if(doneNP) {\", \"        if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\", \"        if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\", \"        if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\", \"        if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\", \"        doneN = abs(lumaEndN) >= gradientScaled;\", \"        doneP = abs(lumaEndP) >= gradientScaled;\", \"        if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P8;\", \"        if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P8;\", \"        doneNP = (!doneN) || (!doneP);\", \"        if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P8;\", \"        if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P8;\", \"/*--------------------------------------------------------------------------*/\", \"        #if (FXAA_QUALITY_PS > 9)\", \"        if(doneNP) {\", \"            if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\", \"            if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\", \"            if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\", \"            if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\", \"            doneN = abs(lumaEndN) >= gradientScaled;\", \"            doneP = abs(lumaEndP) >= gradientScaled;\", \"            if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P9;\", \"            if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P9;\", \"            doneNP = (!doneN) || (!doneP);\", \"            if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P9;\", \"            if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P9;\", \"/*--------------------------------------------------------------------------*/\", \"            #if (FXAA_QUALITY_PS > 10)\", \"            if(doneNP) {\", \"                if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\", \"                if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\", \"                if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\", \"                if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\", \"                doneN = abs(lumaEndN) >= gradientScaled;\", \"                doneP = abs(lumaEndP) >= gradientScaled;\", \"                if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P10;\", \"                if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P10;\", \"                doneNP = (!doneN) || (!doneP);\", \"                if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P10;\", \"                if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P10;\", \"/*--------------------------------------------------------------------------*/\", \"                #if (FXAA_QUALITY_PS > 11)\", \"                if(doneNP) {\", \"                    if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\", \"                    if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\", \"                    if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\", \"                    if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\", \"                    doneN = abs(lumaEndN) >= gradientScaled;\", \"                    doneP = abs(lumaEndP) >= gradientScaled;\", \"                    if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P11;\", \"                    if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P11;\", \"                    doneNP = (!doneN) || (!doneP);\", \"                    if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P11;\", \"                    if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P11;\", \"/*--------------------------------------------------------------------------*/\", \"                    #if (FXAA_QUALITY_PS > 12)\", \"                    if(doneNP) {\", \"                        if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\", \"                        if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\", \"                        if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\", \"                        if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\", \"                        doneN = abs(lumaEndN) >= gradientScaled;\", \"                        doneP = abs(lumaEndP) >= gradientScaled;\", \"                        if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P12;\", \"                        if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P12;\", \"                        doneNP = (!doneN) || (!doneP);\", \"                        if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P12;\", \"                        if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P12;\", \"/*--------------------------------------------------------------------------*/\", \"                    }\", \"                    #endif\", \"/*--------------------------------------------------------------------------*/\", \"                }\", \"                #endif\", \"/*--------------------------------------------------------------------------*/\", \"            }\", \"            #endif\", \"/*--------------------------------------------------------------------------*/\", \"        }\", \"        #endif\", \"/*--------------------------------------------------------------------------*/\", \"    }\", \"    #endif\", \"/*--------------------------------------------------------------------------*/\", \"                        }\", \"                        #endif\", \"/*--------------------------------------------------------------------------*/\", \"                    }\", \"                    #endif\", \"/*--------------------------------------------------------------------------*/\", \"                }\", \"                #endif\", \"/*--------------------------------------------------------------------------*/\", \"            }\", \"            #endif\", \"/*--------------------------------------------------------------------------*/\", \"        }\", \"        #endif\", \"/*--------------------------------------------------------------------------*/\", \"    }\", \"/*--------------------------------------------------------------------------*/\", \"    FxaaFloat dstN = posM.x - posN.x;\", \"    FxaaFloat dstP = posP.x - posM.x;\", \"    if(!horzSpan) dstN = posM.y - posN.y;\", \"    if(!horzSpan) dstP = posP.y - posM.y;\", \"/*--------------------------------------------------------------------------*/\", \"    FxaaBool goodSpanN = (lumaEndN < 0.0) != lumaMLTZero;\", \"    FxaaFloat spanLength = (dstP + dstN);\", \"    FxaaBool goodSpanP = (lumaEndP < 0.0) != lumaMLTZero;\", \"    FxaaFloat spanLengthRcp = 1.0/spanLength;\", \"/*--------------------------------------------------------------------------*/\", \"    FxaaBool directionN = dstN < dstP;\", \"    FxaaFloat dst = min(dstN, dstP);\", \"    FxaaBool goodSpan = directionN ? goodSpanN : goodSpanP;\", \"    FxaaFloat subpixG = subpixF * subpixF;\", \"    FxaaFloat pixelOffset = (dst * (-spanLengthRcp)) + 0.5;\", \"    FxaaFloat subpixH = subpixG * fxaaQualitySubpix;\", \"/*--------------------------------------------------------------------------*/\", \"    FxaaFloat pixelOffsetGood = goodSpan ? pixelOffset : 0.0;\", \"    FxaaFloat pixelOffsetSubpix = max(pixelOffsetGood, subpixH);\", \"    if(!horzSpan) posM.x += pixelOffsetSubpix * lengthSign;\", \"    if( horzSpan) posM.y += pixelOffsetSubpix * lengthSign;\", \"    #if (FXAA_DISCARD == 1)\", \"        return FxaaTexTop(tex, posM);\", \"    #else\", \"        return FxaaFloat4(FxaaTexTop(tex, posM).xyz, lumaM);\", \"    #endif\", \"}\", \"/*==========================================================================*/\", \"#endif\", \"\", \"void main() {\", \"  gl_FragColor = FxaaPixelShader(\", \"    vUv,\", \"    vec4(0.0),\", \"    tDiffuse,\", \"    tDiffuse,\", \"    tDiffuse,\", \"    resolution,\", \"    vec4(0.0),\", \"    vec4(0.0),\", \"    vec4(0.0),\", \"    0.75,\", \"    0.166,\", \"    0.0833,\", \"    0.0,\", \"    0.0,\", \"    0.0,\", \"    vec4(0.0)\", \"  );\", \"\", \"  // TODO avoid querying texture twice for same texel\", \"  gl_FragColor.a = texture2D(tDiffuse, vUv).a;\", \"}\"].join(\"\\n\")\n};\n\n//# sourceURL=webpack://VDAY/./src/glsl/FXAA.js?");

/***/ }),

/***/ "./src/glsl/LuminosityHighPassShader.js":
/*!**********************************************!*\
  !*** ./src/glsl/LuminosityHighPassShader.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/**\r\n * @author bhouston / http://clara.io/\r\n *\r\n * Luminosity\r\n * http://en.wikipedia.org/wiki/Luminosity\r\n */\nTHREE.LuminosityHighPassShader = {\n  shaderID: \"luminosityHighPass\",\n  uniforms: {\n    \"tDiffuse\": {\n      type: \"t\",\n      value: null\n    },\n    \"luminosityThreshold\": {\n      type: \"f\",\n      value: 1.0\n    },\n    \"smoothWidth\": {\n      type: \"f\",\n      value: 1.0\n    },\n    \"defaultColor\": {\n      type: \"c\",\n      value: new THREE.Color(0x000000)\n    },\n    \"defaultOpacity\": {\n      type: \"f\",\n      value: 0.0\n    }\n  },\n  vertexShader: [\"varying vec2 vUv;\", \"void main() {\", \"vUv = uv;\", \"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\", \"}\"].join(\"\\n\"),\n  fragmentShader: [\"uniform sampler2D tDiffuse;\", \"uniform vec3 defaultColor;\", \"uniform float defaultOpacity;\", \"uniform float luminosityThreshold;\", \"uniform float smoothWidth;\", \"varying vec2 vUv;\", \"void main() {\", \"vec4 texel = texture2D( tDiffuse, vUv );\", \"vec3 luma = vec3( 0.299, 0.587, 0.114 );\", \"float v = dot( texel.xyz, luma );\", \"vec4 outputColor = vec4( defaultColor.rgb, defaultOpacity );\", \"float alpha = smoothstep( luminosityThreshold, luminosityThreshold + smoothWidth, v );\", \"gl_FragColor = mix( outputColor, texel, alpha );\", \"}\"].join(\"\\n\")\n};\n\n//# sourceURL=webpack://VDAY/./src/glsl/LuminosityHighPassShader.js?");

/***/ }),

/***/ "./src/glsl/Poster.js":
/*!****************************!*\
  !*** ./src/glsl/Poster.js ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/**\r\n  @author meatbags / https://github.com/meatbags\r\n  **/\nTHREE.PosterShader = {\n  uniforms: {\n    'tDiffuse': {\n      value: null\n    }\n  },\n  vertexShader: \"\\n    varying vec2 vUv;\\n\\n    void main() {\\n      vUv = uv;\\n      gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n    }\\n  \",\n  fragmentShader: \"\\n    #define PI 3.14159\\n    #define UV_SCALE 0.02\\n    #define MAX_HEIGHT 0.5\\n    varying vec2 vUv;\\n    uniform sampler2D tDiffuse;\\n\\n    float posterise(float val, float amount) {\\n      return floor(val * amount) / amount;\\n    }\\n\\n    float posteriseCeil(float val, float amount) {\\n      return ceil(val * amount) / amount;\\n    }\\n\\n    void main() {\\n      vec4 frag = texture2D(tDiffuse, vUv);\\n      frag.r = posterise(frag.r, 16.0);\\n      gl_FragColor = frag;\\n    }\\n  \"\n}; // render pass\n\nTHREE.PosterPass = function (size) {\n  THREE.Pass.call(this);\n  this.size = size;\n  this.shader = THREE.PosterShader;\n  this.material = new THREE.ShaderMaterial(this.shader);\n  this.camera = new THREE.OrthographicCamera(-1, 1, 1, -1, 0, 1);\n  this.scene = new THREE.Scene();\n  this.quad = new THREE.Mesh(new THREE.PlaneBufferGeometry(2, 2), this.material);\n  this.quad.frustumCulled = false;\n  this.scene.add(this.quad);\n  this.time = 0;\n};\n\nTHREE.PosterPass.prototype = Object.assign(Object.create(THREE.Pass.prototype), {\n  constructor: THREE.PosterPass,\n  render: function render(renderer, writeBuffer, readBuffer, delta, maskActive) {\n    this.shader.uniforms['tDiffuse'].value = readBuffer.texture;\n\n    if (this.renderToScreen) {\n      renderer.setRenderTarget(null);\n      renderer.clear();\n      renderer.render(this.scene, this.camera);\n    } else {\n      renderer.setRenderTarget(writeBuffer);\n      renderer.clear();\n      renderer.render(this.scene, this.camera);\n    }\n  }\n});\n\n//# sourceURL=webpack://VDAY/./src/glsl/Poster.js?");

/***/ }),

/***/ "./src/glsl/RenderPass.js":
/*!********************************!*\
  !*** ./src/glsl/RenderPass.js ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/**\r\n * @author alteredq / http://alteredqualia.com/\r\n */\nTHREE.RenderPass = function (scene, camera, overrideMaterial, clearColor, clearAlpha) {\n  THREE.Pass.call(this);\n  this.scene = scene;\n  this.camera = camera;\n  this.overrideMaterial = overrideMaterial;\n  this.clearColor = clearColor;\n  this.clearAlpha = clearAlpha !== undefined ? clearAlpha : 0;\n  this.clear = true;\n  this.clearDepth = false;\n  this.needsSwap = false;\n};\n\nTHREE.RenderPass.prototype = Object.assign(Object.create(THREE.Pass.prototype), {\n  constructor: THREE.RenderPass,\n  render: function render(renderer, writeBuffer, readBuffer\n  /*, deltaTime, maskActive */\n  ) {\n    var oldAutoClear = renderer.autoClear;\n    renderer.autoClear = false;\n    this.scene.overrideMaterial = this.overrideMaterial;\n    var oldClearColor, oldClearAlpha;\n\n    if (this.clearColor) {\n      oldClearColor = renderer.getClearColor().getHex();\n      oldClearAlpha = renderer.getClearAlpha();\n      renderer.setClearColor(this.clearColor, this.clearAlpha);\n    }\n\n    if (this.clearDepth) {\n      renderer.clearDepth();\n    }\n\n    renderer.setRenderTarget(this.renderToScreen ? null : readBuffer); // TODO: Avoid using autoClear properties, see https://github.com/mrdoob/three.js/pull/15571#issuecomment-465669600\n\n    if (this.clear) renderer.clear(renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil);\n    renderer.render(this.scene, this.camera);\n\n    if (this.clearColor) {\n      renderer.setClearColor(oldClearColor, oldClearAlpha);\n    }\n\n    this.scene.overrideMaterial = null;\n    renderer.autoClear = oldAutoClear;\n  }\n});\n\n//# sourceURL=webpack://VDAY/./src/glsl/RenderPass.js?");

/***/ }),

/***/ "./src/glsl/ShaderPass.js":
/*!********************************!*\
  !*** ./src/glsl/ShaderPass.js ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/**\r\n * @author alteredq / http://alteredqualia.com/\r\n */\nTHREE.ShaderPass = function (shader, textureID) {\n  THREE.Pass.call(this);\n  this.textureID = textureID !== undefined ? textureID : \"tDiffuse\";\n\n  if (shader instanceof THREE.ShaderMaterial) {\n    this.uniforms = shader.uniforms;\n    this.material = shader;\n  } else if (shader) {\n    this.uniforms = THREE.UniformsUtils.clone(shader.uniforms);\n    this.material = new THREE.ShaderMaterial({\n      defines: shader.defines || {},\n      uniforms: this.uniforms,\n      vertexShader: shader.vertexShader,\n      fragmentShader: shader.fragmentShader\n    });\n  }\n\n  this.camera = new THREE.OrthographicCamera(-1, 1, 1, -1, 0, 1);\n  this.scene = new THREE.Scene();\n  this.quad = new THREE.Mesh(new THREE.PlaneBufferGeometry(2, 2), null);\n  this.quad.frustumCulled = false; // Avoid getting clipped\n\n  this.scene.add(this.quad);\n};\n\nTHREE.ShaderPass.prototype = Object.assign(Object.create(THREE.Pass.prototype), {\n  constructor: THREE.ShaderPass,\n  render: function render(renderer, writeBuffer, readBuffer, delta, maskActive) {\n    if (this.uniforms[this.textureID]) {\n      this.uniforms[this.textureID].value = readBuffer.texture;\n    }\n\n    this.quad.material = this.material;\n\n    if (this.renderToScreen) {\n      renderer.render(this.scene, this.camera);\n    } else {\n      renderer.render(this.scene, this.camera, writeBuffer, this.clear);\n    }\n  }\n});\n\n//# sourceURL=webpack://VDAY/./src/glsl/ShaderPass.js?");

/***/ }),

/***/ "./src/glsl/UnrealBloomPass.js":
/*!*************************************!*\
  !*** ./src/glsl/UnrealBloomPass.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/**\r\n * @author spidersharma / http://eduperiment.com/\r\n *\r\n * Inspired from Unreal Engine\r\n * https://docs.unrealengine.com/latest/INT/Engine/Rendering/PostProcessEffects/Bloom/\r\n */\nTHREE.UnrealBloomPass = function (resolution, strength, radius, threshold) {\n  THREE.Pass.call(this);\n  this.strength = strength !== undefined ? strength : 1;\n  this.radius = radius;\n  this.threshold = threshold;\n  this.resolution = resolution !== undefined ? new THREE.Vector2(resolution.x, resolution.y) : new THREE.Vector2(256, 256); // create color only once here, reuse it later inside the render function\n\n  this.clearColor = new THREE.Color(0, 0, 0); // render targets\n\n  var pars = {\n    minFilter: THREE.LinearFilter,\n    magFilter: THREE.LinearFilter,\n    format: THREE.RGBAFormat\n  };\n  this.renderTargetsHorizontal = [];\n  this.renderTargetsVertical = [];\n  this.nMips = 5;\n  var resx = Math.round(this.resolution.x / 2);\n  var resy = Math.round(this.resolution.y / 2);\n  this.renderTargetBright = new THREE.WebGLRenderTarget(resx, resy, pars);\n  this.renderTargetBright.texture.name = \"UnrealBloomPass.bright\";\n  this.renderTargetBright.texture.generateMipmaps = false;\n\n  for (var i = 0; i < this.nMips; i++) {\n    var renderTargetHorizonal = new THREE.WebGLRenderTarget(resx, resy, pars);\n    renderTargetHorizonal.texture.name = \"UnrealBloomPass.h\" + i;\n    renderTargetHorizonal.texture.generateMipmaps = false;\n    this.renderTargetsHorizontal.push(renderTargetHorizonal);\n    var renderTargetVertical = new THREE.WebGLRenderTarget(resx, resy, pars);\n    renderTargetVertical.texture.name = \"UnrealBloomPass.v\" + i;\n    renderTargetVertical.texture.generateMipmaps = false;\n    this.renderTargetsVertical.push(renderTargetVertical);\n    resx = Math.round(resx / 2);\n    resy = Math.round(resy / 2);\n  } // luminosity high pass material\n\n\n  if (THREE.LuminosityHighPassShader === undefined) console.error(\"THREE.UnrealBloomPass relies on THREE.LuminosityHighPassShader\");\n  var highPassShader = THREE.LuminosityHighPassShader;\n  this.highPassUniforms = THREE.UniformsUtils.clone(highPassShader.uniforms);\n  this.highPassUniforms[\"luminosityThreshold\"].value = threshold;\n  this.highPassUniforms[\"smoothWidth\"].value = 0.01;\n  this.materialHighPassFilter = new THREE.ShaderMaterial({\n    uniforms: this.highPassUniforms,\n    vertexShader: highPassShader.vertexShader,\n    fragmentShader: highPassShader.fragmentShader,\n    defines: {}\n  }); // Gaussian Blur Materials\n\n  this.separableBlurMaterials = [];\n  var kernelSizeArray = [3, 5, 7, 9, 11];\n  var resx = Math.round(this.resolution.x / 2);\n  var resy = Math.round(this.resolution.y / 2);\n\n  for (var i = 0; i < this.nMips; i++) {\n    this.separableBlurMaterials.push(this.getSeperableBlurMaterial(kernelSizeArray[i]));\n    this.separableBlurMaterials[i].uniforms[\"texSize\"].value = new THREE.Vector2(resx, resy);\n    resx = Math.round(resx / 2);\n    resy = Math.round(resy / 2);\n  } // Composite material\n\n\n  this.compositeMaterial = this.getCompositeMaterial(this.nMips);\n  this.compositeMaterial.uniforms[\"blurTexture1\"].value = this.renderTargetsVertical[0].texture;\n  this.compositeMaterial.uniforms[\"blurTexture2\"].value = this.renderTargetsVertical[1].texture;\n  this.compositeMaterial.uniforms[\"blurTexture3\"].value = this.renderTargetsVertical[2].texture;\n  this.compositeMaterial.uniforms[\"blurTexture4\"].value = this.renderTargetsVertical[3].texture;\n  this.compositeMaterial.uniforms[\"blurTexture5\"].value = this.renderTargetsVertical[4].texture;\n  this.compositeMaterial.uniforms[\"bloomStrength\"].value = strength;\n  this.compositeMaterial.uniforms[\"bloomRadius\"].value = 0.1;\n  this.compositeMaterial.needsUpdate = true;\n  var bloomFactors = [1.0, 0.8, 0.6, 0.4, 0.2];\n  this.compositeMaterial.uniforms[\"bloomFactors\"].value = bloomFactors;\n  this.bloomTintColors = [new THREE.Vector3(1, 1, 1), new THREE.Vector3(1, 1, 1), new THREE.Vector3(1, 1, 1), new THREE.Vector3(1, 1, 1), new THREE.Vector3(1, 1, 1)];\n  this.compositeMaterial.uniforms[\"bloomTintColors\"].value = this.bloomTintColors; // copy material\n\n  if (THREE.CopyShader === undefined) {\n    console.error(\"THREE.UnrealBloomPass relies on THREE.CopyShader\");\n  }\n\n  var copyShader = THREE.CopyShader;\n  this.copyUniforms = THREE.UniformsUtils.clone(copyShader.uniforms);\n  this.copyUniforms[\"opacity\"].value = 1.0;\n  this.materialCopy = new THREE.ShaderMaterial({\n    uniforms: this.copyUniforms,\n    vertexShader: copyShader.vertexShader,\n    fragmentShader: copyShader.fragmentShader,\n    blending: THREE.AdditiveBlending,\n    depthTest: false,\n    depthWrite: false,\n    transparent: true\n  });\n  this.enabled = true;\n  this.needsSwap = false;\n  this.oldClearColor = new THREE.Color();\n  this.oldClearAlpha = 1;\n  this.basic = new THREE.MeshBasicMaterial();\n  this.fsQuad = new THREE.Pass.FullScreenQuad(null);\n};\n\nTHREE.UnrealBloomPass.prototype = Object.assign(Object.create(THREE.Pass.prototype), {\n  constructor: THREE.UnrealBloomPass,\n  dispose: function dispose() {\n    for (var i = 0; i < this.renderTargetsHorizontal.length; i++) {\n      this.renderTargetsHorizontal[i].dispose();\n    }\n\n    for (var i = 0; i < this.renderTargetsVertical.length; i++) {\n      this.renderTargetsVertical[i].dispose();\n    }\n\n    this.renderTargetBright.dispose();\n  },\n  setSize: function setSize(width, height) {\n    var resx = Math.round(width / 2);\n    var resy = Math.round(height / 2);\n    this.renderTargetBright.setSize(resx, resy);\n\n    for (var i = 0; i < this.nMips; i++) {\n      this.renderTargetsHorizontal[i].setSize(resx, resy);\n      this.renderTargetsVertical[i].setSize(resx, resy);\n      this.separableBlurMaterials[i].uniforms[\"texSize\"].value = new THREE.Vector2(resx, resy);\n      resx = Math.round(resx / 2);\n      resy = Math.round(resy / 2);\n    }\n  },\n  render: function render(renderer, writeBuffer, readBuffer, deltaTime, maskActive) {\n    this.oldClearColor.copy(renderer.getClearColor());\n    this.oldClearAlpha = renderer.getClearAlpha();\n    var oldAutoClear = renderer.autoClear;\n    renderer.autoClear = false;\n    renderer.setClearColor(this.clearColor, 0);\n    if (maskActive) renderer.context.disable(renderer.context.STENCIL_TEST); // Render input to screen\n\n    if (this.renderToScreen) {\n      this.fsQuad.material = this.basic;\n      this.basic.map = readBuffer.texture;\n      renderer.setRenderTarget(null);\n      renderer.clear();\n      this.fsQuad.render(renderer);\n    } // 1. Extract Bright Areas\n\n\n    this.highPassUniforms[\"tDiffuse\"].value = readBuffer.texture;\n    this.highPassUniforms[\"luminosityThreshold\"].value = this.threshold;\n    this.fsQuad.material = this.materialHighPassFilter;\n    renderer.setRenderTarget(this.renderTargetBright);\n    renderer.clear();\n    this.fsQuad.render(renderer); // 2. Blur All the mips progressively\n\n    var inputRenderTarget = this.renderTargetBright;\n\n    for (var i = 0; i < this.nMips; i++) {\n      this.fsQuad.material = this.separableBlurMaterials[i];\n      this.separableBlurMaterials[i].uniforms[\"colorTexture\"].value = inputRenderTarget.texture;\n      this.separableBlurMaterials[i].uniforms[\"direction\"].value = THREE.UnrealBloomPass.BlurDirectionX;\n      renderer.setRenderTarget(this.renderTargetsHorizontal[i]);\n      renderer.clear();\n      this.fsQuad.render(renderer);\n      this.separableBlurMaterials[i].uniforms[\"colorTexture\"].value = this.renderTargetsHorizontal[i].texture;\n      this.separableBlurMaterials[i].uniforms[\"direction\"].value = THREE.UnrealBloomPass.BlurDirectionY;\n      renderer.setRenderTarget(this.renderTargetsVertical[i]);\n      renderer.clear();\n      this.fsQuad.render(renderer);\n      inputRenderTarget = this.renderTargetsVertical[i];\n    } // Composite All the mips\n\n\n    this.fsQuad.material = this.compositeMaterial;\n    this.compositeMaterial.uniforms[\"bloomStrength\"].value = this.strength;\n    this.compositeMaterial.uniforms[\"bloomRadius\"].value = this.radius;\n    this.compositeMaterial.uniforms[\"bloomTintColors\"].value = this.bloomTintColors;\n    renderer.setRenderTarget(this.renderTargetsHorizontal[0]);\n    renderer.clear();\n    this.fsQuad.render(renderer); // Blend it additively over the input texture\n\n    this.fsQuad.material = this.materialCopy;\n    this.copyUniforms[\"tDiffuse\"].value = this.renderTargetsHorizontal[0].texture;\n    if (maskActive) renderer.context.enable(renderer.context.STENCIL_TEST);\n\n    if (this.renderToScreen) {\n      renderer.setRenderTarget(null);\n      this.fsQuad.render(renderer);\n    } else {\n      renderer.setRenderTarget(readBuffer);\n      this.fsQuad.render(renderer);\n    } // Restore renderer settings\n\n\n    renderer.setClearColor(this.oldClearColor, this.oldClearAlpha);\n    renderer.autoClear = oldAutoClear;\n  },\n  getSeperableBlurMaterial: function getSeperableBlurMaterial(kernelRadius) {\n    return new THREE.ShaderMaterial({\n      defines: {\n        \"KERNEL_RADIUS\": kernelRadius,\n        \"SIGMA\": kernelRadius\n      },\n      uniforms: {\n        \"colorTexture\": {\n          value: null\n        },\n        \"texSize\": {\n          value: new THREE.Vector2(0.5, 0.5)\n        },\n        \"direction\": {\n          value: new THREE.Vector2(0.5, 0.5)\n        }\n      },\n      vertexShader: \"varying vec2 vUv;\\n\\\r\n\t\t\t\tvoid main() {\\n\\\r\n\t\t\t\t\tvUv = uv;\\n\\\r\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n\\\r\n\t\t\t\t}\",\n      fragmentShader: \"#include <common>\\\r\n\t\t\t\tvarying vec2 vUv;\\n\\\r\n\t\t\t\tuniform sampler2D colorTexture;\\n\\\r\n\t\t\t\tuniform vec2 texSize;\\\r\n\t\t\t\tuniform vec2 direction;\\\r\n\t\t\t\t\\\r\n\t\t\t\tfloat gaussianPdf(in float x, in float sigma) {\\\r\n\t\t\t\t\treturn 0.39894 * exp( -0.5 * x * x/( sigma * sigma))/sigma;\\\r\n\t\t\t\t}\\\r\n\t\t\t\tvoid main() {\\n\\\r\n\t\t\t\t\tvec2 invSize = 1.0 / texSize;\\\r\n\t\t\t\t\tfloat fSigma = float(SIGMA);\\\r\n\t\t\t\t\tfloat weightSum = gaussianPdf(0.0, fSigma);\\\r\n\t\t\t\t\tvec3 diffuseSum = texture2D( colorTexture, vUv).rgb * weightSum;\\\r\n\t\t\t\t\tfor( int i = 1; i < KERNEL_RADIUS; i ++ ) {\\\r\n\t\t\t\t\t\tfloat x = float(i);\\\r\n\t\t\t\t\t\tfloat w = gaussianPdf(x, fSigma);\\\r\n\t\t\t\t\t\tvec2 uvOffset = direction * invSize * x;\\\r\n\t\t\t\t\t\tvec3 sample1 = texture2D( colorTexture, vUv + uvOffset).rgb;\\\r\n\t\t\t\t\t\tvec3 sample2 = texture2D( colorTexture, vUv - uvOffset).rgb;\\\r\n\t\t\t\t\t\tdiffuseSum += (sample1 + sample2) * w;\\\r\n\t\t\t\t\t\tweightSum += 2.0 * w;\\\r\n\t\t\t\t\t}\\\r\n\t\t\t\t\tgl_FragColor = vec4(diffuseSum/weightSum, 1.0);\\n\\\r\n\t\t\t\t}\"\n    });\n  },\n  getCompositeMaterial: function getCompositeMaterial(nMips) {\n    return new THREE.ShaderMaterial({\n      defines: {\n        \"NUM_MIPS\": nMips\n      },\n      uniforms: {\n        \"blurTexture1\": {\n          value: null\n        },\n        \"blurTexture2\": {\n          value: null\n        },\n        \"blurTexture3\": {\n          value: null\n        },\n        \"blurTexture4\": {\n          value: null\n        },\n        \"blurTexture5\": {\n          value: null\n        },\n        \"dirtTexture\": {\n          value: null\n        },\n        \"bloomStrength\": {\n          value: 1.0\n        },\n        \"bloomFactors\": {\n          value: null\n        },\n        \"bloomTintColors\": {\n          value: null\n        },\n        \"bloomRadius\": {\n          value: 0.0\n        }\n      },\n      vertexShader: \"varying vec2 vUv;\\n\\\r\n\t\t\t\tvoid main() {\\n\\\r\n\t\t\t\t\tvUv = uv;\\n\\\r\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n\\\r\n\t\t\t\t}\",\n      fragmentShader: \"varying vec2 vUv;\\\r\n\t\t\t\tuniform sampler2D blurTexture1;\\\r\n\t\t\t\tuniform sampler2D blurTexture2;\\\r\n\t\t\t\tuniform sampler2D blurTexture3;\\\r\n\t\t\t\tuniform sampler2D blurTexture4;\\\r\n\t\t\t\tuniform sampler2D blurTexture5;\\\r\n\t\t\t\tuniform sampler2D dirtTexture;\\\r\n\t\t\t\tuniform float bloomStrength;\\\r\n\t\t\t\tuniform float bloomRadius;\\\r\n\t\t\t\tuniform float bloomFactors[NUM_MIPS];\\\r\n\t\t\t\tuniform vec3 bloomTintColors[NUM_MIPS];\\\r\n\t\t\t\t\\\r\n\t\t\t\tfloat lerpBloomFactor(const in float factor) { \\\r\n\t\t\t\t\tfloat mirrorFactor = 1.2 - factor;\\\r\n\t\t\t\t\treturn mix(factor, mirrorFactor, bloomRadius);\\\r\n\t\t\t\t}\\\r\n\t\t\t\t\\\r\n\t\t\t\tvoid main() {\\\r\n\t\t\t\t\tgl_FragColor = bloomStrength * ( lerpBloomFactor(bloomFactors[0]) * vec4(bloomTintColors[0], 1.0) * texture2D(blurTexture1, vUv) + \\\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t lerpBloomFactor(bloomFactors[1]) * vec4(bloomTintColors[1], 1.0) * texture2D(blurTexture2, vUv) + \\\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t lerpBloomFactor(bloomFactors[2]) * vec4(bloomTintColors[2], 1.0) * texture2D(blurTexture3, vUv) + \\\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t lerpBloomFactor(bloomFactors[3]) * vec4(bloomTintColors[3], 1.0) * texture2D(blurTexture4, vUv) + \\\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t lerpBloomFactor(bloomFactors[4]) * vec4(bloomTintColors[4], 1.0) * texture2D(blurTexture5, vUv) );\\\r\n\t\t\t\t}\"\n    });\n  }\n});\nTHREE.UnrealBloomPass.BlurDirectionX = new THREE.Vector2(1.0, 0.0);\nTHREE.UnrealBloomPass.BlurDirectionY = new THREE.Vector2(0.0, 1.0);\n\n//# sourceURL=webpack://VDAY/./src/glsl/UnrealBloomPass.js?");

/***/ }),

/***/ "./src/glsl/index.js":
/*!***************************!*\
  !*** ./src/glsl/index.js ***!
  \***************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _CopyShader_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./CopyShader.js */ \"./src/glsl/CopyShader.js\");\n/* harmony import */ var _CopyShader_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_CopyShader_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _EffectComposer_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./EffectComposer.js */ \"./src/glsl/EffectComposer.js\");\n/* harmony import */ var _EffectComposer_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_EffectComposer_js__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _FXAA_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./FXAA.js */ \"./src/glsl/FXAA.js\");\n/* harmony import */ var _FXAA_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_FXAA_js__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _LuminosityHighPassShader_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./LuminosityHighPassShader.js */ \"./src/glsl/LuminosityHighPassShader.js\");\n/* harmony import */ var _LuminosityHighPassShader_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_LuminosityHighPassShader_js__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _RenderPass_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./RenderPass.js */ \"./src/glsl/RenderPass.js\");\n/* harmony import */ var _RenderPass_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_RenderPass_js__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _ShaderPass_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./ShaderPass.js */ \"./src/glsl/ShaderPass.js\");\n/* harmony import */ var _ShaderPass_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_ShaderPass_js__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var _UnrealBloomPass_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./UnrealBloomPass.js */ \"./src/glsl/UnrealBloomPass.js\");\n/* harmony import */ var _UnrealBloomPass_js__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_UnrealBloomPass_js__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var _BloomLite_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./BloomLite.js */ \"./src/glsl/BloomLite.js\");\n/* harmony import */ var _BloomLite_js__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(_BloomLite_js__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var _Poster_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./Poster.js */ \"./src/glsl/Poster.js\");\n/* harmony import */ var _Poster_js__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(_Poster_js__WEBPACK_IMPORTED_MODULE_8__);\n\n\n\n\n\n\n\n\n\n\n//# sourceURL=webpack://VDAY/./src/glsl/index.js?");

/***/ }),

/***/ "./src/loader/FBXLoader.js":
/*!*********************************!*\
  !*** ./src/loader/FBXLoader.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/**\r\n * @author Kyle-Larson https://github.com/Kyle-Larson\r\n * @author Takahiro https://github.com/takahirox\r\n *\r\n * Loader loads FBX file and generates Group representing FBX scene.\r\n * Requires FBX file to be >= 7.0 and in ASCII or to be any version in Binary format.\r\n *\r\n * Supports:\r\n * \tMesh Generation (Positional Data)\r\n * \tNormal Data (Per Vertex Drawing Instance)\r\n *\tUV Data (Per Vertex Drawing Instance)\r\n *\tSkinning\r\n *\tAnimation\r\n * \t- Separated Animations based on stacks.\r\n * \t- Skeletal & Non-Skeletal Animations\r\n *\tNURBS (Open, Closed and Periodic forms)\r\n *\r\n * Needs Support:\r\n * \tIndexed Buffers\r\n * \tPreRotation support.\r\n *\tEuler rotation order\r\n *\r\n * FBX format references:\r\n * \thttps://wiki.blender.org/index.php/User:Mont29/Foundation/FBX_File_Structure\r\n *\r\n * \tBinary format specification:\r\n *\t\thttps://code.blender.org/2013/08/fbx-binary-file-format-specification/\r\n *\t\thttps://wiki.rogiken.org/specifications/file-format/fbx/ (more detail but Japanese)\r\n *\r\n * Modifications\r\n * @author github.com/meatbags\r\n * Added support for Maya 2018 Stingray PBR Shaders -> MeshStandardMaterial\r\n */\n(function () {\n  THREE.FBXLoader = function (manager) {\n    this.manager = manager !== undefined ? manager : THREE.DefaultLoadingManager;\n  };\n\n  Object.assign(THREE.FBXLoader.prototype, {\n    load: function load(url, onLoad, onProgress, onError) {\n      var self = this; //var resourceDirectory = THREE.Loader.prototype.extractUrlBase( url );\n\n      var resourceDirectory = THREE.LoaderUtils.extractUrlBase(url);\n      var loader = new THREE.FileLoader(this.manager);\n      loader.setResponseType('arraybuffer');\n      loader.load(url, function (buffer) {\n        try {\n          var scene = self.parse(buffer, resourceDirectory);\n          onLoad(scene);\n        } catch (error) {\n          window.setTimeout(function () {\n            if (onError) onError(error);\n            self.manager.itemError(url);\n          }, 0);\n        }\n      }, onProgress, onError);\n    },\n    parse: function parse(FBXBuffer, resourceDirectory) {\n      var FBXTree;\n\n      if (isFbxFormatBinary(FBXBuffer)) {\n        FBXTree = new BinaryParser().parse(FBXBuffer);\n      } else {\n        var FBXText = convertArrayBufferToString(FBXBuffer);\n\n        if (!isFbxFormatASCII(FBXText)) {\n          throw new Error('THREE.FBXLoader: Unknown format.');\n        }\n\n        if (getFbxVersion(FBXText) < 7000) {\n          throw new Error('THREE.FBXLoader: FBX version not supported, FileVersion: ' + getFbxVersion(FBXText));\n        }\n\n        FBXTree = new TextParser().parse(FBXText);\n      }\n\n      var connections = parseConnections(FBXTree);\n      var images = parseImages(FBXTree);\n      var textures = parseTextures(FBXTree, new THREE.TextureLoader(this.manager).setPath(resourceDirectory), images, connections);\n      var materials = parseMaterials(FBXTree, textures, connections);\n      var deformers = parseDeformers(FBXTree, connections);\n      var geometryMap = parseGeometries(FBXTree, connections, deformers);\n      var sceneGraph = parseScene(FBXTree, connections, deformers, geometryMap, materials);\n      return sceneGraph;\n    }\n  }); // Parses FBXTree.Connections which holds parent-child connections between objects (e.g. material -> texture, model->geometry )\n  // and details the connection type\n\n  function parseConnections(FBXTree) {\n    var connectionMap = new Map();\n\n    if ('Connections' in FBXTree) {\n      var connectionArray = FBXTree.Connections.properties.connections;\n\n      for (var connectionArrayIndex = 0, connectionArrayLength = connectionArray.length; connectionArrayIndex < connectionArrayLength; ++connectionArrayIndex) {\n        var connection = connectionArray[connectionArrayIndex];\n\n        if (!connectionMap.has(connection[0])) {\n          connectionMap.set(connection[0], {\n            parents: [],\n            children: []\n          });\n        }\n\n        var parentRelationship = {\n          ID: connection[1],\n          relationship: connection[2]\n        };\n        connectionMap.get(connection[0]).parents.push(parentRelationship);\n\n        if (!connectionMap.has(connection[1])) {\n          connectionMap.set(connection[1], {\n            parents: [],\n            children: []\n          });\n        }\n\n        var childRelationship = {\n          ID: connection[0],\n          relationship: connection[2]\n        };\n        connectionMap.get(connection[1]).children.push(childRelationship);\n      }\n    }\n\n    return connectionMap;\n  } // Parses map of images referenced in FBXTree.Objects.subNodes.Video\n  // Images can either be referenced externally or embedded in the file\n  // These images are connected to textures in FBXTree.Objects.subNodes.Textures\n  // via FBXTree.Connections. Note that images can be duplicated here, in which case only one\n  // will will have a .Content field\n\n\n  function parseImages(FBXTree) {\n    var imageMap = new Map();\n\n    if ('Video' in FBXTree.Objects.subNodes) {\n      var videoNodes = FBXTree.Objects.subNodes.Video;\n\n      for (var nodeID in videoNodes) {\n        var videoNode = videoNodes[nodeID]; // raw image data is in videoNode.properties.Content\n\n        if ('Content' in videoNode.properties) {\n          var image = parseImage(videoNodes[nodeID]);\n          imageMap.set(parseInt(nodeID), image);\n        }\n      }\n    }\n\n    return imageMap;\n  } // Parse embedded image data in FBXTree.Video.properties.Content\n\n\n  function parseImage(videoNode) {\n    var content = videoNode.properties.Content;\n    var fileName = videoNode.properties.RelativeFilename || videoNode.properties.Filename;\n    var extension = fileName.slice(fileName.lastIndexOf('.') + 1).toLowerCase();\n    var type;\n\n    switch (extension) {\n      case 'bmp':\n        type = 'image/bmp';\n        break;\n\n      case 'jpg':\n      case 'jpeg':\n        type = 'image/jpeg';\n        break;\n\n      case 'png':\n        type = 'image/png';\n        break;\n\n      case 'tif':\n        type = 'image/tiff';\n        break;\n\n      default:\n        console.warn('FBXLoader: Image type \"' + extension + '\" is not supported.');\n        return;\n    }\n\n    if (typeof content === 'string') {\n      return 'data:' + type + ';base64,' + content;\n    } else {\n      var array = new Uint8Array(content);\n      return window.URL.createObjectURL(new Blob([array], {\n        type: type\n      }));\n    }\n  } // Parse nodes in FBXTree.Objects.subNodes.Texture\n  // These contain details such as UV scaling, cropping, rotation etc and are connected\n  // to images in FBXTree.Objects.subNodes.Video\n\n\n  function parseTextures(FBXTree, loader, imageMap, connections) {\n    var textureMap = new Map();\n    var extensionWhitelist = ['jpg', 'jpeg', 'png', 'bmp'];\n\n    if ('Texture' in FBXTree.Objects.subNodes) {\n      var textureNodes = FBXTree.Objects.subNodes.Texture;\n\n      for (var nodeID in textureNodes) {\n        var textureNode = textureNodes[nodeID];\n        var extension = textureNode.properties.FileName.slice(textureNode.properties.FileName.lastIndexOf('.') + 1).toLowerCase();\n\n        if (extensionWhitelist.indexOf(extension) != -1) {\n          var texture = parseTexture(textureNode, loader, imageMap, connections);\n          textureMap.set(parseInt(nodeID), texture);\n        }\n      }\n    }\n\n    return textureMap;\n  } // Parse individual node in FBXTree.Objects.subNodes.Texture\n\n\n  function parseTexture(textureNode, loader, imageMap, connections) {\n    var FBX_ID = textureNode.id;\n    var name = textureNode.attrName;\n    var fileName;\n    var filePath = textureNode.properties.FileName;\n    var relativeFilePath = textureNode.properties.RelativeFilename;\n    var children = connections.get(FBX_ID).children;\n\n    if (children !== undefined && children.length > 0 && imageMap.has(children[0].ID)) {\n      fileName = imageMap.get(children[0].ID);\n    } else if (relativeFilePath !== undefined && relativeFilePath[0] !== '/' && relativeFilePath.match(/^[a-zA-Z]:/) === null) {\n      // use textureNode.properties.RelativeFilename\n      // if it exists and it doesn't seem an absolute path\n      fileName = relativeFilePath;\n    } else {\n      var split = filePath.split(/[\\\\\\/]/);\n\n      if (split.length > 0) {\n        fileName = split[split.length - 1];\n      } else {\n        fileName = filePath;\n      }\n    }\n\n    var currentPath = loader.path;\n\n    if (fileName.indexOf('blob:') === 0 || fileName.indexOf('data:') === 0) {\n      loader.setPath(undefined);\n    }\n\n    var texture = loader.load(fileName);\n    texture.name = name;\n    texture.FBX_ID = FBX_ID;\n    var wrapModeU = textureNode.properties.WrapModeU;\n    var wrapModeV = textureNode.properties.WrapModeV;\n    var valueU = wrapModeU !== undefined ? wrapModeU.value : 0;\n    var valueV = wrapModeV !== undefined ? wrapModeV.value : 0; // http://download.autodesk.com/us/fbx/SDKdocs/FBX_SDK_Help/files/fbxsdkref/class_k_fbx_texture.html#889640e63e2e681259ea81061b85143a\n    // 0: repeat(default), 1: clamp\n\n    texture.wrapS = valueU === 0 ? THREE.RepeatWrapping : THREE.ClampToEdgeWrapping;\n    texture.wrapT = valueV === 0 ? THREE.RepeatWrapping : THREE.ClampToEdgeWrapping;\n\n    if ('Scaling' in textureNode.properties) {\n      var values = textureNode.properties.Scaling.value;\n      texture.repeat.x = values[0];\n      texture.repeat.y = values[1];\n    }\n\n    loader.setPath(currentPath);\n    return texture;\n  } // Parse nodes in FBXTree.Objects.subNodes.Material\n\n\n  function parseMaterials(FBXTree, textureMap, connections) {\n    var materialMap = new Map();\n\n    if ('Material' in FBXTree.Objects.subNodes) {\n      var materialNodes = FBXTree.Objects.subNodes.Material;\n\n      for (var nodeID in materialNodes) {\n        var material = parseMaterial(materialNodes[nodeID], textureMap, connections);\n        if (material !== null) materialMap.set(parseInt(nodeID), material);\n      }\n    }\n\n    return materialMap;\n  } // Parse single node in FBXTree.Objects.subNodes.Material\n  // Materials are connected to texture maps in FBXTree.Objects.subNodes.Textures\n  // FBX format currently only supports Lambert and Phong shading models\n\n\n  function parseMaterial(materialNode, textureMap, connections) {\n    //console.log('NODE', materialNode, textureMap, connections);\n    var FBX_ID = materialNode.id;\n    var name = materialNode.attrName;\n    var type = materialNode.properties.ShadingModel; // Case where FBX wraps shading model in property object.\n\n    if (_typeof(type) === 'object') {\n      type = type.value;\n    } // Ignore unused materials which don't have any connections.\n\n\n    if (!connections.has(FBX_ID)) return null;\n    var children = connections.get(FBX_ID).children;\n    var parameters = parseParameters(materialNode.properties, textureMap, children);\n    var material;\n\n    switch (type.toLowerCase()) {\n      case 'phong':\n        material = new THREE.MeshPhongMaterial();\n        break;\n\n      case 'lambert':\n        material = new THREE.MeshLambertMaterial();\n        break;\n\n      case 'unknown':\n        material = new THREE.MeshStandardMaterial();\n        break;\n\n      default:\n        console.warn('THREE.FBXLoader: unknown material type \"%s\". Defaulting to MeshPhongMaterial.', type);\n        material = new THREE.MeshPhongMaterial({\n          color: 0x3300ff\n        });\n        break;\n    }\n\n    material.setValues(parameters);\n    material.name = name;\n    return material;\n  } // Parse FBX material and return parameters suitable for a three.js material\n  // Also parse the texture map and return any textures associated with the material\n\n\n  function parseParameters(properties, textureMap, childrenRelationships) {\n    var parameters = {};\n\n    if (properties.BumpFactor) {\n      parameters.bumpScale = properties.BumpFactor.value;\n    }\n\n    if (properties.Diffuse) {\n      parameters.color = parseColor(properties.Diffuse);\n    }\n\n    if (properties.DisplacementFactor) {\n      parameters.displacementScale = properties.DisplacementFactor.value;\n    }\n\n    if (properties.ReflectionFactor) {\n      parameters.reflectivity = properties.ReflectionFactor.value;\n    }\n\n    if (properties.Specular) {\n      parameters.specular = parseColor(properties.Specular);\n    }\n\n    if (properties.Shininess) {\n      parameters.shininess = properties.Shininess.value;\n    }\n\n    if (properties.Emissive) {\n      parameters.emissive = parseColor(properties.Emissive);\n    }\n\n    if (properties.EmissiveFactor) {\n      parameters.emissiveIntensity = parseFloat(properties.EmissiveFactor.value);\n    }\n\n    if (properties.Opacity) {\n      parameters.opacity = parseFloat(properties.Opacity.value);\n    }\n\n    if (parameters.opacity < 1.0) {\n      parameters.transparent = true;\n    } // Maya PBR export\n    //console.log(properties);\n\n\n    if (properties['Maya|base_color']) {\n      var c = properties['Maya|base_color'].value;\n      parameters.color = new THREE.Color(c[0], c[1], c[2]);\n    }\n\n    if (properties['Maya|emissive']) {\n      var c = properties['Maya|emissive'];\n      parameters.emissive = new THREE.Color(c[0], c[1], c[2]);\n    }\n\n    if (properties['Maya|emissive_intensity']) {\n      parameters.emissiveIntensity = properties['Maya|emissive_intensity'].value;\n    }\n\n    if (properties['Maya|metallic']) {\n      parameters.metalness = properties['Maya|metallic'].value;\n    }\n\n    if (properties['Maya|roughness']) {\n      parameters.roughness = properties['Maya|roughness'].value;\n    } // UV scale\n\n\n    var uvScale = 1;\n\n    if (properties['Maya|uv_scale']) {\n      var uvScale = properties['Maya|uv_scale'].value;\n    }\n\n    for (var childrenRelationshipsIndex = 0, childrenRelationshipsLength = childrenRelationships.length; childrenRelationshipsIndex < childrenRelationshipsLength; ++childrenRelationshipsIndex) {\n      var relationship = childrenRelationships[childrenRelationshipsIndex];\n      var type = relationship.relationship;\n\n      switch (type) {\n        // Maya PBR material exports\n        //case 'Maya|base_color':\n        case 'Maya|TEX_color_map':\n          var prop = 'Maya|use_color_map';\n\n          if (properties[prop] && properties[prop].value == 1) {\n            parameters.map = textureMap.get(relationship.ID);\n\n            if (uvScale != 1) {\n              parameters.map.wrapS = THREE.RepeatWrapping;\n              parameters.map.wrapT = THREE.RepeatWrapping;\n              parameters.map.repeat.set(uvScale, uvScale);\n            }\n          }\n\n          break;\n\n        case 'Maya|TEX_emissive_map':\n          var prop = 'Maya|use_emissive_map';\n\n          if (properties[prop] && properties[prop].value == 1) {\n            parameters.emissiveMap = textureMap.get(relationship.ID);\n\n            if (uvScale != 1) {\n              parameters.emissiveMap.wrapS = THREE.RepeatWrapping;\n              parameters.emissiveMap.wrapT = THREE.RepeatWrapping;\n              parameters.emissiveMap.repeat.set(uvScale, uvScale);\n            }\n          }\n\n          break;\n\n        case 'Maya|TEX_roughness_map':\n          var prop = 'Maya|use_roughness_map';\n\n          if (properties[prop] && properties[prop].value == 1) {\n            parameters.roughnessMap = textureMap.get(relationship.ID);\n\n            if (uvScale != 1) {\n              parameters.roughnessMap.wrapS = THREE.RepeatWrapping;\n              parameters.roughnessMap.wrapT = THREE.RepeatWrapping;\n              parameters.roughnessMap.repeat.set(uvScale, uvScale);\n            }\n          }\n\n          break;\n\n        case 'Maya|TEX_normal_map':\n          var prop = 'Maya|use_normal_map';\n\n          if (properties[prop] && properties[prop].value == 1) {\n            parameters.normalMap = textureMap.get(relationship.ID);\n\n            if (uvScale != 1) {\n              parameters.normalMap.wrapS = THREE.RepeatWrapping;\n              parameters.normalMap.wrapT = THREE.RepeatWrapping;\n              parameters.normalMap.repeat.set(uvScale, uvScale);\n            }\n          }\n\n          break;\n\n        case 'Maya|TEX_metallic_map':\n          var prop = 'Maya|use_metallic_map';\n\n          if (properties[prop] && properties[prop].value == 1) {\n            parameters.metalnessMap = textureMap.get(relationship.ID);\n\n            if (uvScale != 1) {\n              parameters.metalnessMap.wrapS = THREE.RepeatWrapping;\n              parameters.metalnessMap.wrapT = THREE.RepeatWrapping;\n              parameters.metalnessMap.repeat.set(uvScale, uvScale);\n            }\n          }\n\n          break;\n\n        case 'Maya|TEX_ao_map':\n          var prop = 'Maya|use_ao_map';\n\n          if (properties[prop] && properties[prop].value == 1) {\n            parameters.aoMap = textureMap.get(relationship.ID);\n\n            if (uvScale != 1) {\n              parameters.aoMap.wrapS = THREE.RepeatWrapping;\n              parameters.aoMap.wrapT = THREE.RepeatWrapping;\n              parameters.aoMap.repeat.set(uvScale, uvScale);\n            }\n          }\n\n          break;\n\n        case 'Maya|TEX_brdf_lut':\n        case 'Maya|TEX_global_specular_cube':\n        case 'Maya|TEX_global_diffuse_cube':\n          break;\n\n        case 'Bump':\n          parameters.bumpMap = textureMap.get(relationship.ID);\n          break;\n\n        case 'DiffuseColor':\n          parameters.map = textureMap.get(relationship.ID);\n          break;\n\n        case 'DisplacementColor':\n          parameters.displacementMap = textureMap.get(relationship.ID);\n          break;\n\n        case 'EmissiveColor':\n          parameters.emissiveMap = textureMap.get(relationship.ID);\n          break;\n\n        case 'NormalMap':\n          parameters.normalMap = textureMap.get(relationship.ID);\n          break;\n\n        case 'ReflectionColor':\n          parameters.envMap = textureMap.get(relationship.ID);\n          parameters.envMap.mapping = THREE.EquirectangularReflectionMapping;\n          break;\n\n        case 'SpecularColor':\n          parameters.specularMap = textureMap.get(relationship.ID);\n          break;\n\n        case 'TransparentColor':\n          parameters.alphaMap = textureMap.get(relationship.ID);\n          parameters.transparent = true;\n          break;\n\n        case 'AmbientColor':\n        case 'ShininessExponent': // AKA glossiness map\n\n        case 'SpecularFactor': // AKA specularLevel\n\n        case 'VectorDisplacementColor': // NOTE: Seems to be a copy of DisplacementColor\n\n        default:\n          console.warn('THREE.FBXLoader: %s map is not supported in three.js, skipping texture.', type);\n          break;\n      }\n    }\n\n    return parameters;\n  } // Parse nodes in FBXTree.Objects.subNodes.Deformer\n  // Deformer node can contain skinning or Vertex Cache animation data, however only skinning is supported here\n  // Generates map of Skeleton-like objects for use later when generating and binding skeletons.\n\n\n  function parseDeformers(FBXTree, connections) {\n    var deformers = {};\n\n    if ('Deformer' in FBXTree.Objects.subNodes) {\n      var DeformerNodes = FBXTree.Objects.subNodes.Deformer;\n\n      for (var nodeID in DeformerNodes) {\n        var deformerNode = DeformerNodes[nodeID];\n\n        if (deformerNode.attrType === 'Skin') {\n          var conns = connections.get(parseInt(nodeID));\n          var skeleton = parseSkeleton(conns, DeformerNodes);\n          skeleton.FBX_ID = parseInt(nodeID);\n          deformers[nodeID] = skeleton;\n        }\n      }\n    }\n\n    return deformers;\n  } // Parse single nodes in FBXTree.Objects.subNodes.Deformer\n  // Generates a \"Skeleton Representation\" of FBX nodes based on an FBX Skin Deformer's connections\n  // and an object containing SubDeformer nodes.\n\n\n  function parseSkeleton(connections, DeformerNodes) {\n    var subDeformers = {};\n    var children = connections.children;\n\n    for (var i = 0, l = children.length; i < l; ++i) {\n      var child = children[i];\n      var subDeformerNode = DeformerNodes[child.ID];\n      var subDeformer = {\n        FBX_ID: child.ID,\n        index: i,\n        indices: [],\n        weights: [],\n        transform: new THREE.Matrix4().fromArray(subDeformerNode.subNodes.Transform.properties.a),\n        transformLink: new THREE.Matrix4().fromArray(subDeformerNode.subNodes.TransformLink.properties.a),\n        linkMode: subDeformerNode.properties.Mode\n      };\n\n      if ('Indexes' in subDeformerNode.subNodes) {\n        subDeformer.indices = subDeformerNode.subNodes.Indexes.properties.a;\n        subDeformer.weights = subDeformerNode.subNodes.Weights.properties.a;\n      }\n\n      subDeformers[child.ID] = subDeformer;\n    }\n\n    return {\n      map: subDeformers,\n      bones: []\n    };\n  } // Parse nodes in FBXTree.Objects.subNodes.Geometry\n\n\n  function parseGeometries(FBXTree, connections, deformers) {\n    var geometryMap = new Map();\n\n    if ('Geometry' in FBXTree.Objects.subNodes) {\n      var geometryNodes = FBXTree.Objects.subNodes.Geometry;\n\n      for (var nodeID in geometryNodes) {\n        var relationships = connections.get(parseInt(nodeID));\n        var geo = parseGeometry(geometryNodes[nodeID], relationships, deformers);\n        geometryMap.set(parseInt(nodeID), geo);\n      }\n    }\n\n    return geometryMap;\n  } // Parse single node in FBXTree.Objects.subNodes.Geometry\n\n\n  function parseGeometry(geometryNode, relationships, deformers) {\n    switch (geometryNode.attrType) {\n      case 'Mesh':\n        return parseMeshGeometry(geometryNode, relationships, deformers);\n        break;\n\n      case 'NurbsCurve':\n        return parseNurbsGeometry(geometryNode);\n        break;\n    }\n  } // Parse single node mesh geometry in FBXTree.Objects.subNodes.Geometry\n\n\n  function parseMeshGeometry(geometryNode, relationships, deformers) {\n    for (var i = 0; i < relationships.children.length; ++i) {\n      var deformer = deformers[relationships.children[i].ID];\n      if (deformer !== undefined) break;\n    }\n\n    return genGeometry(geometryNode, deformer);\n  } // Generate a THREE.BufferGeometry from a node in FBXTree.Objects.subNodes.Geometry\n\n\n  function genGeometry(geometryNode, deformer) {\n    var subNodes = geometryNode.subNodes;\n    var vertexPositions = subNodes.Vertices.properties.a;\n    var vertexIndices = subNodes.PolygonVertexIndex.properties.a; // create arrays to hold the final data used to build the buffergeometry\n\n    var vertexBuffer = [];\n    var normalBuffer = [];\n    var colorsBuffer = [];\n    var uvsBuffer = [];\n    var materialIndexBuffer = [];\n    var vertexWeightsBuffer = [];\n    var weightsIndicesBuffer = [];\n\n    if (subNodes.LayerElementColor) {\n      var colorInfo = getColors(subNodes.LayerElementColor[0]);\n    }\n\n    if (subNodes.LayerElementMaterial) {\n      var materialInfo = getMaterials(subNodes.LayerElementMaterial[0]);\n    }\n\n    if (subNodes.LayerElementNormal) {\n      var normalInfo = getNormals(subNodes.LayerElementNormal[0]);\n    }\n\n    if (subNodes.LayerElementUV) {\n      var uvInfo = [];\n      var i = 0;\n\n      while (subNodes.LayerElementUV[i]) {\n        uvInfo.push(getUVs(subNodes.LayerElementUV[i]));\n        i++;\n      }\n    }\n\n    var weightTable = {};\n\n    if (deformer) {\n      var subDeformers = deformer.map;\n\n      for (var key in subDeformers) {\n        var subDeformer = subDeformers[key];\n        var indices = subDeformer.indices;\n\n        for (var j = 0; j < indices.length; j++) {\n          var index = indices[j];\n          var weight = subDeformer.weights[j];\n          if (weightTable[index] === undefined) weightTable[index] = [];\n          weightTable[index].push({\n            id: subDeformer.index,\n            weight: weight\n          });\n        }\n      }\n    }\n\n    var polygonIndex = 0;\n    var faceLength = 0;\n    var displayedWeightsWarning = false; // these will hold data for a single face\n\n    var vertexPositionIndexes = [];\n    var faceNormals = [];\n    var faceColors = [];\n    var faceUVs = [];\n    var faceWeights = [];\n    var faceWeightIndices = [];\n\n    for (var polygonVertexIndex = 0; polygonVertexIndex < vertexIndices.length; polygonVertexIndex++) {\n      var vertexIndex = vertexIndices[polygonVertexIndex];\n      var endOfFace = false; // Face index and vertex index arrays are combined in a single array\n      // A cube with quad faces looks like this:\n      // PolygonVertexIndex: *24 {\n      //  a: 0, 1, 3, -3, 2, 3, 5, -5, 4, 5, 7, -7, 6, 7, 1, -1, 1, 7, 5, -4, 6, 0, 2, -5\n      //  }\n      // Negative numbers mark the end of a face - first face here is 0, 1, 3, -3\n      // to find index of last vertex multiply by -1 and subtract 1: -3 * - 1 - 1 = 2\n\n      if (vertexIndex < 0) {\n        vertexIndex = vertexIndex ^ -1; // equivalent to ( x * -1 ) - 1\n\n        vertexIndices[polygonVertexIndex] = vertexIndex;\n        endOfFace = true;\n      }\n\n      var weightIndices = [];\n      var weights = [];\n      vertexPositionIndexes.push(vertexIndex * 3, vertexIndex * 3 + 1, vertexIndex * 3 + 2);\n\n      if (colorInfo) {\n        var data = getData(polygonVertexIndex, polygonIndex, vertexIndex, colorInfo);\n        faceColors.push(data[0], data[1], data[2]);\n      }\n\n      if (deformer) {\n        if (weightTable[vertexIndex] !== undefined) {\n          var array = weightTable[vertexIndex];\n\n          for (var j = 0, jl = array.length; j < jl; j++) {\n            weights.push(array[j].weight);\n            weightIndices.push(array[j].id);\n          }\n        }\n\n        if (weights.length > 4) {\n          if (!displayedWeightsWarning) {\n            console.warn('THREE.FBXLoader: Vertex has more than 4 skinning weights assigned to vertex. Deleting additional weights.');\n            displayedWeightsWarning = true;\n          }\n\n          var WIndex = [0, 0, 0, 0];\n          var Weight = [0, 0, 0, 0];\n          weights.forEach(function (weight, weightIndex) {\n            var currentWeight = weight;\n            var currentIndex = weightIndices[weightIndex];\n            Weight.forEach(function (comparedWeight, comparedWeightIndex, comparedWeightArray) {\n              if (currentWeight > comparedWeight) {\n                comparedWeightArray[comparedWeightIndex] = currentWeight;\n                currentWeight = comparedWeight;\n                var tmp = WIndex[comparedWeightIndex];\n                WIndex[comparedWeightIndex] = currentIndex;\n                currentIndex = tmp;\n              }\n            });\n          });\n          weightIndices = WIndex;\n          weights = Weight;\n        } // if the weight array is shorter than 4 pad with 0s\n\n\n        for (var i = weights.length; i < 4; ++i) {\n          weights[i] = 0;\n          weightIndices[i] = 0;\n        }\n\n        for (var i = 0; i < 4; ++i) {\n          faceWeights.push(weights[i]);\n          faceWeightIndices.push(weightIndices[i]);\n        }\n      }\n\n      if (normalInfo) {\n        var data = getData(polygonVertexIndex, polygonIndex, vertexIndex, normalInfo);\n        faceNormals.push(data[0], data[1], data[2]);\n      }\n\n      if (uvInfo) {\n        for (var i = 0; i < uvInfo.length; i++) {\n          var data = getData(polygonVertexIndex, polygonIndex, vertexIndex, uvInfo[i]);\n\n          if (faceUVs[i] === undefined) {\n            faceUVs[i] = [];\n          }\n\n          faceUVs[i].push(data[0], data[1]);\n        }\n      }\n\n      faceLength++; // we have reached the end of a face - it may have 4 sides though\n      // in which case the data is split into to represent 3 sides faces\n\n      if (endOfFace) {\n        for (var i = 2; i < faceLength; i++) {\n          vertexBuffer.push(vertexPositions[vertexPositionIndexes[0]]);\n          vertexBuffer.push(vertexPositions[vertexPositionIndexes[1]]);\n          vertexBuffer.push(vertexPositions[vertexPositionIndexes[2]]);\n          vertexBuffer.push(vertexPositions[vertexPositionIndexes[(i - 1) * 3]]);\n          vertexBuffer.push(vertexPositions[vertexPositionIndexes[(i - 1) * 3 + 1]]);\n          vertexBuffer.push(vertexPositions[vertexPositionIndexes[(i - 1) * 3 + 2]]);\n          vertexBuffer.push(vertexPositions[vertexPositionIndexes[i * 3]]);\n          vertexBuffer.push(vertexPositions[vertexPositionIndexes[i * 3 + 1]]);\n          vertexBuffer.push(vertexPositions[vertexPositionIndexes[i * 3 + 2]]);\n        }\n\n        if (deformer) {\n          for (var i = 2; i < faceLength; i++) {\n            vertexWeightsBuffer.push(faceWeights[0]);\n            vertexWeightsBuffer.push(faceWeights[1]);\n            vertexWeightsBuffer.push(faceWeights[2]);\n            vertexWeightsBuffer.push(faceWeights[3]);\n            vertexWeightsBuffer.push(faceWeights[(i - 1) * 4]);\n            vertexWeightsBuffer.push(faceWeights[(i - 1) * 4 + 1]);\n            vertexWeightsBuffer.push(faceWeights[(i - 1) * 4 + 2]);\n            vertexWeightsBuffer.push(faceWeights[(i - 1) * 4 + 3]);\n            vertexWeightsBuffer.push(faceWeights[i * 4]);\n            vertexWeightsBuffer.push(faceWeights[i * 4 + 1]);\n            vertexWeightsBuffer.push(faceWeights[i * 4 + 2]);\n            vertexWeightsBuffer.push(faceWeights[i * 4 + 3]);\n            weightsIndicesBuffer.push(faceWeightIndices[0]);\n            weightsIndicesBuffer.push(faceWeightIndices[1]);\n            weightsIndicesBuffer.push(faceWeightIndices[2]);\n            weightsIndicesBuffer.push(faceWeightIndices[3]);\n            weightsIndicesBuffer.push(faceWeightIndices[(i - 1) * 4]);\n            weightsIndicesBuffer.push(faceWeightIndices[(i - 1) * 4 + 1]);\n            weightsIndicesBuffer.push(faceWeightIndices[(i - 1) * 4 + 2]);\n            weightsIndicesBuffer.push(faceWeightIndices[(i - 1) * 4 + 3]);\n            weightsIndicesBuffer.push(faceWeightIndices[i * 4]);\n            weightsIndicesBuffer.push(faceWeightIndices[i * 4 + 1]);\n            weightsIndicesBuffer.push(faceWeightIndices[i * 4 + 2]);\n            weightsIndicesBuffer.push(faceWeightIndices[i * 4 + 3]);\n          }\n        }\n\n        if (normalInfo) {\n          for (var i = 2; i < faceLength; i++) {\n            normalBuffer.push(faceNormals[0]);\n            normalBuffer.push(faceNormals[1]);\n            normalBuffer.push(faceNormals[2]);\n            normalBuffer.push(faceNormals[(i - 1) * 3]);\n            normalBuffer.push(faceNormals[(i - 1) * 3 + 1]);\n            normalBuffer.push(faceNormals[(i - 1) * 3 + 2]);\n            normalBuffer.push(faceNormals[i * 3]);\n            normalBuffer.push(faceNormals[i * 3 + 1]);\n            normalBuffer.push(faceNormals[i * 3 + 2]);\n          }\n        }\n\n        if (uvInfo) {\n          for (var j = 0; j < uvInfo.length; j++) {\n            if (uvsBuffer[j] === undefined) uvsBuffer[j] = [];\n\n            for (var i = 2; i < faceLength; i++) {\n              uvsBuffer[j].push(faceUVs[j][0]);\n              uvsBuffer[j].push(faceUVs[j][1]);\n              uvsBuffer[j].push(faceUVs[j][(i - 1) * 2]);\n              uvsBuffer[j].push(faceUVs[j][(i - 1) * 2 + 1]);\n              uvsBuffer[j].push(faceUVs[j][i * 2]);\n              uvsBuffer[j].push(faceUVs[j][i * 2 + 1]);\n            }\n          }\n        }\n\n        if (colorInfo) {\n          for (var i = 2; i < faceLength; i++) {\n            colorsBuffer.push(faceColors[0]);\n            colorsBuffer.push(faceColors[1]);\n            colorsBuffer.push(faceColors[2]);\n            colorsBuffer.push(faceColors[(i - 1) * 3]);\n            colorsBuffer.push(faceColors[(i - 1) * 3 + 1]);\n            colorsBuffer.push(faceColors[(i - 1) * 3 + 2]);\n            colorsBuffer.push(faceColors[i * 3]);\n            colorsBuffer.push(faceColors[i * 3 + 1]);\n            colorsBuffer.push(faceColors[i * 3 + 2]);\n          }\n        }\n\n        if (materialInfo && materialInfo.mappingType !== 'AllSame') {\n          var materialIndex = getData(polygonVertexIndex, polygonIndex, vertexIndex, materialInfo)[0];\n\n          for (var i = 2; i < faceLength; i++) {\n            materialIndexBuffer.push(materialIndex);\n            materialIndexBuffer.push(materialIndex);\n            materialIndexBuffer.push(materialIndex);\n          }\n        }\n\n        polygonIndex++;\n        endOfFace = false;\n        faceLength = 0; // reset arrays for the next face\n\n        vertexPositionIndexes = [];\n        faceNormals = [];\n        faceColors = [];\n        faceUVs = [];\n        faceWeights = [];\n        faceWeightIndices = [];\n      }\n    }\n\n    var geo = new THREE.BufferGeometry();\n    geo.name = geometryNode.name;\n    geo.addAttribute('position', new THREE.Float32BufferAttribute(vertexBuffer, 3));\n\n    if (colorsBuffer.length > 0) {\n      geo.addAttribute('color', new THREE.Float32BufferAttribute(colorsBuffer, 3));\n    }\n\n    if (deformer) {\n      geo.addAttribute('skinIndex', new THREE.Float32BufferAttribute(weightsIndicesBuffer, 4));\n      geo.addAttribute('skinWeight', new THREE.Float32BufferAttribute(vertexWeightsBuffer, 4)); // used later to bind the skeleton to the model\n\n      geo.FBX_Deformer = deformer;\n    }\n\n    if (normalBuffer.length > 0) {\n      geo.addAttribute('normal', new THREE.Float32BufferAttribute(normalBuffer, 3));\n    }\n\n    if (uvsBuffer.length > 0) {\n      for (var i = 0; i < uvsBuffer.length; i++) {\n        var name = 'uv' + (i + 1).toString();\n\n        if (i == 0) {\n          name = 'uv';\n        }\n\n        geo.addAttribute(name, new THREE.Float32BufferAttribute(uvsBuffer[i], 2));\n      }\n    }\n\n    if (materialInfo && materialInfo.mappingType !== 'AllSame') {\n      // Convert the material indices of each vertex into rendering groups on the geometry.\n      var prevMaterialIndex = materialIndexBuffer[0];\n      var startIndex = 0;\n\n      for (var i = 0; i < materialIndexBuffer.length; ++i) {\n        if (materialIndexBuffer[i] !== prevMaterialIndex) {\n          geo.addGroup(startIndex, i - startIndex, prevMaterialIndex);\n          prevMaterialIndex = materialIndexBuffer[i];\n          startIndex = i;\n        }\n      } // the loop above doesn't add the last group, do that here.\n\n\n      if (geo.groups.length > 0) {\n        var lastGroup = geo.groups[geo.groups.length - 1];\n        var lastIndex = lastGroup.start + lastGroup.count;\n\n        if (lastIndex !== materialIndexBuffer.length) {\n          geo.addGroup(lastIndex, materialIndexBuffer.length - lastIndex, prevMaterialIndex);\n        }\n      } // case where there are multiple materials but the whole geometry is only\n      // using one of them\n\n\n      if (geo.groups.length === 0) {\n        geo.addGroup(0, materialIndexBuffer.length, materialIndexBuffer[0]);\n      }\n    }\n\n    return geo;\n  } // Parse normal from FBXTree.Objects.subNodes.Geometry.subNodes.LayerElementNormal if it exists\n\n\n  function getNormals(NormalNode) {\n    var mappingType = NormalNode.properties.MappingInformationType;\n    var referenceType = NormalNode.properties.ReferenceInformationType;\n    var buffer = NormalNode.subNodes.Normals.properties.a;\n    var indexBuffer = [];\n\n    if (referenceType === 'IndexToDirect') {\n      if ('NormalIndex' in NormalNode.subNodes) {\n        indexBuffer = NormalNode.subNodes.NormalIndex.properties.a;\n      } else if ('NormalsIndex' in NormalNode.subNodes) {\n        indexBuffer = NormalNode.subNodes.NormalsIndex.properties.a;\n      }\n    }\n\n    return {\n      dataSize: 3,\n      buffer: buffer,\n      indices: indexBuffer,\n      mappingType: mappingType,\n      referenceType: referenceType\n    };\n  } // Parse UVs from FBXTree.Objects.subNodes.Geometry.subNodes.LayerElementUV if it exists\n\n\n  function getUVs(UVNode) {\n    var mappingType = UVNode.properties.MappingInformationType;\n    var referenceType = UVNode.properties.ReferenceInformationType;\n    var buffer = UVNode.subNodes.UV.properties.a;\n    var indexBuffer = [];\n\n    if (referenceType === 'IndexToDirect') {\n      indexBuffer = UVNode.subNodes.UVIndex.properties.a;\n    }\n\n    return {\n      dataSize: 2,\n      buffer: buffer,\n      indices: indexBuffer,\n      mappingType: mappingType,\n      referenceType: referenceType\n    };\n  } // Parse Vertex Colors from FBXTree.Objects.subNodes.Geometry.subNodes.LayerElementColor if it exists\n\n\n  function getColors(ColorNode) {\n    var mappingType = ColorNode.properties.MappingInformationType;\n    var referenceType = ColorNode.properties.ReferenceInformationType;\n    var buffer = ColorNode.subNodes.Colors.properties.a;\n    var indexBuffer = [];\n\n    if (referenceType === 'IndexToDirect') {\n      indexBuffer = ColorNode.subNodes.ColorIndex.properties.a;\n    }\n\n    return {\n      dataSize: 4,\n      buffer: buffer,\n      indices: indexBuffer,\n      mappingType: mappingType,\n      referenceType: referenceType\n    };\n  } // Parse mapping and material data in FBXTree.Objects.subNodes.Geometry.subNodes.LayerElementMaterial if it exists\n\n\n  function getMaterials(MaterialNode) {\n    var mappingType = MaterialNode.properties.MappingInformationType;\n    var referenceType = MaterialNode.properties.ReferenceInformationType;\n\n    if (mappingType === 'NoMappingInformation') {\n      return {\n        dataSize: 1,\n        buffer: [0],\n        indices: [0],\n        mappingType: 'AllSame',\n        referenceType: referenceType\n      };\n    }\n\n    var materialIndexBuffer = MaterialNode.subNodes.Materials.properties.a; // Since materials are stored as indices, there's a bit of a mismatch between FBX and what\n    // we expect.So we create an intermediate buffer that points to the index in the buffer,\n    // for conforming with the other functions we've written for other data.\n\n    var materialIndices = [];\n\n    for (var materialIndexBufferIndex = 0, materialIndexBufferLength = materialIndexBuffer.length; materialIndexBufferIndex < materialIndexBufferLength; ++materialIndexBufferIndex) {\n      materialIndices.push(materialIndexBufferIndex);\n    }\n\n    return {\n      dataSize: 1,\n      buffer: materialIndexBuffer,\n      indices: materialIndices,\n      mappingType: mappingType,\n      referenceType: referenceType\n    };\n  } // Functions use the infoObject and given indices to return value array of geometry.\n  // infoObject can be materialInfo, normalInfo, UVInfo or colorInfo\n  // polygonVertexIndex - Index of vertex in draw order (which index of the index buffer refers to this vertex).\n  // polygonIndex - Index of polygon in geometry.\n  // vertexIndex - Index of vertex inside vertex buffer (used because some data refers to old index buffer that we don't use anymore).\n\n\n  var dataArray = [];\n  var GetData = {\n    ByPolygonVertex: {\n      Direct: function Direct(polygonVertexIndex, polygonIndex, vertexIndex, infoObject) {\n        var from = polygonVertexIndex * infoObject.dataSize;\n        var to = polygonVertexIndex * infoObject.dataSize + infoObject.dataSize; // return infoObject.buffer.slice( from, to );\n\n        return slice(dataArray, infoObject.buffer, from, to);\n      },\n      IndexToDirect: function IndexToDirect(polygonVertexIndex, polygonIndex, vertexIndex, infoObject) {\n        var index = infoObject.indices[polygonVertexIndex];\n        var from = index * infoObject.dataSize;\n        var to = index * infoObject.dataSize + infoObject.dataSize; // return infoObject.buffer.slice( from, to );\n\n        return slice(dataArray, infoObject.buffer, from, to);\n      }\n    },\n    ByPolygon: {\n      Direct: function Direct(polygonVertexIndex, polygonIndex, vertexIndex, infoObject) {\n        var from = polygonIndex * infoObject.dataSize;\n        var to = polygonIndex * infoObject.dataSize + infoObject.dataSize; // return infoObject.buffer.slice( from, to );\n\n        return slice(dataArray, infoObject.buffer, from, to);\n      },\n      IndexToDirect: function IndexToDirect(polygonVertexIndex, polygonIndex, vertexIndex, infoObject) {\n        var index = infoObject.indices[polygonIndex];\n        var from = index * infoObject.dataSize;\n        var to = index * infoObject.dataSize + infoObject.dataSize; // return infoObject.buffer.slice( from, to );\n\n        return slice(dataArray, infoObject.buffer, from, to);\n      }\n    },\n    ByVertice: {\n      Direct: function Direct(polygonVertexIndex, polygonIndex, vertexIndex, infoObject) {\n        var from = vertexIndex * infoObject.dataSize;\n        var to = vertexIndex * infoObject.dataSize + infoObject.dataSize; // return infoObject.buffer.slice( from, to );\n\n        return slice(dataArray, infoObject.buffer, from, to);\n      }\n    },\n    AllSame: {\n      IndexToDirect: function IndexToDirect(polygonVertexIndex, polygonIndex, vertexIndex, infoObject) {\n        var from = infoObject.indices[0] * infoObject.dataSize;\n        var to = infoObject.indices[0] * infoObject.dataSize + infoObject.dataSize; // return infoObject.buffer.slice( from, to );\n\n        return slice(dataArray, infoObject.buffer, from, to);\n      }\n    }\n  };\n\n  function getData(polygonVertexIndex, polygonIndex, vertexIndex, infoObject) {\n    return GetData[infoObject.mappingType][infoObject.referenceType](polygonVertexIndex, polygonIndex, vertexIndex, infoObject);\n  } // Generate a NurbGeometry from a node in FBXTree.Objects.subNodes.Geometry\n\n\n  function parseNurbsGeometry(geometryNode) {\n    if (THREE.NURBSCurve === undefined) {\n      console.error('THREE.FBXLoader: The loader relies on THREE.NURBSCurve for any nurbs present in the model. Nurbs will show up as empty geometry.');\n      return new THREE.BufferGeometry();\n    }\n\n    var order = parseInt(geometryNode.properties.Order);\n\n    if (isNaN(order)) {\n      console.error('THREE.FBXLoader: Invalid Order %s given for geometry ID: %s', geometryNode.properties.Order, geometryNode.id);\n      return new THREE.BufferGeometry();\n    }\n\n    var degree = order - 1;\n    var knots = geometryNode.subNodes.KnotVector.properties.a;\n    var controlPoints = [];\n    var pointsValues = geometryNode.subNodes.Points.properties.a;\n\n    for (var i = 0, l = pointsValues.length; i < l; i += 4) {\n      controlPoints.push(new THREE.Vector4().fromArray(pointsValues, i));\n    }\n\n    var startKnot, endKnot;\n\n    if (geometryNode.properties.Form === 'Closed') {\n      controlPoints.push(controlPoints[0]);\n    } else if (geometryNode.properties.Form === 'Periodic') {\n      startKnot = degree;\n      endKnot = knots.length - 1 - startKnot;\n\n      for (var i = 0; i < degree; ++i) {\n        controlPoints.push(controlPoints[i]);\n      }\n    }\n\n    var curve = new THREE.NURBSCurve(degree, knots, controlPoints, startKnot, endKnot);\n    var vertices = curve.getPoints(controlPoints.length * 7);\n    var positions = new Float32Array(vertices.length * 3);\n\n    for (var i = 0, l = vertices.length; i < l; ++i) {\n      vertices[i].toArray(positions, i * 3);\n    }\n\n    var geometry = new THREE.BufferGeometry();\n    geometry.addAttribute('position', new THREE.BufferAttribute(positions, 3));\n    return geometry;\n  } // parse nodes in FBXTree.Objects.subNodes.Model and generate a THREE.Group\n\n\n  function parseScene(FBXTree, connections, deformers, geometryMap, materialMap) {\n    var sceneGraph = new THREE.Group();\n    var ModelNode = FBXTree.Objects.subNodes.Model;\n    var modelArray = [];\n    var modelMap = new Map();\n\n    for (var nodeID in ModelNode) {\n      var id = parseInt(nodeID);\n      var node = ModelNode[nodeID];\n      var conns = connections.get(id);\n      var model = null;\n\n      for (var i = 0; i < conns.parents.length; ++i) {\n        for (var FBX_ID in deformers) {\n          var deformer = deformers[FBX_ID];\n          var subDeformers = deformer.map;\n          var subDeformer = subDeformers[conns.parents[i].ID];\n\n          if (subDeformer) {\n            var model2 = model;\n            model = new THREE.Bone();\n            deformer.bones[subDeformer.index] = model; // seems like we need this not to make non-connected bone, maybe?\n            // TODO: confirm\n\n            if (model2 !== null) model.add(model2);\n          }\n        }\n      }\n\n      if (!model) {\n        switch (node.attrType) {\n          // create a THREE.PerspectiveCamera or THREE.OrthographicCamera\n          case 'Camera':\n            var cameraAttribute;\n\n            for (var childrenIndex = 0, childrenLength = conns.children.length; childrenIndex < childrenLength; ++childrenIndex) {\n              var childID = conns.children[childrenIndex].ID;\n              var attr = FBXTree.Objects.subNodes.NodeAttribute[childID];\n\n              if (attr !== undefined && attr.properties !== undefined) {\n                cameraAttribute = attr.properties;\n              }\n            }\n\n            if (cameraAttribute === undefined) {\n              model = new THREE.Object3D();\n            } else {\n              var type = 0;\n\n              if (cameraAttribute.CameraProjectionType !== undefined && cameraAttribute.CameraProjectionType.value === 1) {\n                type = 1;\n              }\n\n              var nearClippingPlane = 1;\n\n              if (cameraAttribute.NearPlane !== undefined) {\n                nearClippingPlane = cameraAttribute.NearPlane.value / 1000;\n              }\n\n              var farClippingPlane = 1000;\n\n              if (cameraAttribute.FarPlane !== undefined) {\n                farClippingPlane = cameraAttribute.FarPlane.value / 1000;\n              }\n\n              var width = window.innerWidth;\n              var height = window.innerHeight;\n\n              if (cameraAttribute.AspectWidth !== undefined && cameraAttribute.AspectHeight !== undefined) {\n                width = cameraAttribute.AspectWidth.value;\n                height = cameraAttribute.AspectHeight.value;\n              }\n\n              var aspect = width / height;\n              var fov = 45;\n\n              if (cameraAttribute.FieldOfView !== undefined) {\n                fov = cameraAttribute.FieldOfView.value;\n              }\n\n              switch (type) {\n                case 0:\n                  // Perspective\n                  model = new THREE.PerspectiveCamera(fov, aspect, nearClippingPlane, farClippingPlane);\n                  break;\n\n                case 1:\n                  // Orthographic\n                  model = new THREE.OrthographicCamera(-width / 2, width / 2, height / 2, -height / 2, nearClippingPlane, farClippingPlane);\n                  break;\n\n                default:\n                  console.warn('THREE.FBXLoader: Unknown camera type ' + type + '.');\n                  model = new THREE.Object3D();\n                  break;\n              }\n            }\n\n            break;\n          // Create a THREE.DirectionalLight, THREE.PointLight or THREE.SpotLight\n\n          case 'Light':\n            var lightAttribute;\n\n            for (var childrenIndex = 0, childrenLength = conns.children.length; childrenIndex < childrenLength; ++childrenIndex) {\n              var childID = conns.children[childrenIndex].ID;\n              var attr = FBXTree.Objects.subNodes.NodeAttribute[childID];\n\n              if (attr !== undefined && attr.properties !== undefined) {\n                lightAttribute = attr.properties;\n              }\n            }\n\n            if (lightAttribute === undefined) {\n              model = new THREE.Object3D();\n            } else {\n              var type; // LightType can be undefined for Point lights\n\n              if (lightAttribute.LightType === undefined) {\n                type = 0;\n              } else {\n                type = lightAttribute.LightType.value;\n              }\n\n              var color = 0xffffff;\n\n              if (lightAttribute.Color !== undefined) {\n                color = parseColor(lightAttribute.Color.value);\n              }\n\n              var intensity = lightAttribute.Intensity === undefined ? 1 : lightAttribute.Intensity.value / 100; // light disabled\n\n              if (lightAttribute.CastLightOnObject !== undefined && lightAttribute.CastLightOnObject.value === 0) {\n                intensity = 0;\n              }\n\n              var distance = 0;\n\n              if (lightAttribute.FarAttenuationEnd !== undefined) {\n                if (lightAttribute.EnableFarAttenuation !== undefined && lightAttribute.EnableFarAttenuation.value === 0) {\n                  distance = 0;\n                } else {\n                  distance = lightAttribute.FarAttenuationEnd.value / 1000;\n                }\n              } // TODO: could this be calculated linearly from FarAttenuationStart to FarAttenuationEnd?\n\n\n              var decay = 1;\n\n              switch (type) {\n                case 0:\n                  // Point\n                  model = new THREE.PointLight(color, intensity, distance, decay);\n                  break;\n\n                case 1:\n                  // Directional\n                  model = new THREE.DirectionalLight(color, intensity);\n                  break;\n\n                case 2:\n                  // Spot\n                  var angle = Math.PI / 3;\n\n                  if (lightAttribute.InnerAngle !== undefined) {\n                    angle = THREE.Math.degToRad(lightAttribute.InnerAngle.value);\n                  }\n\n                  var penumbra = 0;\n\n                  if (lightAttribute.OuterAngle !== undefined) {\n                    // TODO: this is not correct - FBX calculates outer and inner angle in degrees\n                    // with OuterAngle > InnerAngle && OuterAngle <= Math.PI\n                    // while three.js uses a penumbra between (0, 1) to attenuate the inner angle\n                    penumbra = THREE.Math.degToRad(lightAttribute.OuterAngle.value);\n                    penumbra = Math.max(penumbra, 1);\n                  }\n\n                  model = new THREE.SpotLight(color, intensity, distance, angle, penumbra, decay);\n                  break;\n\n                default:\n                  console.warn('THREE.FBXLoader: Unknown light type ' + lightAttribute.LightType.value + ', defaulting to a THREE.PointLight.');\n                  model = new THREE.PointLight(color, intensity);\n                  break;\n              }\n\n              if (lightAttribute.CastShadows !== undefined && lightAttribute.CastShadows.value === 1) {\n                model.castShadow = true;\n              }\n            }\n\n            break;\n\n          case 'Mesh':\n            var geometry = null;\n            var material = null;\n            var materials = [];\n\n            for (var childrenIndex = 0, childrenLength = conns.children.length; childrenIndex < childrenLength; ++childrenIndex) {\n              var child = conns.children[childrenIndex];\n\n              if (geometryMap.has(child.ID)) {\n                geometry = geometryMap.get(child.ID);\n              }\n\n              if (materialMap.has(child.ID)) {\n                materials.push(materialMap.get(child.ID));\n              }\n            }\n\n            if (materials.length > 1) {\n              material = materials;\n            } else if (materials.length > 0) {\n              material = materials[0];\n            } else {\n              material = new THREE.MeshPhongMaterial({\n                color: 0xcccccc\n              });\n              materials.push(material);\n            }\n\n            if ('color' in geometry.attributes) {\n              for (var materialIndex = 0, numMaterials = materials.length; materialIndex < numMaterials; ++materialIndex) {\n                materials[materialIndex].vertexColors = THREE.VertexColors;\n              }\n            }\n\n            if (geometry.FBX_Deformer) {\n              for (var materialsIndex = 0, materialsLength = materials.length; materialsIndex < materialsLength; ++materialsIndex) {\n                materials[materialsIndex].skinning = true;\n              }\n\n              model = new THREE.SkinnedMesh(geometry, material);\n            } else {\n              model = new THREE.Mesh(geometry, material);\n            }\n\n            break;\n\n          case 'NurbsCurve':\n            var geometry = null;\n\n            for (var childrenIndex = 0, childrenLength = conns.children.length; childrenIndex < childrenLength; ++childrenIndex) {\n              var child = conns.children[childrenIndex];\n\n              if (geometryMap.has(child.ID)) {\n                geometry = geometryMap.get(child.ID);\n              }\n            } // FBX does not list materials for Nurbs lines, so we'll just put our own in here.\n\n\n            material = new THREE.LineBasicMaterial({\n              color: 0x3300ff,\n              linewidth: 5\n            });\n            model = new THREE.Line(geometry, material);\n            break;\n\n          default:\n            model = new THREE.Group();\n            break;\n        }\n      }\n\n      model.name = THREE.PropertyBinding.sanitizeNodeName(node.attrName);\n      model.FBX_ID = id;\n      modelArray.push(model);\n      modelMap.set(id, model);\n    }\n\n    for (var modelArrayIndex = 0, modelArrayLength = modelArray.length; modelArrayIndex < modelArrayLength; ++modelArrayIndex) {\n      var model = modelArray[modelArrayIndex];\n      var node = ModelNode[model.FBX_ID];\n\n      if ('Lcl_Translation' in node.properties) {\n        model.position.fromArray(node.properties.Lcl_Translation.value);\n      }\n\n      if ('Lcl_Rotation' in node.properties) {\n        var rotation = node.properties.Lcl_Rotation.value.map(THREE.Math.degToRad);\n        rotation.push('ZYX');\n        model.rotation.fromArray(rotation);\n      }\n\n      if ('Lcl_Scaling' in node.properties) {\n        model.scale.fromArray(node.properties.Lcl_Scaling.value);\n      }\n\n      if ('PreRotation' in node.properties) {\n        var array = node.properties.PreRotation.value.map(THREE.Math.degToRad);\n        array[3] = 'ZYX';\n        var preRotations = new THREE.Euler().fromArray(array);\n        preRotations = new THREE.Quaternion().setFromEuler(preRotations);\n        var currentRotation = new THREE.Quaternion().setFromEuler(model.rotation);\n        preRotations.multiply(currentRotation);\n        model.rotation.setFromQuaternion(preRotations, 'ZYX');\n      } // allow transformed pivots - see https://github.com/mrdoob/three.js/issues/11895\n\n\n      if ('GeometricTranslation' in node.properties) {\n        var array = node.properties.GeometricTranslation.value;\n        model.traverse(function (child) {\n          if (child.geometry) {\n            child.geometry.translate(array[0], array[1], array[2]);\n          }\n        });\n      }\n\n      if ('LookAtProperty' in node.properties) {\n        var conns = connections.get(model.FBX_ID);\n\n        for (var childrenIndex = 0, childrenLength = conns.children.length; childrenIndex < childrenLength; ++childrenIndex) {\n          var child = conns.children[childrenIndex];\n\n          if (child.relationship === 'LookAtProperty') {\n            var lookAtTarget = FBXTree.Objects.subNodes.Model[child.ID];\n\n            if ('Lcl_Translation' in lookAtTarget.properties) {\n              var pos = lookAtTarget.properties.Lcl_Translation.value; // DirectionalLight, SpotLight\n\n              if (model.target !== undefined) {\n                model.target.position.set(pos[0], pos[1], pos[2]);\n                sceneGraph.add(model.target);\n              } else {\n                // Cameras and other Object3Ds\n                model.lookAt(new THREE.Vector3(pos[0], pos[1], pos[2]));\n              }\n            }\n          }\n        }\n      }\n\n      var conns = connections.get(model.FBX_ID);\n\n      for (var parentIndex = 0; parentIndex < conns.parents.length; parentIndex++) {\n        var pIndex = findIndex(modelArray, function (mod) {\n          return mod.FBX_ID === conns.parents[parentIndex].ID;\n        });\n\n        if (pIndex > -1) {\n          modelArray[pIndex].add(model);\n          break;\n        }\n      }\n\n      if (model.parent === null) {\n        sceneGraph.add(model);\n      }\n    } // Now with the bones created, we can update the skeletons and bind them to the skinned meshes.\n\n\n    sceneGraph.updateMatrixWorld(true);\n    var worldMatrices = new Map(); // Put skeleton into bind pose.\n\n    if ('Pose' in FBXTree.Objects.subNodes) {\n      var BindPoseNode = FBXTree.Objects.subNodes.Pose;\n\n      for (var nodeID in BindPoseNode) {\n        if (BindPoseNode[nodeID].attrType === 'BindPose') {\n          BindPoseNode = BindPoseNode[nodeID];\n          break;\n        }\n      }\n\n      var PoseNode = BindPoseNode.subNodes.PoseNode;\n\n      for (var PoseNodeIndex = 0, PoseNodeLength = PoseNode.length; PoseNodeIndex < PoseNodeLength; ++PoseNodeIndex) {\n        var node = PoseNode[PoseNodeIndex];\n        var rawMatWrd = new THREE.Matrix4().fromArray(node.subNodes.Matrix.properties.a);\n        worldMatrices.set(parseInt(node.properties.Node), rawMatWrd);\n      }\n    }\n\n    for (var FBX_ID in deformers) {\n      var deformer = deformers[FBX_ID];\n      var subDeformers = deformer.map;\n\n      for (var key in subDeformers) {\n        var subDeformer = subDeformers[key];\n        var subDeformerIndex = subDeformer.index;\n        var bone = deformer.bones[subDeformerIndex];\n\n        if (!worldMatrices.has(bone.FBX_ID)) {\n          break;\n        }\n\n        var mat = worldMatrices.get(bone.FBX_ID);\n        bone.matrixWorld.copy(mat);\n      } // Now that skeleton is in bind pose, bind to model.\n\n\n      deformer.skeleton = new THREE.Skeleton(deformer.bones);\n      var conns = connections.get(deformer.FBX_ID);\n      var parents = conns.parents;\n\n      for (var parentsIndex = 0, parentsLength = parents.length; parentsIndex < parentsLength; ++parentsIndex) {\n        var parent = parents[parentsIndex];\n\n        if (geometryMap.has(parent.ID)) {\n          var geoID = parent.ID;\n          var geoConns = connections.get(geoID);\n\n          for (var i = 0; i < geoConns.parents.length; ++i) {\n            if (modelMap.has(geoConns.parents[i].ID)) {\n              var model = modelMap.get(geoConns.parents[i].ID);\n              model.bind(deformer.skeleton, model.matrixWorld);\n              break;\n            }\n          }\n        }\n      }\n    } //Skeleton is now bound, return objects to starting world positions.\n\n\n    sceneGraph.updateMatrixWorld(true); // Silly hack with the animation parsing. We're gonna pretend the scene graph has a skeleton\n    // to attach animations to, since FBX treats animations as animations for the entire scene,\n    // not just for individual objects.\n\n    sceneGraph.skeleton = {\n      bones: modelArray\n    };\n    var animations = parseAnimations(FBXTree, connections, sceneGraph);\n    addAnimations(sceneGraph, animations); // Parse ambient color - if it's not set to black (default), create an ambient light\n\n    if ('GlobalSettings' in FBXTree && 'AmbientColor' in FBXTree.GlobalSettings.properties) {\n      var ambientColor = FBXTree.GlobalSettings.properties.AmbientColor.value;\n      var r = ambientColor[0];\n      var g = ambientColor[1];\n      var b = ambientColor[2];\n\n      if (r !== 0 || g !== 0 || b !== 0) {\n        var color = new THREE.Color(r, g, b);\n        sceneGraph.add(new THREE.AmbientLight(color, 1));\n      }\n    }\n\n    return sceneGraph;\n  } // Parses animation information from nodes in\n  // FBXTree.Objects.subNodes.AnimationCurve ( connected to AnimationCurveNode )\n  // FBXTree.Objects.subNodes.AnimationCurveNode ( connected to AnimationLayer and an animated property in some other node )\n  // FBXTree.Objects.subNodes.AnimationLayer ( connected to AnimationStack )\n  // FBXTree.Objects.subNodes.AnimationStack\n\n\n  function parseAnimations(FBXTree, connections, sceneGraph) {\n    var rawNodes = FBXTree.Objects.subNodes.AnimationCurveNode;\n    var rawCurves = FBXTree.Objects.subNodes.AnimationCurve;\n    var rawLayers = FBXTree.Objects.subNodes.AnimationLayer;\n    var rawStacks = FBXTree.Objects.subNodes.AnimationStack;\n    var fps = 30; // default framerate\n\n    if ('GlobalSettings' in FBXTree && 'TimeMode' in FBXTree.GlobalSettings.properties) {\n      /* Autodesk time mode documentation can be found here:\r\n      *\thttp://docs.autodesk.com/FBX/2014/ENU/FBX-SDK-Documentation/index.html?url=cpp_ref/class_fbx_time.html,topicNumber=cpp_ref_class_fbx_time_html\r\n      */\n      var timeModeEnum = [30, // 0: eDefaultMode\n      120, // 1: eFrames120\n      100, // 2: eFrames100\n      60, // 3: eFrames60\n      50, // 4: eFrames50\n      48, // 5: eFrames48\n      30, // 6: eFrames30 (black and white NTSC )\n      30, // 7: eFrames30Drop\n      29.97, // 8: eNTSCDropFrame\n      29.97, // 90: eNTSCFullFrame\n      25, // 10: ePal ( PAL/SECAM )\n      24, // 11: eFrames24 (Film/Cinema)\n      1, // 12: eFrames1000 (use for date time))\n      23.976, // 13: eFilmFullFrame\n      30, // 14: eCustom: use GlobalSettings.properties.CustomFrameRate.value\n      96, // 15: eFrames96\n      72, // 16: eFrames72\n      59.94 // 17: eFrames59dot94\n      ];\n      var eMode = FBXTree.GlobalSettings.properties.TimeMode.value;\n\n      if (eMode === 14) {\n        if ('CustomFrameRate' in FBXTree.GlobalSettings.properties) {\n          fps = FBXTree.GlobalSettings.properties.CustomFrameRate.value;\n          fps = fps === -1 ? 30 : fps;\n        }\n      } else if (eMode <= 17) {\n        // for future proofing - if more eModes get added, they will default to 30fps\n        fps = timeModeEnum[eMode];\n      }\n    }\n\n    var returnObject = {\n      curves: new Map(),\n      layers: {},\n      stacks: {},\n      length: 0,\n      fps: fps,\n      frames: 0\n    };\n    var animationCurveNodes = [];\n\n    for (var nodeID in rawNodes) {\n      if (nodeID.match(/\\d+/)) {\n        var animationNode = parseAnimationNode(FBXTree, rawNodes[nodeID], connections, sceneGraph);\n        animationCurveNodes.push(animationNode);\n      }\n    }\n\n    var tmpMap = new Map();\n\n    for (var animationCurveNodeIndex = 0; animationCurveNodeIndex < animationCurveNodes.length; ++animationCurveNodeIndex) {\n      if (animationCurveNodes[animationCurveNodeIndex] === null) {\n        continue;\n      }\n\n      tmpMap.set(animationCurveNodes[animationCurveNodeIndex].id, animationCurveNodes[animationCurveNodeIndex]);\n    }\n\n    var animationCurves = [];\n\n    for (nodeID in rawCurves) {\n      if (nodeID.match(/\\d+/)) {\n        var animationCurve = parseAnimationCurve(rawCurves[nodeID]); // seems like this check would be necessary?\n\n        if (!connections.has(animationCurve.id)) continue;\n        animationCurves.push(animationCurve);\n        var firstParentConn = connections.get(animationCurve.id).parents[0];\n        var firstParentID = firstParentConn.ID;\n        var firstParentRelationship = firstParentConn.relationship;\n        var axis = '';\n\n        if (firstParentRelationship.match(/X/)) {\n          axis = 'x';\n        } else if (firstParentRelationship.match(/Y/)) {\n          axis = 'y';\n        } else if (firstParentRelationship.match(/Z/)) {\n          axis = 'z';\n        } else {\n          continue;\n        }\n\n        tmpMap.get(firstParentID).curves[axis] = animationCurve;\n      }\n    }\n\n    tmpMap.forEach(function (curveNode) {\n      var id = curveNode.containerBoneID;\n\n      if (!returnObject.curves.has(id)) {\n        returnObject.curves.set(id, {\n          T: null,\n          R: null,\n          S: null\n        });\n      }\n\n      returnObject.curves.get(id)[curveNode.attr] = curveNode;\n\n      if (curveNode.attr === 'R') {\n        var curves = curveNode.curves; // Some FBX files have an AnimationCurveNode\n        // which isn't any connected to any AnimationCurve.\n        // Setting animation parameter for them here.\n\n        if (curves.x === null) {\n          curves.x = {\n            version: null,\n            times: [0.0],\n            values: [0.0]\n          };\n        }\n\n        if (curves.y === null) {\n          curves.y = {\n            version: null,\n            times: [0.0],\n            values: [0.0]\n          };\n        }\n\n        if (curves.z === null) {\n          curves.z = {\n            version: null,\n            times: [0.0],\n            values: [0.0]\n          };\n        }\n\n        curves.x.values = curves.x.values.map(THREE.Math.degToRad);\n        curves.y.values = curves.y.values.map(THREE.Math.degToRad);\n        curves.z.values = curves.z.values.map(THREE.Math.degToRad);\n\n        if (curveNode.preRotations !== null) {\n          var preRotations = new THREE.Euler().setFromVector3(curveNode.preRotations, 'ZYX');\n          preRotations = new THREE.Quaternion().setFromEuler(preRotations);\n          var frameRotation = new THREE.Euler();\n          var frameRotationQuaternion = new THREE.Quaternion();\n\n          for (var frame = 0; frame < curves.x.times.length; ++frame) {\n            frameRotation.set(curves.x.values[frame], curves.y.values[frame], curves.z.values[frame], 'ZYX');\n            frameRotationQuaternion.setFromEuler(frameRotation).premultiply(preRotations);\n            frameRotation.setFromQuaternion(frameRotationQuaternion, 'ZYX');\n            curves.x.values[frame] = frameRotation.x;\n            curves.y.values[frame] = frameRotation.y;\n            curves.z.values[frame] = frameRotation.z;\n          }\n        }\n      }\n    });\n\n    for (var nodeID in rawLayers) {\n      var layer = [];\n      var children = connections.get(parseInt(nodeID)).children;\n\n      for (var childIndex = 0; childIndex < children.length; childIndex++) {\n        // Skip lockInfluenceWeights\n        if (tmpMap.has(children[childIndex].ID)) {\n          var curveNode = tmpMap.get(children[childIndex].ID);\n          var boneID = curveNode.containerBoneID;\n\n          if (layer[boneID] === undefined) {\n            layer[boneID] = {\n              T: null,\n              R: null,\n              S: null\n            };\n          }\n\n          layer[boneID][curveNode.attr] = curveNode;\n        }\n      }\n\n      returnObject.layers[nodeID] = layer;\n    }\n\n    for (var nodeID in rawStacks) {\n      var layers = [];\n      var children = connections.get(parseInt(nodeID)).children;\n      var timestamps = {\n        max: 0,\n        min: Number.MAX_VALUE\n      };\n\n      for (var childIndex = 0; childIndex < children.length; ++childIndex) {\n        var currentLayer = returnObject.layers[children[childIndex].ID];\n\n        if (currentLayer !== undefined) {\n          layers.push(currentLayer);\n\n          for (var currentLayerIndex = 0, currentLayerLength = currentLayer.length; currentLayerIndex < currentLayerLength; ++currentLayerIndex) {\n            var layer = currentLayer[currentLayerIndex];\n\n            if (layer) {\n              getCurveNodeMaxMinTimeStamps(layer, timestamps);\n            }\n          }\n        }\n      } // Do we have an animation clip with actual length?\n\n\n      if (timestamps.max > timestamps.min) {\n        returnObject.stacks[nodeID] = {\n          name: rawStacks[nodeID].attrName,\n          layers: layers,\n          length: timestamps.max - timestamps.min,\n          frames: (timestamps.max - timestamps.min) * returnObject.fps\n        };\n      }\n    }\n\n    return returnObject;\n  }\n\n  function parseAnimationNode(FBXTree, animationCurveNode, connections, sceneGraph) {\n    var rawModels = FBXTree.Objects.subNodes.Model;\n    var returnObject = {\n      id: animationCurveNode.id,\n      attr: animationCurveNode.attrName,\n      internalID: animationCurveNode.id,\n      attrX: false,\n      attrY: false,\n      attrZ: false,\n      containerBoneID: -1,\n      containerID: -1,\n      curves: {\n        x: null,\n        y: null,\n        z: null\n      },\n      preRotations: null\n    };\n\n    if (returnObject.attr.match(/S|R|T/)) {\n      for (var attributeKey in animationCurveNode.properties) {\n        if (attributeKey.match(/X/)) {\n          returnObject.attrX = true;\n        }\n\n        if (attributeKey.match(/Y/)) {\n          returnObject.attrY = true;\n        }\n\n        if (attributeKey.match(/Z/)) {\n          returnObject.attrZ = true;\n        }\n      }\n    } else {\n      return null;\n    }\n\n    var conns = connections.get(returnObject.id);\n    var containerIndices = conns.parents;\n\n    for (var containerIndicesIndex = containerIndices.length - 1; containerIndicesIndex >= 0; --containerIndicesIndex) {\n      var boneID = findIndex(sceneGraph.skeleton.bones, function (bone) {\n        return bone.FBX_ID === containerIndices[containerIndicesIndex].ID;\n      });\n\n      if (boneID > -1) {\n        returnObject.containerBoneID = boneID;\n        returnObject.containerID = containerIndices[containerIndicesIndex].ID;\n        var model = rawModels[returnObject.containerID.toString()];\n\n        if ('PreRotation' in model.properties) {\n          returnObject.preRotations = parseVector3(model.properties.PreRotation).multiplyScalar(Math.PI / 180);\n        }\n\n        break;\n      }\n    }\n\n    return returnObject;\n  }\n\n  function parseAnimationCurve(animationCurve) {\n    return {\n      version: null,\n      id: animationCurve.id,\n      internalID: animationCurve.id,\n      times: animationCurve.subNodes.KeyTime.properties.a.map(convertFBXTimeToSeconds),\n      values: animationCurve.subNodes.KeyValueFloat.properties.a,\n      attrFlag: animationCurve.subNodes.KeyAttrFlags.properties.a,\n      attrData: animationCurve.subNodes.KeyAttrDataFloat.properties.a\n    };\n  } // Sets the maxTimeStamp and minTimeStamp variables if it has timeStamps that are either larger or smaller\n  // than the max or min respectively.\n\n\n  function getCurveNodeMaxMinTimeStamps(layer, timestamps) {\n    if (layer.R) {\n      getCurveMaxMinTimeStamp(layer.R.curves, timestamps);\n    }\n\n    if (layer.S) {\n      getCurveMaxMinTimeStamp(layer.S.curves, timestamps);\n    }\n\n    if (layer.T) {\n      getCurveMaxMinTimeStamp(layer.T.curves, timestamps);\n    }\n  } // Sets the maxTimeStamp and minTimeStamp if one of the curve's time stamps\n  // exceeds the maximum or minimum.\n\n\n  function getCurveMaxMinTimeStamp(curve, timestamps) {\n    if (curve.x) {\n      getCurveAxisMaxMinTimeStamps(curve.x, timestamps);\n    }\n\n    if (curve.y) {\n      getCurveAxisMaxMinTimeStamps(curve.y, timestamps);\n    }\n\n    if (curve.z) {\n      getCurveAxisMaxMinTimeStamps(curve.z, timestamps);\n    }\n  } // Sets the maxTimeStamp and minTimeStamp if one of its timestamps exceeds the maximum or minimum.\n\n\n  function getCurveAxisMaxMinTimeStamps(axis, timestamps) {\n    timestamps.max = axis.times[axis.times.length - 1] > timestamps.max ? axis.times[axis.times.length - 1] : timestamps.max;\n    timestamps.min = axis.times[0] < timestamps.min ? axis.times[0] : timestamps.min;\n  }\n\n  function addAnimations(group, animations) {\n    if (group.animations === undefined) {\n      group.animations = [];\n    }\n\n    var stacks = animations.stacks;\n\n    for (var key in stacks) {\n      var stack = stacks[key];\n      var animationData = {\n        name: stack.name,\n        fps: animations.fps,\n        length: stack.length,\n        hierarchy: []\n      };\n      var bones = group.skeleton.bones;\n\n      for (var bonesIndex = 0, bonesLength = bones.length; bonesIndex < bonesLength; ++bonesIndex) {\n        var bone = bones[bonesIndex];\n        var name = bone.name.replace(/.*:/, '');\n        var parentIndex = findIndex(bones, function (parentBone) {\n          return bone.parent === parentBone;\n        });\n        animationData.hierarchy.push({\n          parent: parentIndex,\n          name: name,\n          keys: []\n        });\n      }\n\n      for (var frame = 0; frame <= stack.frames; frame++) {\n        for (var bonesIndex = 0, bonesLength = bones.length; bonesIndex < bonesLength; ++bonesIndex) {\n          var bone = bones[bonesIndex];\n          var boneIndex = bonesIndex;\n          var animationNode = stack.layers[0][boneIndex];\n\n          for (var hierarchyIndex = 0, hierarchyLength = animationData.hierarchy.length; hierarchyIndex < hierarchyLength; ++hierarchyIndex) {\n            var node = animationData.hierarchy[hierarchyIndex];\n\n            if (node.name === bone.name) {\n              node.keys.push(generateKey(animations, animationNode, bone, frame));\n            }\n          }\n        }\n      }\n\n      group.animations.push(THREE.AnimationClip.parseAnimation(animationData, bones));\n    }\n  }\n\n  var euler = new THREE.Euler();\n  var quaternion = new THREE.Quaternion();\n\n  function generateKey(animations, animationNode, bone, frame) {\n    var key = {\n      time: frame / animations.fps,\n      pos: bone.position.toArray(),\n      rot: bone.quaternion.toArray(),\n      scl: bone.scale.toArray()\n    };\n    if (animationNode === undefined) return key;\n    euler.setFromQuaternion(bone.quaternion, 'ZYX', false);\n\n    try {\n      if (hasCurve(animationNode, 'T') && hasKeyOnFrame(animationNode.T, frame)) {\n        if (animationNode.T.curves.x.values[frame]) {\n          key.pos[0] = animationNode.T.curves.x.values[frame];\n        }\n\n        if (animationNode.T.curves.y.values[frame]) {\n          key.pos[1] = animationNode.T.curves.y.values[frame];\n        }\n\n        if (animationNode.T.curves.z.values[frame]) {\n          key.pos[2] = animationNode.T.curves.z.values[frame];\n        }\n      }\n\n      if (hasCurve(animationNode, 'R') && hasKeyOnFrame(animationNode.R, frame)) {\n        // Only update the euler's values if rotation is defined for the axis on this frame\n        if (animationNode.R.curves.x.values[frame]) {\n          euler.x = animationNode.R.curves.x.values[frame];\n        }\n\n        if (animationNode.R.curves.y.values[frame]) {\n          euler.y = animationNode.R.curves.y.values[frame];\n        }\n\n        if (animationNode.R.curves.z.values[frame]) {\n          euler.z = animationNode.R.curves.z.values[frame];\n        }\n\n        quaternion.setFromEuler(euler);\n        key.rot = quaternion.toArray();\n      }\n\n      if (hasCurve(animationNode, 'S') && hasKeyOnFrame(animationNode.S, frame)) {\n        if (animationNode.T.curves.x.values[frame]) {\n          key.scl[0] = animationNode.S.curves.x.values[frame];\n        }\n\n        if (animationNode.T.curves.y.values[frame]) {\n          key.scl[1] = animationNode.S.curves.y.values[frame];\n        }\n\n        if (animationNode.T.curves.z.values[frame]) {\n          key.scl[2] = animationNode.S.curves.z.values[frame];\n        }\n      }\n    } catch (error) {\n      // Curve is not fully plotted.\n      console.log('THREE.FBXLoader: ', bone);\n      console.log('THREE.FBXLoader: ', error);\n    }\n\n    return key;\n  }\n\n  var AXES = ['x', 'y', 'z'];\n\n  function hasCurve(animationNode, attribute) {\n    if (animationNode === undefined) {\n      return false;\n    }\n\n    var attributeNode = animationNode[attribute];\n\n    if (!attributeNode) {\n      return false;\n    }\n\n    return AXES.every(function (key) {\n      return attributeNode.curves[key] !== null;\n    });\n  }\n\n  function hasKeyOnFrame(attributeNode, frame) {\n    return AXES.every(function (key) {\n      return isKeyExistOnFrame(attributeNode.curves[key], frame);\n    });\n  }\n\n  function isKeyExistOnFrame(curve, frame) {\n    return curve.values[frame] !== undefined;\n  } // parse an FBX file in ASCII format\n\n\n  function TextParser() {}\n\n  Object.assign(TextParser.prototype, {\n    getPrevNode: function getPrevNode() {\n      return this.nodeStack[this.currentIndent - 2];\n    },\n    getCurrentNode: function getCurrentNode() {\n      return this.nodeStack[this.currentIndent - 1];\n    },\n    getCurrentProp: function getCurrentProp() {\n      return this.currentProp;\n    },\n    pushStack: function pushStack(node) {\n      this.nodeStack.push(node);\n      this.currentIndent += 1;\n    },\n    popStack: function popStack() {\n      this.nodeStack.pop();\n      this.currentIndent -= 1;\n    },\n    setCurrentProp: function setCurrentProp(val, name) {\n      this.currentProp = val;\n      this.currentPropName = name;\n    },\n    parse: function parse(text) {\n      this.currentIndent = 0;\n      this.allNodes = new FBXTree();\n      this.nodeStack = [];\n      this.currentProp = [];\n      this.currentPropName = '';\n      var split = text.split('\\n');\n\n      for (var lineNum = 0, lineLength = split.length; lineNum < lineLength; lineNum++) {\n        var l = split[lineNum]; // skip comment line\n\n        if (l.match(/^[\\s\\t]*;/)) {\n          continue;\n        } // skip empty line\n\n\n        if (l.match(/^[\\s\\t]*$/)) {\n          continue;\n        } // beginning of node\n\n\n        var beginningOfNodeExp = new RegExp('^\\\\t{' + this.currentIndent + '}(\\\\w+):(.*){', '');\n        var match = l.match(beginningOfNodeExp);\n\n        if (match) {\n          var nodeName = match[1].trim().replace(/^\"/, '').replace(/\"$/, '');\n          var nodeAttrs = match[2].split(',');\n\n          for (var i = 0, l = nodeAttrs.length; i < l; i++) {\n            nodeAttrs[i] = nodeAttrs[i].trim().replace(/^\"/, '').replace(/\"$/, '');\n          }\n\n          this.parseNodeBegin(l, nodeName, nodeAttrs || null);\n          continue;\n        } // node's property\n\n\n        var propExp = new RegExp('^\\\\t{' + this.currentIndent + '}(\\\\w+):[\\\\s\\\\t\\\\r\\\\n](.*)');\n        var match = l.match(propExp);\n\n        if (match) {\n          var propName = match[1].replace(/^\"/, '').replace(/\"$/, '').trim();\n          var propValue = match[2].replace(/^\"/, '').replace(/\"$/, '').trim(); // for special case: base64 image data follows \"Content: ,\" line\n          //\tContent: ,\n          //\t \"iVB...\"\n\n          if (propName === 'Content' && propValue === ',') {\n            propValue = split[++lineNum].replace(/\"/g, '').replace(/,$/, '').trim();\n          }\n\n          this.parseNodeProperty(l, propName, propValue);\n          continue;\n        } // end of node\n\n\n        var endOfNodeExp = new RegExp('^\\\\t{' + (this.currentIndent - 1) + '}}');\n\n        if (l.match(endOfNodeExp)) {\n          this.nodeEnd();\n          continue;\n        } // large arrays are split over multiple lines terminated with a ',' character\n        // if this is encountered the line needs to be joined to the previous line\n\n\n        if (l.match(/^[^\\s\\t}]/)) {\n          this.parseNodePropertyContinued(l);\n        }\n      }\n\n      return this.allNodes;\n    },\n    parseNodeBegin: function parseNodeBegin(line, nodeName, nodeAttrs) {\n      var node = {\n        'name': nodeName,\n        properties: {},\n        'subNodes': {}\n      };\n      var attrs = this.parseNodeAttr(nodeAttrs);\n      var currentNode = this.getCurrentNode(); // a top node\n\n      if (this.currentIndent === 0) {\n        this.allNodes.add(nodeName, node);\n      } else {\n        // a subnode\n        // if the subnode already exists, append it\n        if (nodeName in currentNode.subNodes) {\n          var tmp = currentNode.subNodes[nodeName];\n\n          if (this.isFlattenNode(currentNode.subNodes[nodeName])) {\n            if (attrs.id === '') {\n              currentNode.subNodes[nodeName] = [];\n              currentNode.subNodes[nodeName].push(tmp);\n            } else {\n              currentNode.subNodes[nodeName] = {};\n              currentNode.subNodes[nodeName][tmp.id] = tmp;\n            }\n          }\n\n          if (attrs.id === '') {\n            currentNode.subNodes[nodeName].push(node);\n          } else {\n            currentNode.subNodes[nodeName][attrs.id] = node;\n          }\n        } else if (typeof attrs.id === 'number' || attrs.id.match(/^\\d+$/)) {\n          currentNode.subNodes[nodeName] = {};\n          currentNode.subNodes[nodeName][attrs.id] = node;\n        } else {\n          currentNode.subNodes[nodeName] = node;\n        }\n      } // for this\t↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n      // NodeAttribute: 1001463072, \"NodeAttribute::\", \"LimbNode\" {\n\n\n      if (nodeAttrs) {\n        node.id = attrs.id;\n        node.attrName = attrs.name;\n        node.attrType = attrs.type;\n      }\n\n      this.pushStack(node);\n    },\n    parseNodeAttr: function parseNodeAttr(attrs) {\n      var id = attrs[0];\n\n      if (attrs[0] !== '') {\n        id = parseInt(attrs[0]);\n\n        if (isNaN(id)) {\n          id = attrs[0];\n        }\n      }\n\n      var name = '',\n          type = '';\n\n      if (attrs.length > 1) {\n        name = attrs[1].replace(/^(\\w+)::/, '');\n        type = attrs[2];\n      }\n\n      return {\n        id: id,\n        name: name,\n        type: type\n      };\n    },\n    parseNodeProperty: function parseNodeProperty(line, propName, propValue) {\n      var currentNode = this.getCurrentNode();\n      var parentName = currentNode.name; // special case where the parent node is something like \"Properties70\"\n      // these children nodes must treated carefully\n\n      if (parentName !== undefined) {\n        var propMatch = parentName.match(/Properties(\\d)+/);\n\n        if (propMatch) {\n          this.parseNodeSpecialProperty(line, propName, propValue);\n          return;\n        }\n      } // Connections\n\n\n      if (propName === 'C') {\n        var connProps = propValue.split(',').slice(1);\n        var from = parseInt(connProps[0]);\n        var to = parseInt(connProps[1]);\n        var rest = propValue.split(',').slice(3);\n        rest = rest.map(function (elem) {\n          return elem.trim().replace(/^\"/, '');\n        });\n        propName = 'connections';\n        propValue = [from, to];\n        append(propValue, rest);\n\n        if (currentNode.properties[propName] === undefined) {\n          currentNode.properties[propName] = [];\n        }\n      } // Node\n\n\n      if (propName === 'Node') {\n        var id = parseInt(propValue);\n        currentNode.properties.id = id;\n        currentNode.id = id;\n      } // already exists in properties, then append this\n\n\n      if (propName in currentNode.properties) {\n        if (Array.isArray(currentNode.properties[propName])) {\n          currentNode.properties[propName].push(propValue);\n        } else {\n          currentNode.properties[propName] += propValue;\n        }\n      } else {\n        if (Array.isArray(currentNode.properties[propName])) {\n          currentNode.properties[propName].push(propValue);\n        } else {\n          currentNode.properties[propName] = propValue;\n        }\n      }\n\n      this.setCurrentProp(currentNode.properties, propName); // convert string to array, unless it ends in ',' in which case more will be added to it\n\n      if (propName === 'a' && propValue.slice(-1) !== ',') {\n        currentNode.properties.a = parseNumberArray(propValue);\n      }\n    },\n    parseNodePropertyContinued: function parseNodePropertyContinued(line) {\n      this.currentProp[this.currentPropName] += line; // if the line doesn't end in ',' we have reached the end of the property value\n      // so convert the string to an array\n\n      if (line.slice(-1) !== ',') {\n        var currentNode = this.getCurrentNode();\n        currentNode.properties.a = parseNumberArray(currentNode.properties.a);\n      }\n    },\n    parseNodeSpecialProperty: function parseNodeSpecialProperty(line, propName, propValue) {\n      // split this\n      // P: \"Lcl Scaling\", \"Lcl Scaling\", \"\", \"A\",1,1,1\n      // into array like below\n      // [\"Lcl Scaling\", \"Lcl Scaling\", \"\", \"A\", \"1,1,1\" ]\n      var props = propValue.split('\",');\n\n      for (var i = 0, l = props.length; i < l; i++) {\n        props[i] = props[i].trim().replace(/^\\\"/, '').replace(/\\s/, '_');\n      }\n\n      var innerPropName = props[0];\n      var innerPropType1 = props[1];\n      var innerPropType2 = props[2];\n      var innerPropFlag = props[3];\n      var innerPropValue = props[4]; // cast value to its type\n\n      switch (innerPropType1) {\n        case 'int':\n        case 'enum':\n        case 'bool':\n        case 'ULongLong':\n          innerPropValue = parseInt(innerPropValue);\n          break;\n\n        case 'double':\n        case 'Number':\n        case 'FieldOfView':\n          innerPropValue = parseFloat(innerPropValue);\n          break;\n\n        case 'ColorRGB':\n        case 'Vector3D':\n        case 'Lcl_Translation':\n        case 'Lcl_Rotation':\n        case 'Lcl_Scaling':\n          innerPropValue = parseNumberArray(innerPropValue);\n          break;\n      } // CAUTION: these props must append to parent's parent\n\n\n      this.getPrevNode().properties[innerPropName] = {\n        'type': innerPropType1,\n        'type2': innerPropType2,\n        'flag': innerPropFlag,\n        'value': innerPropValue\n      };\n      this.setCurrentProp(this.getPrevNode().properties, innerPropName);\n    },\n    nodeEnd: function nodeEnd() {\n      this.popStack();\n    },\n    isFlattenNode: function isFlattenNode(node) {\n      return 'subNodes' in node && 'properties' in node ? true : false;\n    }\n  }); // Parse an FBX file in Binary format\n\n  function BinaryParser() {}\n\n  Object.assign(BinaryParser.prototype, {\n    parse: function parse(buffer) {\n      var reader = new BinaryReader(buffer);\n      reader.skip(23); // skip magic 23 bytes\n\n      var version = reader.getUint32(); //console.log( 'THREE.FBXLoader: FBX binary version: ' + version );\n\n      var allNodes = new FBXTree();\n      var count = 0;\n\n      while (!this.endOfContent(reader)) {\n        try {\n          var node = this.parseNode(reader, version);\n\n          if (node !== null) {\n            allNodes.add(node.name, node);\n          }\n        } catch (err) {\n          console.log(err);\n        }\n      }\n\n      return allNodes;\n    },\n    // Check if reader has reached the end of content.\n    endOfContent: function endOfContent(reader) {\n      // footer size: 160bytes + 16-byte alignment padding\n      // - 16bytes: magic\n      // - padding til 16-byte alignment (at least 1byte?)\n      //\t(seems like some exporters embed fixed 15 or 16bytes?)\n      // - 4bytes: magic\n      // - 4bytes: version\n      // - 120bytes: zero\n      // - 16bytes: magic\n      if (reader.size() % 16 === 0) {\n        return (reader.getOffset() + 160 + 16 & ~0xf) >= reader.size();\n      } else {\n        return reader.getOffset() + 160 + 16 >= reader.size();\n      }\n    },\n    parseNode: function parseNode(reader, version) {\n      // The first three data sizes depends on version.\n      var endOffset = version >= 7500 ? reader.getUint64() : reader.getUint32();\n      var numProperties = version >= 7500 ? reader.getUint64() : reader.getUint32(); // note: do not remove this even if you get a linter warning as it moves the buffer forward\n\n      var propertyListLen = version >= 7500 ? reader.getUint64() : reader.getUint32();\n      var nameLen = reader.getUint8();\n      var name = reader.getString(nameLen); // Regards this node as NULL-record if endOffset is zero\n\n      if (endOffset === 0) return null;\n      var propertyList = [];\n\n      for (var i = 0; i < numProperties; i++) {\n        propertyList.push(this.parseProperty(reader));\n      } // Regards the first three elements in propertyList as id, attrName, and attrType\n\n\n      var id = propertyList.length > 0 ? propertyList[0] : '';\n      var attrName = propertyList.length > 1 ? propertyList[1] : '';\n      var attrType = propertyList.length > 2 ? propertyList[2] : '';\n      var subNodes = {};\n      var properties = {};\n      var isSingleProperty = false; // check if this node represents just a single property\n      // like (name, 0) set or (name2, [0, 1, 2]) set of {name: 0, name2: [0, 1, 2]}\n\n      if (numProperties === 1 && reader.getOffset() === endOffset) {\n        isSingleProperty = true;\n      }\n\n      while (endOffset > reader.getOffset()) {\n        var node = this.parseNode(reader, version);\n        if (node === null) continue; // special case: child node is single property\n\n        if (node.singleProperty === true) {\n          var value = node.propertyList[0];\n\n          if (Array.isArray(value)) {\n            subNodes[node.name] = node;\n            node.properties.a = value;\n          } else {\n            properties[node.name] = value;\n          }\n\n          continue;\n        } // parse connections\n\n\n        if (name === 'Connections' && node.name === 'C') {\n          var array = [];\n\n          for (var i = 1, il = node.propertyList.length; i < il; i++) {\n            array[i - 1] = node.propertyList[i];\n          }\n\n          if (properties.connections === undefined) {\n            properties.connections = [];\n          }\n\n          properties.connections.push(array);\n          continue;\n        } // special case: child node is Properties\\d+\n        // move child node's properties to this node.\n\n\n        if (node.name.match(/^Properties\\d+$/)) {\n          var keys = Object.keys(node.properties);\n\n          for (var i = 0, il = keys.length; i < il; i++) {\n            var key = keys[i];\n            properties[key] = node.properties[key];\n          }\n\n          continue;\n        } // parse 'properties70'\n\n\n        if (name.match(/^Properties\\d+$/) && node.name === 'P') {\n          var innerPropName = node.propertyList[0];\n          var innerPropType1 = node.propertyList[1];\n          var innerPropType2 = node.propertyList[2];\n          var innerPropFlag = node.propertyList[3];\n          var innerPropValue;\n          if (innerPropName.indexOf('Lcl ') === 0) innerPropName = innerPropName.replace('Lcl ', 'Lcl_');\n          if (innerPropType1.indexOf('Lcl ') === 0) innerPropType1 = innerPropType1.replace('Lcl ', 'Lcl_');\n\n          if (innerPropType1 === 'ColorRGB' || innerPropType1 === 'Vector' || innerPropType1 === 'Vector3D' || innerPropType1.indexOf('Lcl_') === 0) {\n            innerPropValue = [node.propertyList[4], node.propertyList[5], node.propertyList[6]];\n          } else {\n            innerPropValue = node.propertyList[4];\n          } // this will be copied to parent, see above\n\n\n          properties[innerPropName] = {\n            'type': innerPropType1,\n            'type2': innerPropType2,\n            'flag': innerPropFlag,\n            'value': innerPropValue\n          };\n          continue;\n        }\n\n        if (subNodes[node.name] === undefined) {\n          if (typeof node.id === 'number') {\n            subNodes[node.name] = {};\n            subNodes[node.name][node.id] = node;\n          } else {\n            subNodes[node.name] = node;\n          }\n        } else {\n          if (node.id === '') {\n            if (!Array.isArray(subNodes[node.name])) {\n              subNodes[node.name] = [subNodes[node.name]];\n            }\n\n            subNodes[node.name].push(node);\n          } else {\n            if (subNodes[node.name][node.id] === undefined) {\n              subNodes[node.name][node.id] = node;\n            } else {\n              // conflict id. irregular?\n              if (!Array.isArray(subNodes[node.name][node.id])) {\n                subNodes[node.name][node.id] = [subNodes[node.name][node.id]];\n              }\n\n              subNodes[node.name][node.id].push(node);\n            }\n          }\n        }\n      }\n\n      return {\n        singleProperty: isSingleProperty,\n        id: id,\n        attrName: attrName,\n        attrType: attrType,\n        name: name,\n        properties: properties,\n        propertyList: propertyList,\n        // raw property list used by parent\n        subNodes: subNodes\n      };\n    },\n    parseProperty: function parseProperty(reader) {\n      var type = reader.getChar();\n\n      switch (type) {\n        case 'C':\n          return reader.getBoolean();\n\n        case 'D':\n          return reader.getFloat64();\n\n        case 'F':\n          return reader.getFloat32();\n\n        case 'I':\n          return reader.getInt32();\n\n        case 'L':\n          return reader.getInt64();\n\n        case 'R':\n          var length = reader.getUint32();\n          return reader.getArrayBuffer(length);\n\n        case 'S':\n          var length = reader.getUint32();\n          return reader.getString(length);\n\n        case 'Y':\n          return reader.getInt16();\n\n        case 'b':\n        case 'c':\n        case 'd':\n        case 'f':\n        case 'i':\n        case 'l':\n          var arrayLength = reader.getUint32();\n          var encoding = reader.getUint32(); // 0: non-compressed, 1: compressed\n\n          var compressedLength = reader.getUint32();\n\n          if (encoding === 0) {\n            switch (type) {\n              case 'b':\n              case 'c':\n                return reader.getBooleanArray(arrayLength);\n\n              case 'd':\n                return reader.getFloat64Array(arrayLength);\n\n              case 'f':\n                return reader.getFloat32Array(arrayLength);\n\n              case 'i':\n                return reader.getInt32Array(arrayLength);\n\n              case 'l':\n                return reader.getInt64Array(arrayLength);\n            }\n          }\n\n          if (window.Zlib === undefined) {\n            throw new Error('THREE.FBXLoader: External library Inflate.min.js required, obtain or import from https://github.com/imaya/zlib.js');\n          }\n\n          var inflate = new Zlib.Inflate(new Uint8Array(reader.getArrayBuffer(compressedLength))); // eslint-disable-line no-undef\n\n          var reader2 = new BinaryReader(inflate.decompress().buffer);\n\n          switch (type) {\n            case 'b':\n            case 'c':\n              return reader2.getBooleanArray(arrayLength);\n\n            case 'd':\n              return reader2.getFloat64Array(arrayLength);\n\n            case 'f':\n              return reader2.getFloat32Array(arrayLength);\n\n            case 'i':\n              return reader2.getInt32Array(arrayLength);\n\n            case 'l':\n              return reader2.getInt64Array(arrayLength);\n          }\n\n        default:\n          throw new Error('THREE.FBXLoader: Unknown property type ' + type);\n      }\n    }\n  });\n\n  function BinaryReader(buffer, littleEndian) {\n    this.dv = new DataView(buffer);\n    this.offset = 0;\n    this.littleEndian = littleEndian !== undefined ? littleEndian : true;\n  }\n\n  Object.assign(BinaryReader.prototype, {\n    getOffset: function getOffset() {\n      return this.offset;\n    },\n    size: function size() {\n      return this.dv.buffer.byteLength;\n    },\n    skip: function skip(length) {\n      this.offset += length;\n    },\n    // seems like true/false representation depends on exporter.\n    // true: 1 or 'Y'(=0x59), false: 0 or 'T'(=0x54)\n    // then sees LSB.\n    getBoolean: function getBoolean() {\n      return (this.getUint8() & 1) === 1;\n    },\n    getBooleanArray: function getBooleanArray(size) {\n      var a = [];\n\n      for (var i = 0; i < size; i++) {\n        a.push(this.getBoolean());\n      }\n\n      return a;\n    },\n    getInt8: function getInt8() {\n      var value = this.dv.getInt8(this.offset);\n      this.offset += 1;\n      return value;\n    },\n    getInt8Array: function getInt8Array(size) {\n      var a = [];\n\n      for (var i = 0; i < size; i++) {\n        a.push(this.getInt8());\n      }\n\n      return a;\n    },\n    getUint8: function getUint8() {\n      var value = this.dv.getUint8(this.offset);\n      this.offset += 1;\n      return value;\n    },\n    getUint8Array: function getUint8Array(size) {\n      var a = [];\n\n      for (var i = 0; i < size; i++) {\n        a.push(this.getUint8());\n      }\n\n      return a;\n    },\n    getInt16: function getInt16() {\n      var value = this.dv.getInt16(this.offset, this.littleEndian);\n      this.offset += 2;\n      return value;\n    },\n    getInt16Array: function getInt16Array(size) {\n      var a = [];\n\n      for (var i = 0; i < size; i++) {\n        a.push(this.getInt16());\n      }\n\n      return a;\n    },\n    getUint16: function getUint16() {\n      var value = this.dv.getUint16(this.offset, this.littleEndian);\n      this.offset += 2;\n      return value;\n    },\n    getUint16Array: function getUint16Array(size) {\n      var a = [];\n\n      for (var i = 0; i < size; i++) {\n        a.push(this.getUint16());\n      }\n\n      return a;\n    },\n    getInt32: function getInt32() {\n      var value = this.dv.getInt32(this.offset, this.littleEndian);\n      this.offset += 4;\n      return value;\n    },\n    getInt32Array: function getInt32Array(size) {\n      var a = [];\n\n      for (var i = 0; i < size; i++) {\n        a.push(this.getInt32());\n      }\n\n      return a;\n    },\n    getUint32: function getUint32() {\n      var value = this.dv.getUint32(this.offset, this.littleEndian);\n      this.offset += 4;\n      return value;\n    },\n    getUint32Array: function getUint32Array(size) {\n      var a = [];\n\n      for (var i = 0; i < size; i++) {\n        a.push(this.getUint32());\n      }\n\n      return a;\n    },\n    // JavaScript doesn't support 64-bit integer so calculate this here\n    // 1 << 32 will return 1 so using multiply operation instead here.\n    // There's a possibility that this method returns wrong value if the value\n    // is out of the range between Number.MAX_SAFE_INTEGER and Number.MIN_SAFE_INTEGER.\n    // TODO: safely handle 64-bit integer\n    getInt64: function getInt64() {\n      var low, high;\n\n      if (this.littleEndian) {\n        low = this.getUint32();\n        high = this.getUint32();\n      } else {\n        high = this.getUint32();\n        low = this.getUint32();\n      } // calculate negative value\n\n\n      if (high & 0x80000000) {\n        high = ~high & 0xFFFFFFFF;\n        low = ~low & 0xFFFFFFFF;\n        if (low === 0xFFFFFFFF) high = high + 1 & 0xFFFFFFFF;\n        low = low + 1 & 0xFFFFFFFF;\n        return -(high * 0x100000000 + low);\n      }\n\n      return high * 0x100000000 + low;\n    },\n    getInt64Array: function getInt64Array(size) {\n      var a = [];\n\n      for (var i = 0; i < size; i++) {\n        a.push(this.getInt64());\n      }\n\n      return a;\n    },\n    // Note: see getInt64() comment\n    getUint64: function getUint64() {\n      var low, high;\n\n      if (this.littleEndian) {\n        low = this.getUint32();\n        high = this.getUint32();\n      } else {\n        high = this.getUint32();\n        low = this.getUint32();\n      }\n\n      return high * 0x100000000 + low;\n    },\n    getUint64Array: function getUint64Array(size) {\n      var a = [];\n\n      for (var i = 0; i < size; i++) {\n        a.push(this.getUint64());\n      }\n\n      return a;\n    },\n    getFloat32: function getFloat32() {\n      var value = this.dv.getFloat32(this.offset, this.littleEndian);\n      this.offset += 4;\n      return value;\n    },\n    getFloat32Array: function getFloat32Array(size) {\n      var a = [];\n\n      for (var i = 0; i < size; i++) {\n        a.push(this.getFloat32());\n      }\n\n      return a;\n    },\n    getFloat64: function getFloat64() {\n      var value = this.dv.getFloat64(this.offset, this.littleEndian);\n      this.offset += 8;\n      return value;\n    },\n    getFloat64Array: function getFloat64Array(size) {\n      var a = [];\n\n      for (var i = 0; i < size; i++) {\n        a.push(this.getFloat64());\n      }\n\n      return a;\n    },\n    getArrayBuffer: function getArrayBuffer(size) {\n      var value = this.dv.buffer.slice(this.offset, this.offset + size);\n      this.offset += size;\n      return value;\n    },\n    getChar: function getChar() {\n      return String.fromCharCode(this.getUint8());\n    },\n    getString: function getString(size) {\n      var s = '';\n\n      while (size > 0) {\n        var value = this.getUint8();\n        size--;\n        if (value === 0) break;\n        s += String.fromCharCode(value);\n      } // Manage UTF8 encoding\n\n\n      s = decodeURIComponent(escape(s));\n      this.skip(size);\n      return s;\n    }\n  }); // FBXTree holds a representation of the FBX data, returned by the TextParser ( FBX ASCII format)\n  // and BinaryParser( FBX Binary format)\n\n  function FBXTree() {}\n\n  Object.assign(FBXTree.prototype, {\n    add: function add(key, val) {\n      this[key] = val;\n    }\n  });\n\n  function isFbxFormatBinary(buffer) {\n    var CORRECT = 'Kaydara FBX Binary  \\0';\n    return buffer.byteLength >= CORRECT.length && CORRECT === convertArrayBufferToString(buffer, 0, CORRECT.length);\n  }\n\n  function isFbxFormatASCII(text) {\n    var CORRECT = ['K', 'a', 'y', 'd', 'a', 'r', 'a', '\\\\', 'F', 'B', 'X', '\\\\', 'B', 'i', 'n', 'a', 'r', 'y', '\\\\', '\\\\'];\n    var cursor = 0;\n\n    function read(offset) {\n      var result = text[offset - 1];\n      text = text.slice(cursor + offset);\n      cursor++;\n      return result;\n    }\n\n    for (var i = 0; i < CORRECT.length; ++i) {\n      var num = read(1);\n\n      if (num === CORRECT[i]) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  function getFbxVersion(text) {\n    var versionRegExp = /FBXVersion: (\\d+)/;\n    var match = text.match(versionRegExp);\n\n    if (match) {\n      var version = parseInt(match[1]);\n      return version;\n    }\n\n    throw new Error('THREE.FBXLoader: Cannot find the version number for the file given.');\n  } // Converts FBX ticks into real time seconds.\n\n\n  function convertFBXTimeToSeconds(time) {\n    return time / 46186158000;\n  } // Parses comma separated list of numbers and returns them an array.\n  // Used internally by the TextParser\n\n\n  function parseNumberArray(value) {\n    var array = value.split(',');\n\n    for (var i = 0, l = array.length; i < l; i++) {\n      array[i] = parseFloat(array[i]);\n    }\n\n    return array;\n  }\n\n  function parseVector3(property) {\n    return new THREE.Vector3().fromArray(property.value);\n  }\n\n  function parseColor(property) {\n    return new THREE.Color().fromArray(property.value);\n  } // Converts ArrayBuffer to String.\n\n\n  function convertArrayBufferToString(buffer, from, to) {\n    if (from === undefined) from = 0;\n    if (to === undefined) to = buffer.byteLength;\n    var array = new Uint8Array(buffer, from, to);\n\n    if (window.TextDecoder !== undefined) {\n      return new TextDecoder().decode(array);\n    }\n\n    var s = '';\n\n    for (var i = 0, il = array.length; i < il; i++) {\n      s += String.fromCharCode(array[i]);\n    }\n\n    return s;\n  }\n\n  function findIndex(array, func) {\n    for (var i = 0, l = array.length; i < l; i++) {\n      if (func(array[i])) return i;\n    }\n\n    return -1;\n  }\n\n  function append(a, b) {\n    for (var i = 0, j = a.length, l = b.length; i < l; i++, j++) {\n      a[j] = b[i];\n    }\n  }\n\n  function slice(a, b, from, to) {\n    for (var i = from, j = 0; i < to; i++, j++) {\n      a[j] = b[i];\n    }\n\n    return a;\n  }\n})();\n\n//# sourceURL=webpack://VDAY/./src/loader/FBXLoader.js?");

/***/ }),

/***/ "./src/loader/OBJLoader.js":
/*!*********************************!*\
  !*** ./src/loader/OBJLoader.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\nTHREE.OBJLoader = function () {\n  // o object_name | g group_name\n  var object_pattern = /^[og]\\s*(.+)?/; // mtllib file_reference\n\n  var material_library_pattern = /^mtllib /; // usemtl material_name\n\n  var material_use_pattern = /^usemtl /;\n\n  function ParserState() {\n    var state = {\n      objects: [],\n      object: {},\n      vertices: [],\n      normals: [],\n      colors: [],\n      uvs: [],\n      materialLibraries: [],\n      startObject: function startObject(name, fromDeclaration) {\n        // If the current object (initial from reset) is not from a g/o declaration in the parsed\n        // file. We need to use it for the first parsed g/o to keep things in sync.\n        if (this.object && this.object.fromDeclaration === false) {\n          this.object.name = name;\n          this.object.fromDeclaration = fromDeclaration !== false;\n          return;\n        }\n\n        var previousMaterial = this.object && typeof this.object.currentMaterial === 'function' ? this.object.currentMaterial() : undefined;\n\n        if (this.object && typeof this.object._finalize === 'function') {\n          this.object._finalize(true);\n        }\n\n        this.object = {\n          name: name || '',\n          fromDeclaration: fromDeclaration !== false,\n          geometry: {\n            vertices: [],\n            normals: [],\n            colors: [],\n            uvs: []\n          },\n          materials: [],\n          smooth: true,\n          startMaterial: function startMaterial(name, libraries) {\n            var previous = this._finalize(false); // New usemtl declaration overwrites an inherited material, except if faces were declared\n            // after the material, then it must be preserved for proper MultiMaterial continuation.\n\n\n            if (previous && (previous.inherited || previous.groupCount <= 0)) {\n              this.materials.splice(previous.index, 1);\n            }\n\n            var material = {\n              index: this.materials.length,\n              name: name || '',\n              mtllib: Array.isArray(libraries) && libraries.length > 0 ? libraries[libraries.length - 1] : '',\n              smooth: previous !== undefined ? previous.smooth : this.smooth,\n              groupStart: previous !== undefined ? previous.groupEnd : 0,\n              groupEnd: -1,\n              groupCount: -1,\n              inherited: false,\n              clone: function clone(index) {\n                var cloned = {\n                  index: typeof index === 'number' ? index : this.index,\n                  name: this.name,\n                  mtllib: this.mtllib,\n                  smooth: this.smooth,\n                  groupStart: 0,\n                  groupEnd: -1,\n                  groupCount: -1,\n                  inherited: false\n                };\n                cloned.clone = this.clone.bind(cloned);\n                return cloned;\n              }\n            };\n            this.materials.push(material);\n            return material;\n          },\n          currentMaterial: function currentMaterial() {\n            if (this.materials.length > 0) {\n              return this.materials[this.materials.length - 1];\n            }\n\n            return undefined;\n          },\n          _finalize: function _finalize(end) {\n            var lastMultiMaterial = this.currentMaterial();\n\n            if (lastMultiMaterial && lastMultiMaterial.groupEnd === -1) {\n              lastMultiMaterial.groupEnd = this.geometry.vertices.length / 3;\n              lastMultiMaterial.groupCount = lastMultiMaterial.groupEnd - lastMultiMaterial.groupStart;\n              lastMultiMaterial.inherited = false;\n            } // Ignore objects tail materials if no face declarations followed them before a new o/g started.\n\n\n            if (end && this.materials.length > 1) {\n              for (var mi = this.materials.length - 1; mi >= 0; mi--) {\n                if (this.materials[mi].groupCount <= 0) {\n                  this.materials.splice(mi, 1);\n                }\n              }\n            } // Guarantee at least one empty material, this makes the creation later more straight forward.\n\n\n            if (end && this.materials.length === 0) {\n              this.materials.push({\n                name: '',\n                smooth: this.smooth\n              });\n            }\n\n            return lastMultiMaterial;\n          }\n        }; // Inherit previous objects material.\n        // Spec tells us that a declared material must be set to all objects until a new material is declared.\n        // If a usemtl declaration is encountered while this new object is being parsed, it will\n        // overwrite the inherited material. Exception being that there was already face declarations\n        // to the inherited material, then it will be preserved for proper MultiMaterial continuation.\n\n        if (previousMaterial && previousMaterial.name && typeof previousMaterial.clone === 'function') {\n          var declared = previousMaterial.clone(0);\n          declared.inherited = true;\n          this.object.materials.push(declared);\n        }\n\n        this.objects.push(this.object);\n      },\n      finalize: function finalize() {\n        if (this.object && typeof this.object._finalize === 'function') {\n          this.object._finalize(true);\n        }\n      },\n      parseVertexIndex: function parseVertexIndex(value, len) {\n        var index = parseInt(value, 10);\n        return (index >= 0 ? index - 1 : index + len / 3) * 3;\n      },\n      parseNormalIndex: function parseNormalIndex(value, len) {\n        var index = parseInt(value, 10);\n        return (index >= 0 ? index - 1 : index + len / 3) * 3;\n      },\n      parseUVIndex: function parseUVIndex(value, len) {\n        var index = parseInt(value, 10);\n        return (index >= 0 ? index - 1 : index + len / 2) * 2;\n      },\n      addVertex: function addVertex(a, b, c) {\n        var src = this.vertices;\n        var dst = this.object.geometry.vertices;\n        dst.push(src[a + 0], src[a + 1], src[a + 2]);\n        dst.push(src[b + 0], src[b + 1], src[b + 2]);\n        dst.push(src[c + 0], src[c + 1], src[c + 2]);\n      },\n      addVertexPoint: function addVertexPoint(a) {\n        var src = this.vertices;\n        var dst = this.object.geometry.vertices;\n        dst.push(src[a + 0], src[a + 1], src[a + 2]);\n      },\n      addVertexLine: function addVertexLine(a) {\n        var src = this.vertices;\n        var dst = this.object.geometry.vertices;\n        dst.push(src[a + 0], src[a + 1], src[a + 2]);\n      },\n      addNormal: function addNormal(a, b, c) {\n        var src = this.normals;\n        var dst = this.object.geometry.normals;\n        dst.push(src[a + 0], src[a + 1], src[a + 2]);\n        dst.push(src[b + 0], src[b + 1], src[b + 2]);\n        dst.push(src[c + 0], src[c + 1], src[c + 2]);\n      },\n      addColor: function addColor(a, b, c) {\n        var src = this.colors;\n        var dst = this.object.geometry.colors;\n        dst.push(src[a + 0], src[a + 1], src[a + 2]);\n        dst.push(src[b + 0], src[b + 1], src[b + 2]);\n        dst.push(src[c + 0], src[c + 1], src[c + 2]);\n      },\n      addUV: function addUV(a, b, c) {\n        var src = this.uvs;\n        var dst = this.object.geometry.uvs;\n        dst.push(src[a + 0], src[a + 1]);\n        dst.push(src[b + 0], src[b + 1]);\n        dst.push(src[c + 0], src[c + 1]);\n      },\n      addUVLine: function addUVLine(a) {\n        var src = this.uvs;\n        var dst = this.object.geometry.uvs;\n        dst.push(src[a + 0], src[a + 1]);\n      },\n      addFace: function addFace(a, b, c, ua, ub, uc, na, nb, nc) {\n        var vLen = this.vertices.length;\n        var ia = this.parseVertexIndex(a, vLen);\n        var ib = this.parseVertexIndex(b, vLen);\n        var ic = this.parseVertexIndex(c, vLen);\n        this.addVertex(ia, ib, ic);\n\n        if (ua !== undefined && ua !== '') {\n          var uvLen = this.uvs.length;\n          ia = this.parseUVIndex(ua, uvLen);\n          ib = this.parseUVIndex(ub, uvLen);\n          ic = this.parseUVIndex(uc, uvLen);\n          this.addUV(ia, ib, ic);\n        }\n\n        if (na !== undefined && na !== '') {\n          // Normals are many times the same. If so, skip function call and parseInt.\n          var nLen = this.normals.length;\n          ia = this.parseNormalIndex(na, nLen);\n          ib = na === nb ? ia : this.parseNormalIndex(nb, nLen);\n          ic = na === nc ? ia : this.parseNormalIndex(nc, nLen);\n          this.addNormal(ia, ib, ic);\n        }\n\n        if (this.colors.length > 0) {\n          this.addColor(ia, ib, ic);\n        }\n      },\n      addPointGeometry: function addPointGeometry(vertices) {\n        this.object.geometry.type = 'Points';\n        var vLen = this.vertices.length;\n\n        for (var vi = 0, l = vertices.length; vi < l; vi++) {\n          this.addVertexPoint(this.parseVertexIndex(vertices[vi], vLen));\n        }\n      },\n      addLineGeometry: function addLineGeometry(vertices, uvs) {\n        this.object.geometry.type = 'Line';\n        var vLen = this.vertices.length;\n        var uvLen = this.uvs.length;\n\n        for (var vi = 0, l = vertices.length; vi < l; vi++) {\n          this.addVertexLine(this.parseVertexIndex(vertices[vi], vLen));\n        }\n\n        for (var uvi = 0, l = uvs.length; uvi < l; uvi++) {\n          this.addUVLine(this.parseUVIndex(uvs[uvi], uvLen));\n        }\n      }\n    };\n    state.startObject('', false);\n    return state;\n  } //\n\n\n  function OBJLoader(manager) {\n    this.manager = manager !== undefined ? manager : THREE.DefaultLoadingManager;\n    this.materials = null;\n  }\n\n  OBJLoader.prototype = {\n    constructor: OBJLoader,\n    load: function load(url, onLoad, onProgress, onError) {\n      var scope = this;\n      var loader = new THREE.FileLoader(scope.manager);\n      loader.setPath(this.path);\n      loader.load(url, function (text) {\n        onLoad(scope.parse(text));\n      }, onProgress, onError);\n    },\n    setPath: function setPath(value) {\n      this.path = value;\n      return this;\n    },\n    setMaterials: function setMaterials(materials) {\n      this.materials = materials;\n      return this;\n    },\n    parse: function parse(text) {\n      console.time('OBJLoader');\n      var state = new ParserState();\n\n      if (text.indexOf('\\r\\n') !== -1) {\n        // This is faster than String.split with regex that splits on both\n        text = text.replace(/\\r\\n/g, '\\n');\n      }\n\n      if (text.indexOf('\\\\\\n') !== -1) {\n        // join lines separated by a line continuation character (\\)\n        text = text.replace(/\\\\\\n/g, '');\n      }\n\n      var lines = text.split('\\n');\n      var line = '',\n          lineFirstChar = '';\n      var lineLength = 0;\n      var result = []; // Faster to just trim left side of the line. Use if available.\n\n      var trimLeft = typeof ''.trimLeft === 'function';\n\n      for (var i = 0, l = lines.length; i < l; i++) {\n        line = lines[i];\n        line = trimLeft ? line.trimLeft() : line.trim();\n        lineLength = line.length;\n        if (lineLength === 0) continue;\n        lineFirstChar = line.charAt(0); // @todo invoke passed in handler if any\n\n        if (lineFirstChar === '#') continue;\n\n        if (lineFirstChar === 'v') {\n          var data = line.split(/\\s+/);\n\n          switch (data[0]) {\n            case 'v':\n              state.vertices.push(parseFloat(data[1]), parseFloat(data[2]), parseFloat(data[3]));\n\n              if (data.length === 8) {\n                state.colors.push(parseFloat(data[4]), parseFloat(data[5]), parseFloat(data[6]));\n              }\n\n              break;\n\n            case 'vn':\n              state.normals.push(parseFloat(data[1]), parseFloat(data[2]), parseFloat(data[3]));\n              break;\n\n            case 'vt':\n              state.uvs.push(parseFloat(data[1]), parseFloat(data[2]));\n              break;\n          }\n        } else if (lineFirstChar === 'f') {\n          var lineData = line.substr(1).trim();\n          var vertexData = lineData.split(/\\s+/);\n          var faceVertices = []; // Parse the face vertex data into an easy to work with format\n\n          for (var j = 0, jl = vertexData.length; j < jl; j++) {\n            var vertex = vertexData[j];\n\n            if (vertex.length > 0) {\n              var vertexParts = vertex.split('/');\n              faceVertices.push(vertexParts);\n            }\n          } // Draw an edge between the first vertex and all subsequent vertices to form an n-gon\n\n\n          var v1 = faceVertices[0];\n\n          for (var j = 1, jl = faceVertices.length - 1; j < jl; j++) {\n            var v2 = faceVertices[j];\n            var v3 = faceVertices[j + 1];\n            state.addFace(v1[0], v2[0], v3[0], v1[1], v2[1], v3[1], v1[2], v2[2], v3[2]);\n          }\n        } else if (lineFirstChar === 'l') {\n          var lineParts = line.substring(1).trim().split(\" \");\n          var lineVertices = [],\n              lineUVs = [];\n\n          if (line.indexOf(\"/\") === -1) {\n            lineVertices = lineParts;\n          } else {\n            for (var li = 0, llen = lineParts.length; li < llen; li++) {\n              var parts = lineParts[li].split(\"/\");\n              if (parts[0] !== \"\") lineVertices.push(parts[0]);\n              if (parts[1] !== \"\") lineUVs.push(parts[1]);\n            }\n          }\n\n          state.addLineGeometry(lineVertices, lineUVs);\n        } else if (lineFirstChar === 'p') {\n          var lineData = line.substr(1).trim();\n          var pointData = lineData.split(\" \");\n          state.addPointGeometry(pointData);\n        } else if ((result = object_pattern.exec(line)) !== null) {\n          // o object_name\n          // or\n          // g group_name\n          // WORKAROUND: https://bugs.chromium.org/p/v8/issues/detail?id=2869\n          // var name = result[ 0 ].substr( 1 ).trim();\n          var name = (\" \" + result[0].substr(1).trim()).substr(1);\n          state.startObject(name);\n        } else if (material_use_pattern.test(line)) {\n          // material\n          state.object.startMaterial(line.substring(7).trim(), state.materialLibraries);\n        } else if (material_library_pattern.test(line)) {\n          // mtl file\n          state.materialLibraries.push(line.substring(7).trim());\n        } else if (lineFirstChar === 's') {\n          result = line.split(' '); // smooth shading\n          // @todo Handle files that have varying smooth values for a set of faces inside one geometry,\n          // but does not define a usemtl for each face set.\n          // This should be detected and a dummy material created (later MultiMaterial and geometry groups).\n          // This requires some care to not create extra material on each smooth value for \"normal\" obj files.\n          // where explicit usemtl defines geometry groups.\n          // Example asset: examples/models/obj/cerberus/Cerberus.obj\n\n          /*\r\n           * http://paulbourke.net/dataformats/obj/\r\n           * or\r\n           * http://www.cs.utah.edu/~boulos/cs3505/obj_spec.pdf\r\n           *\r\n           * From chapter \"Grouping\" Syntax explanation \"s group_number\":\r\n           * \"group_number is the smoothing group number. To turn off smoothing groups, use a value of 0 or off.\r\n           * Polygonal elements use group numbers to put elements in different smoothing groups. For free-form\r\n           * surfaces, smoothing groups are either turned on or off; there is no difference between values greater\r\n           * than 0.\"\r\n           */\n\n          if (result.length > 1) {\n            var value = result[1].trim().toLowerCase();\n            state.object.smooth = value !== '0' && value !== 'off';\n          } else {\n            // ZBrush can produce \"s\" lines #11707\n            state.object.smooth = true;\n          }\n\n          var material = state.object.currentMaterial();\n          if (material) material.smooth = state.object.smooth;\n        } else {\n          // Handle null terminated files without exception\n          if (line === '\\0') continue;\n          throw new Error('THREE.OBJLoader: Unexpected line: \"' + line + '\"');\n        }\n      }\n\n      state.finalize();\n      var container = new THREE.Group();\n      container.materialLibraries = [].concat(state.materialLibraries);\n\n      for (var i = 0, l = state.objects.length; i < l; i++) {\n        var object = state.objects[i];\n        var geometry = object.geometry;\n        var materials = object.materials;\n        var isLine = geometry.type === 'Line';\n        var isPoints = geometry.type === 'Points';\n        var hasVertexColors = false; // Skip o/g line declarations that did not follow with any faces\n\n        if (geometry.vertices.length === 0) continue;\n        var buffergeometry = new THREE.BufferGeometry();\n        buffergeometry.addAttribute('position', new THREE.Float32BufferAttribute(geometry.vertices, 3));\n\n        if (geometry.normals.length > 0) {\n          buffergeometry.addAttribute('normal', new THREE.Float32BufferAttribute(geometry.normals, 3));\n        } else {\n          buffergeometry.computeVertexNormals();\n        }\n\n        if (geometry.colors.length > 0) {\n          hasVertexColors = true;\n          buffergeometry.addAttribute('color', new THREE.Float32BufferAttribute(geometry.colors, 3));\n        }\n\n        if (geometry.uvs.length > 0) {\n          buffergeometry.addAttribute('uv', new THREE.Float32BufferAttribute(geometry.uvs, 2));\n        } // Create materials\n\n\n        var createdMaterials = [];\n\n        for (var mi = 0, miLen = materials.length; mi < miLen; mi++) {\n          var sourceMaterial = materials[mi];\n          var material = undefined;\n\n          if (this.materials !== null) {\n            material = this.materials.create(sourceMaterial.name); // mtl etc. loaders probably can't create line materials correctly, copy properties to a line material.\n\n            if (isLine && material && !(material instanceof THREE.LineBasicMaterial)) {\n              var materialLine = new THREE.LineBasicMaterial();\n              materialLine.copy(material);\n              materialLine.lights = false; // TOFIX\n\n              material = materialLine;\n            } else if (isPoints && material && !(material instanceof THREE.PointsMaterial)) {\n              var materialPoints = new THREE.PointsMaterial({\n                size: 10,\n                sizeAttenuation: false\n              });\n              materialLine.copy(material);\n              material = materialPoints;\n            }\n          }\n\n          if (!material) {\n            if (isLine) {\n              material = new THREE.LineBasicMaterial();\n            } else if (isPoints) {\n              material = new THREE.PointsMaterial({\n                size: 1,\n                sizeAttenuation: false\n              });\n            } else {\n              material = new THREE.MeshPhongMaterial();\n            }\n\n            material.name = sourceMaterial.name;\n          }\n\n          material.flatShading = sourceMaterial.smooth ? false : true;\n          material.vertexColors = hasVertexColors ? THREE.VertexColors : THREE.NoColors;\n          createdMaterials.push(material);\n        } // Create mesh\n\n\n        var mesh;\n\n        if (createdMaterials.length > 1) {\n          for (var mi = 0, miLen = materials.length; mi < miLen; mi++) {\n            var sourceMaterial = materials[mi];\n            buffergeometry.addGroup(sourceMaterial.groupStart, sourceMaterial.groupCount, mi);\n          }\n\n          if (isLine) {\n            mesh = new THREE.LineSegments(buffergeometry, createdMaterials);\n          } else if (isPoints) {\n            mesh = new THREE.Points(buffergeometry, createdMaterials);\n          } else {\n            mesh = new THREE.Mesh(buffergeometry, createdMaterials);\n          }\n        } else {\n          if (isLine) {\n            mesh = new THREE.LineSegments(buffergeometry, createdMaterials[0]);\n          } else if (isPoints) {\n            mesh = new THREE.Points(buffergeometry, createdMaterials[0]);\n          } else {\n            mesh = new THREE.Mesh(buffergeometry, createdMaterials[0]);\n          }\n        }\n\n        mesh.name = object.name;\n        container.add(mesh);\n      }\n\n      console.timeEnd('OBJLoader');\n      return container;\n    }\n  };\n  return OBJLoader;\n}();\n\n//# sourceURL=webpack://VDAY/./src/loader/OBJLoader.js?");

/***/ }),

/***/ "./src/loader/loader.js":
/*!******************************!*\
  !*** ./src/loader/loader.js ***!
  \******************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _FBXLoader__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./FBXLoader */ \"./src/loader/FBXLoader.js\");\n/* harmony import */ var _FBXLoader__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_FBXLoader__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _OBJLoader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./OBJLoader */ \"./src/loader/OBJLoader.js\");\n/* harmony import */ var _OBJLoader__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_OBJLoader__WEBPACK_IMPORTED_MODULE_1__);\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n/** Load FBX & OBJ */\n\n\n\nvar Loader =\n/*#__PURE__*/\nfunction () {\n  function Loader(path) {\n    _classCallCheck(this, Loader);\n\n    this.path = \"\".concat(APP_ROOT, \"/\").concat(path, \"/\");\n    this.materials = {};\n    this.images = {};\n    this.loaderFBX = new THREE.FBXLoader();\n    this.loaderOBJ = new THREE.OBJLoader();\n    this.loaderTexture = new THREE.TextureLoader();\n    this.loaderFont = new THREE.FontLoader();\n  }\n\n  _createClass(Loader, [{\n    key: \"loadFBX\",\n    value: function loadFBX(file) {\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        try {\n          var path = _this.path + file + (file.indexOf('.fbx') == -1 ? '.fbx' : '');\n\n          _this.loaderFBX.load(path, function (model) {\n            resolve(model);\n          });\n        } catch (error) {\n          console.log(error);\n          reject(error);\n        }\n      });\n    }\n  }, {\n    key: \"loadOBJ\",\n    value: function loadOBJ(file) {\n      var _this2 = this;\n\n      return new Promise(function (resolve, reject) {\n        try {\n          _this2.loaderOBJ.load(_this2.path + file + '.obj', function (model) {\n            resolve(model);\n          });\n        } catch (error) {\n          console.log(error);\n          reject(error);\n        }\n      });\n    }\n  }, {\n    key: \"loadFont\",\n    value: function loadFont(file) {\n      var _this3 = this;\n\n      return new Promise(function (resolve, reject) {\n        try {\n          _this3.loaderFont.load(_this3.path + file, function (font) {\n            resolve(font);\n          });\n        } catch (error) {\n          console.log(error);\n          reject(error);\n        }\n      });\n    }\n  }, {\n    key: \"loadTexture\",\n    value: function loadTexture(file) {\n      return this.loaderTexture.load(this.path + file);\n    }\n  }]);\n\n  return Loader;\n}();\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Loader);\n\n//# sourceURL=webpack://VDAY/./src/loader/loader.js?");

/***/ }),

/***/ "./src/modules/camera.js":
/*!*******************************!*\
  !*** ./src/modules/camera.js ***!
  \*******************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n/** Camera */\nvar Camera =\n/*#__PURE__*/\nfunction () {\n  function Camera(root) {\n    _classCallCheck(this, Camera);\n\n    this.offset = 0.1;\n    this.camera = new THREE.PerspectiveCamera(65, 1, 0.1, 2000000);\n    this.camera.up = new THREE.Vector3(0, 1, 0);\n    this.camera.rotation.order = 'YXZ';\n    this.camera.position.set(10, 10, 10);\n    this.camera.lookAt(new THREE.Vector3());\n  }\n\n  _createClass(Camera, [{\n    key: \"bind\",\n    value: function bind(root) {\n      var _this = this;\n\n      this.ref = {}; // resize camera\n\n      this.resize();\n      window.addEventListener('resize', function () {\n        _this.resize();\n      });\n    }\n  }, {\n    key: \"set\",\n    value: function set(params) {\n      this.camera.fov = params.fov || 65;\n      this.camera.updateProjectionMatrix();\n    }\n  }, {\n    key: \"addAudioListener\",\n    value: function addAudioListener() {\n      this.listener = new THREE.AudioListener();\n      this.camera.add(this.listener);\n    }\n  }, {\n    key: \"resize\",\n    value: function resize() {\n      var x = window.innerWidth;\n      var y = window.innerHeight;\n      this.camera.aspect = x / y;\n      this.camera.updateProjectionMatrix();\n    }\n  }, {\n    key: \"update\",\n    value: function update(delta) {}\n  }]);\n\n  return Camera;\n}();\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Camera);\n\n//# sourceURL=webpack://VDAY/./src/modules/camera.js?");

/***/ }),

/***/ "./src/modules/lighting.js":
/*!*********************************!*\
  !*** ./src/modules/lighting.js ***!
  \*********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _util_is_mobile_device__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/is_mobile_device */ \"./src/util/is_mobile_device.js\");\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n/** Lighting */\n\n\nvar Lighting =\n/*#__PURE__*/\nfunction () {\n  function Lighting() {\n    _classCallCheck(this, Lighting);\n\n    this.lightingModel = Object(_util_is_mobile_device__WEBPACK_IMPORTED_MODULE_0__[\"default\"])() ? 1 : 2; // lights\n\n    this.lights = {\n      point: {},\n      ambient: {},\n      directional: {},\n      hemisphere: {},\n      spot: {}\n    };\n    this.lights.point.a = new THREE.PointLight(0xffffff, 1, 24, this.lightingModel);\n    this.lights.ambient.a = new THREE.AmbientLight(0xffffff, 0.3);\n    this.lights.directional.a = new THREE.DirectionalLight(0xffffff, 0.5);\n    this.lights.hemisphere.a = new THREE.HemisphereLight(0x0, 0x0000ff, 0.25);\n    this.lights.spot.a = new THREE.SpotLight(0xffffff, 1, 32, Math.PI / 3, 0.25);\n  }\n\n  _createClass(Lighting, [{\n    key: \"bind\",\n    value: function bind(root) {\n      this.ref = {};\n      this.ref.scene = root.modules.scene.scene;\n      this.ref.materials = root.modules.materials;\n      this.init();\n    }\n  }, {\n    key: \"init\",\n    value: function init(data) {\n      var _this = this;\n\n      // default callback\n      this.updateCallback = null; // default positions\n\n      this.lights.point.a.position.set(0, 10, 0);\n      this.lights.directional.a.position.set(-1, 1.5, -1);\n      this.lights.spot.a.position.set(0, 10, 14);\n      this.lights.spot.a.target.position.set(-4, 0, 6); // default intensity\n\n      this.lights.point.a.intensity = 1;\n      this.lights.ambient.a.intensity = 0.3;\n      this.lights.directional.a.intensity = 0.5;\n      this.lights.hemisphere.a.intensity = 0.25;\n      this.lights.spot.a.intensity = 1; // default colour\n\n      this.lights.point.a.color.setHex(0xffffff);\n      this.lights.ambient.a.color.setHex(0xffffff);\n      this.lights.spot.a.color.setHex(0xffffff); // misc\n\n      this.lights.point.a.distance = 32;\n      this.lights.spot.a.distance = 32;\n      this.lights.spot.a.angle = Math.PI / 3;\n      this.lights.spot.a.penumbra = 0.25; // add lights\n\n      Object.keys(this.lights).forEach(function (type) {\n        Object.keys(_this.lights[type]).forEach(function (key) {\n          var light = _this.lights[type][key];\n\n          _this.ref.scene.add(light);\n\n          if (light.isSpotLight) {\n            _this.ref.scene.add(light.target);\n          }\n        });\n      }); // remove fog\n\n      this.ref.scene.fog = new THREE.FogExp2(0x000000, 0);\n    }\n  }]);\n\n  return Lighting;\n}();\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Lighting);\n\n//# sourceURL=webpack://VDAY/./src/modules/lighting.js?");

/***/ }),

/***/ "./src/modules/loop.js":
/*!*****************************!*\
  !*** ./src/modules/loop.js ***!
  \*****************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n/** the main loop */\nvar Loop =\n/*#__PURE__*/\nfunction () {\n  function Loop() {\n    _classCallCheck(this, Loop);\n\n    this.active = false;\n    this.deltaMax = 0.1;\n  }\n\n  _createClass(Loop, [{\n    key: \"bind\",\n    value: function bind(root) {\n      var _this = this;\n\n      this.ref = {};\n      this.ref.update = [];\n      this.ref.render = []; // modules for update & render\n\n      Object.keys(root.modules).forEach(function (key) {\n        if (root.modules[key].update) {\n          _this.ref.update.push(root.modules[key]);\n        }\n\n        if (root.modules[key].render) {\n          _this.ref.render.push(root.modules[key]);\n        }\n      }); // doc targets\n\n      this.el = {};\n      this.el.wrapper = document.querySelector('.wrapper');\n      this.el.canvasWrapper = document.querySelector('.canvas-wrapper');\n      this.now = performance.now();\n      this.loop();\n    }\n  }, {\n    key: \"pause\",\n    value: function pause() {\n      this.active = false;\n    }\n  }, {\n    key: \"hide\",\n    value: function hide() {\n      this.pause();\n      this.el.wrapper.classList.remove('docked');\n      this.el.canvasWrapper.classList.remove('active');\n    }\n  }, {\n    key: \"resume\",\n    value: function resume() {\n      this.el.wrapper.classList.add('docked');\n      this.el.canvasWrapper.classList.add('active');\n      this.now = performance.now();\n      this.active = true;\n    }\n  }, {\n    key: \"loop\",\n    value: function loop() {\n      var _this2 = this;\n\n      requestAnimationFrame(function () {\n        _this2.loop();\n      });\n\n      if (this.active) {\n        var now = performance.now();\n        var delta = Math.min(this.deltaMax, (now - this.now) / 1000);\n        this.now = now;\n        this.ref.update.forEach(function (mod) {\n          mod.update(delta);\n        });\n        this.ref.render.forEach(function (mod) {\n          mod.render(delta);\n        });\n      }\n    }\n  }]);\n\n  return Loop;\n}();\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Loop);\n\n//# sourceURL=webpack://VDAY/./src/modules/loop.js?");

/***/ }),

/***/ "./src/modules/materials.js":
/*!**********************************!*\
  !*** ./src/modules/materials.js ***!
  \**********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n/** Material handler */\nvar Materials =\n/*#__PURE__*/\nfunction () {\n  function Materials() {\n    var _this = this;\n\n    _classCallCheck(this, Materials);\n\n    this.path = \"\".concat(APP_ROOT); // set default materials\n\n    this.mat = {};\n    this.mat.default = new THREE.MeshPhysicalMaterial({\n      emissive: 0,\n      roughness: 1,\n      envMapIntensity: 0.25\n    });\n    this.mat.porcelain = new THREE.MeshPhysicalMaterial({\n      color: 0x444444,\n      emissive: 0x888888,\n      emissiveIntensity: 0.6,\n      roughness: 0.55,\n      metalness: 0.125,\n      envMapIntensity: 0.5\n    });\n    this.mat.metal = new THREE.MeshPhysicalMaterial({\n      color: 0xa88e79,\n      emissive: 0x0,\n      roughness: 0.25,\n      metalness: 1.0,\n      envMapIntensity: 0.5\n    });\n    this.mat.neon = new THREE.MeshPhysicalMaterial({\n      emissive: 0xffffff,\n      emissiveIntensity: 1.0\n    }); // apply default envmap\n\n    this.envMap = this.createEnvMap('assets/envmap');\n    this.envMapIntensity = 0.5;\n    Object.keys(this.mat).forEach(function (key) {\n      if (_this.mat[key].type && _this.mat[key].type === 'MeshPhysicalMaterial') {\n        _this.mat[key].envMap = _this.envMap;\n      }\n    }); // shader uniforms\n\n    this.uniforms = {\n      time: {\n        value: 0\n      }\n    };\n  }\n\n  _createClass(Materials, [{\n    key: \"bind\",\n    value: function bind(root) {}\n  }, {\n    key: \"createEnvMap\",\n    value: function createEnvMap(path) {\n      var _this2 = this;\n\n      var sources = ['posx', 'negx', 'posy', 'negy', 'posz', 'negz'].map(function (filename) {\n        return \"\".concat(_this2.path).concat(path, \"/\").concat(filename, \".jpg\");\n      });\n      var map = new THREE.CubeTextureLoader().load(sources);\n      return map;\n    }\n  }, {\n    key: \"conformGroup\",\n    value: function conformGroup(obj) {\n      var _this3 = this;\n\n      // recursively conform object groups\n      if (obj.type === 'Mesh') {\n        this.conformMaterial(obj.material);\n      } else if (obj.children && obj.children.length) {\n        obj.children.forEach(function (child) {\n          _this3.conformGroup(child);\n        });\n      }\n    }\n  }, {\n    key: \"conformMaterial\",\n    value: function conformMaterial(mat) {\n      if (!this.loaded[mat.name]) {\n        this.loaded[mat.name] = mat;\n      } // apply env map\n\n\n      mat.envMap = this.envMap;\n      mat.envMapIntensity = this.envMapIntensity;\n    }\n  }, {\n    key: \"createCustomMaterial\",\n    value: function createCustomMaterial(material, shaderText, funcs) {\n      var _this4 = this;\n\n      var mat = material.clone();\n\n      mat.onBeforeCompile = function (shader) {\n        shader.vertexShader = \"uniform float time;\\n\".concat(funcs || '', \"\\n\").concat(shader.vertexShader);\n        shader.vertexShader = shader.vertexShader.replace('#include <begin_vertex>', shaderText);\n        shader.uniforms.time = _this4.uniforms.time;\n      };\n\n      return mat;\n    }\n  }, {\n    key: \"applyAlphaMap\",\n    value: function applyAlphaMap(material, map) {\n      material.color.setHex(0xffffff);\n      material.alphaMap = map;\n      material.transparent = true;\n      material.side = THREE.DoubleSide;\n      material.depthWrite = false; // material.blending = THREE.AdditiveBlending;\n    }\n  }, {\n    key: \"update\",\n    value: function update(delta) {\n      this.uniforms.time.value += delta;\n    }\n  }]);\n\n  return Materials;\n}();\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Materials);\n\n//# sourceURL=webpack://VDAY/./src/modules/materials.js?");

/***/ }),

/***/ "./src/modules/renderer.js":
/*!*********************************!*\
  !*** ./src/modules/renderer.js ***!
  \*********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _glsl__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../glsl */ \"./src/glsl/index.js\");\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n/** Renderer */\n\n\nvar Renderer =\n/*#__PURE__*/\nfunction () {\n  function Renderer() {\n    _classCallCheck(this, Renderer);\n\n    this.renderer = new THREE.WebGLRenderer({\n      antialias: false\n    });\n    this.renderer.setClearColor(0x0, 0.1);\n    this.renderer.gammaInput = true;\n    this.renderer.gammaOutput = true;\n    this.renderer.gammaFactor = 2.125;\n    this.renderer.shadowMap.enabled = true;\n    this.renderer.shadowMap.type = THREE.PCFShadowMap; // add to doc\n\n    this.domTarget = document.querySelector('#canvas-target');\n    this.domTarget.appendChild(this.renderer.domElement);\n  }\n\n  _createClass(Renderer, [{\n    key: \"bind\",\n    value: function bind(root) {\n      var _this = this;\n\n      this.ref = {};\n      this.ref.scene = root.modules.scene.scene;\n      this.ref.camera = root.modules.camera.camera; // disable composer\n\n      this.useComposer = false;\n      this.size = new THREE.Vector2(); // composer + render passes\n\n      this.composer = new THREE.EffectComposer(this.renderer);\n      var strength = 0.8;\n      var radius = 0.25;\n      var threshold = 0.95;\n      this.passes = {\n        render: new THREE.RenderPass(this.ref.scene, this.ref.camera),\n        bloom: new THREE.BloomLite(this.size, strength, radius, threshold)\n      };\n      Object.keys(this.passes).forEach(function (key) {\n        _this.composer.addPass(_this.passes[key]);\n      }); // set render pass\n\n      this.passes.bloom.renderToScreen = true; // bind events\n\n      this.resize();\n      window.addEventListener('resize', function () {\n        _this.resize();\n      });\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this.useComposer = false;\n    }\n  }, {\n    key: \"resize\",\n    value: function resize() {\n      var _this2 = this;\n\n      var x = window.innerWidth;\n      var y = window.innerHeight;\n      this.size.set(x, y);\n      this.renderer.setSize(x, y);\n      this.composer.setSize(x, y);\n      Object.keys(this.passes).forEach(function (key) {\n        if (_this2.passes[key].setSize) {\n          _this2.passes[key].setSize(x, y);\n        }\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render(delta) {\n      if (this.useComposer) {\n        this.composer.render(delta);\n      } else {\n        this.renderer.render(this.ref.scene, this.ref.camera);\n      }\n    }\n  }]);\n\n  return Renderer;\n}();\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Renderer);\n\n//# sourceURL=webpack://VDAY/./src/modules/renderer.js?");

/***/ }),

/***/ "./src/modules/scene.js":
/*!******************************!*\
  !*** ./src/modules/scene.js ***!
  \******************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _loader_loader__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../loader/loader */ \"./src/loader/loader.js\");\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n/** Scene */\n\n\nvar Scene =\n/*#__PURE__*/\nfunction () {\n  function Scene() {\n    _classCallCheck(this, Scene);\n\n    this.scene = new THREE.Scene();\n    this.loader = new _loader_loader__WEBPACK_IMPORTED_MODULE_0__[\"default\"]('assets');\n    this.loader.loadFBX('rose').then(function (obj) {\n      console.log(obj);\n    });\n  }\n\n  _createClass(Scene, [{\n    key: \"bind\",\n    value: function bind(root) {\n      this.ref = {};\n    }\n  }, {\n    key: \"update\",\n    value: function update(delta) {}\n  }]);\n\n  return Scene;\n}();\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Scene);\n\n//# sourceURL=webpack://VDAY/./src/modules/scene.js?");

/***/ }),

/***/ "./src/ui/loading.js":
/*!***************************!*\
  !*** ./src/ui/loading.js ***!
  \***************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n/** Loading screen */\nvar Loading =\n/*#__PURE__*/\nfunction () {\n  function Loading() {\n    _classCallCheck(this, Loading);\n\n    this.el = {};\n    this.el.loadingScreen = document.querySelector('.loading');\n    this.hide();\n  }\n\n  _createClass(Loading, [{\n    key: \"show\",\n    value: function show(state) {\n      this.el.loadingScreen.classList.add('active');\n    }\n  }, {\n    key: \"hide\",\n    value: function hide() {\n      this.el.loadingScreen.classList.remove('active');\n    }\n  }]);\n\n  return Loading;\n}();\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Loading);\n\n//# sourceURL=webpack://VDAY/./src/ui/loading.js?");

/***/ }),

/***/ "./src/util/is_mobile_device.js":
/*!**************************************!*\
  !*** ./src/util/is_mobile_device.js ***!
  \**************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/** Detect mobile device (smartphone/ tablet) */\nvar IsMobileDevice = function IsMobileDevice() {\n  var check = false;\n\n  (function (a) {\n    if (/(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(a) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i.test(a.substr(0, 4))) check = true;\n  })(navigator.userAgent || navigator.vendor || window.opera);\n\n  return check;\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (IsMobileDevice);\n\n//# sourceURL=webpack://VDAY/./src/util/is_mobile_device.js?");

/***/ })

/******/ });